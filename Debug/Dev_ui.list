
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c430  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800c600  0800c600  0001c600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c714  0800c714  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800c714  0800c714  0001c714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c71c  0800c71c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c71c  0800c71c  0001c71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c720  0800c720  0001c720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800c724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c99c  20000098  0800c7bc  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ca34  0800c7bc  0002ca34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000284fd  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000499a  00000000  00000000  000485c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020f0  00000000  00000000  0004cf60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ec8  00000000  00000000  0004f050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000582e  00000000  00000000  00050f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d437  00000000  00000000  00056746  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010df2b  00000000  00000000  00073b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00181aa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f7c  00000000  00000000  00181b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c5e8 	.word	0x0800c5e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	0800c5e8 	.word	0x0800c5e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b0ca      	sub	sp, #296	; 0x128
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f002 fbec 	bl	8002d92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f9ad 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f001 f84b 	bl	8001658 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c2:	f001 f807 	bl	80015d4 <MX_DMA_Init>
  MX_ADC1_Init();
 80005c6:	f000 fa4f 	bl	8000a68 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005ca:	f000 fb2b 	bl	8000c24 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005ce:	f000 fba5 	bl	8000d1c <MX_ADC3_Init>
  MX_I2C1_Init();
 80005d2:	f000 fc6f 	bl	8000eb4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005d6:	f000 fcad 	bl	8000f34 <MX_I2C2_Init>
  MX_TIM4_Init();
 80005da:	f000 fe43 	bl	8001264 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005de:	f000 feb9 	bl	8001354 <MX_TIM5_Init>
  MX_UART5_Init();
 80005e2:	f000 ff69 	bl	80014b8 <MX_UART5_Init>
  MX_I2C4_Init();
 80005e6:	f000 fd25 	bl	8001034 <MX_I2C4_Init>
  MX_RTC_Init();
 80005ea:	f000 fd63 	bl	80010b4 <MX_RTC_Init>
  MX_UART4_Init();
 80005ee:	f000 ff33 	bl	8001458 <MX_UART4_Init>
  MX_UART7_Init();
 80005f2:	f000 ff91 	bl	8001518 <MX_UART7_Init>
  MX_I2C3_Init();
 80005f6:	f000 fcdd 	bl	8000fb4 <MX_I2C3_Init>
  MX_SPI4_Init();
 80005fa:	f000 fdb7 	bl	800116c <MX_SPI4_Init>
  MX_SPI5_Init();
 80005fe:	f000 fdf3 	bl	80011e8 <MX_SPI5_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000602:	f000 ffb9 	bl	8001578 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000606:	f000 fc21 	bl	8000e4c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 800060a:	f241 3288 	movw	r2, #5000	; 0x1388
 800060e:	49a4      	ldr	r1, [pc, #656]	; (80008a0 <main+0x2f0>)
 8000610:	48a4      	ldr	r0, [pc, #656]	; (80008a4 <main+0x2f4>)
 8000612:	f002 fd93 	bl	800313c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8000616:	f241 3288 	movw	r2, #5000	; 0x1388
 800061a:	49a3      	ldr	r1, [pc, #652]	; (80008a8 <main+0x2f8>)
 800061c:	48a3      	ldr	r0, [pc, #652]	; (80008ac <main+0x2fc>)
 800061e:	f002 fd8d 	bl	800313c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8000622:	f241 3288 	movw	r2, #5000	; 0x1388
 8000626:	49a2      	ldr	r1, [pc, #648]	; (80008b0 <main+0x300>)
 8000628:	48a2      	ldr	r0, [pc, #648]	; (80008b4 <main+0x304>)
 800062a:	f002 fd87 	bl	800313c <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(GPIOJ,LCD_DISP_Pin,GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2102      	movs	r1, #2
 8000632:	48a1      	ldr	r0, [pc, #644]	; (80008b8 <main+0x308>)
 8000634:	f004 f90a 	bl	800484c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ,LCD_EXTMODE_Pin,GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2101      	movs	r1, #1
 800063c:	489e      	ldr	r0, [pc, #632]	; (80008b8 <main+0x308>)
 800063e:	f004 f905 	bl	800484c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f002 fbd2 	bl	8002dec <HAL_Delay>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2110      	movs	r1, #16
 800064c:	489b      	ldr	r0, [pc, #620]	; (80008bc <main+0x30c>)
 800064e:	f004 f8fd 	bl	800484c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Clear, 1, 100);
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	2201      	movs	r2, #1
 8000656:	499a      	ldr	r1, [pc, #616]	; (80008c0 <main+0x310>)
 8000658:	489a      	ldr	r0, [pc, #616]	; (80008c4 <main+0x314>)
 800065a:	f006 faf1 	bl	8006c40 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2110      	movs	r1, #16
 8000662:	4896      	ldr	r0, [pc, #600]	; (80008bc <main+0x30c>)
 8000664:	f004 f8f2 	bl	800484c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f002 fbbf 	bl	8002dec <HAL_Delay>
  int x=1;
 800066e:	2301      	movs	r3, #1
 8000670:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  uint16_t test[102];
  test[0] = update_Line1;
 8000674:	4b94      	ldr	r3, [pc, #592]	; (80008c8 <main+0x318>)
 8000676:	881a      	ldrh	r2, [r3, #0]
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	801a      	strh	r2, [r3, #0]
  uartTransmitInt(test[0],7);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	2107      	movs	r1, #7
 8000682:	4618      	mov	r0, r3
 8000684:	f001 f994 	bl	80019b0 <uartTransmitInt>
  while (x<101){
 8000688:	e00b      	b.n	80006a2 <main+0xf2>
	test[x] = LCD_Green;
 800068a:	4b90      	ldr	r3, [pc, #576]	; (80008cc <main+0x31c>)
 800068c:	8819      	ldrh	r1, [r3, #0]
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000694:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	x=x+1;
 8000698:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800069c:	3301      	adds	r3, #1
 800069e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  while (x<101){
 80006a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80006a6:	2b64      	cmp	r3, #100	; 0x64
 80006a8:	ddef      	ble.n	800068a <main+0xda>
  }
  x=0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  test[61] = update_dummy;
 80006b0:	4b87      	ldr	r3, [pc, #540]	; (80008d0 <main+0x320>)
 80006b2:	881a      	ldrh	r2, [r3, #0]
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
  uartTransmitInt(test,7);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2107      	movs	r1, #7
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f976 	bl	80019b0 <uartTransmitInt>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2110      	movs	r1, #16
 80006c8:	487c      	ldr	r0, [pc, #496]	; (80008bc <main+0x30c>)
 80006ca:	f004 f8bf 	bl	800484c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, (uint16_t *)test, 102, 100);
 80006ce:	1d39      	adds	r1, r7, #4
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	2266      	movs	r2, #102	; 0x66
 80006d4:	487b      	ldr	r0, [pc, #492]	; (80008c4 <main+0x314>)
 80006d6:	f006 fab3 	bl	8006c40 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	4877      	ldr	r0, [pc, #476]	; (80008bc <main+0x30c>)
 80006e0:	f004 f8b4 	bl	800484c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80006e4:	2005      	movs	r0, #5
 80006e6:	f002 fb81 	bl	8002dec <HAL_Delay>
  test[0]=update_Line2;
 80006ea:	4b7a      	ldr	r3, [pc, #488]	; (80008d4 <main+0x324>)
 80006ec:	881a      	ldrh	r2, [r3, #0]
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	801a      	strh	r2, [r3, #0]
  uartTransmitInt(test[0],7);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	2107      	movs	r1, #7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 f959 	bl	80019b0 <uartTransmitInt>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2110      	movs	r1, #16
 8000702:	486e      	ldr	r0, [pc, #440]	; (80008bc <main+0x30c>)
 8000704:	f004 f8a2 	bl	800484c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, (uint16_t *)test, 102, 100);
 8000708:	1d39      	adds	r1, r7, #4
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	2266      	movs	r2, #102	; 0x66
 800070e:	486d      	ldr	r0, [pc, #436]	; (80008c4 <main+0x314>)
 8000710:	f006 fa96 	bl	8006c40 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2110      	movs	r1, #16
 8000718:	4868      	ldr	r0, [pc, #416]	; (80008bc <main+0x30c>)
 800071a:	f004 f897 	bl	800484c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800071e:	2005      	movs	r0, #5
 8000720:	f002 fb64 	bl	8002dec <HAL_Delay>
  test[0]=update_Line3;
 8000724:	4b6c      	ldr	r3, [pc, #432]	; (80008d8 <main+0x328>)
 8000726:	881a      	ldrh	r2, [r3, #0]
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	801a      	strh	r2, [r3, #0]
  uartTransmitInt(test[0],7);
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	2107      	movs	r1, #7
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f93c 	bl	80019b0 <uartTransmitInt>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	485f      	ldr	r0, [pc, #380]	; (80008bc <main+0x30c>)
 800073e:	f004 f885 	bl	800484c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, (uint16_t *)test, 102, 100);
 8000742:	1d39      	adds	r1, r7, #4
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	2266      	movs	r2, #102	; 0x66
 8000748:	485e      	ldr	r0, [pc, #376]	; (80008c4 <main+0x314>)
 800074a:	f006 fa79 	bl	8006c40 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2110      	movs	r1, #16
 8000752:	485a      	ldr	r0, [pc, #360]	; (80008bc <main+0x30c>)
 8000754:	f004 f87a 	bl	800484c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH,FRONT_LED_CTRL_Pin,GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075e:	485f      	ldr	r0, [pc, #380]	; (80008dc <main+0x32c>)
 8000760:	f004 f874 	bl	800484c <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 8000764:	f241 3088 	movw	r0, #5000	; 0x1388
 8000768:	f002 fb40 	bl	8002dec <HAL_Delay>


  configureLEDDriver();
 800076c:	f001 f9c6 	bl	8001afc <configureLEDDriver>
    setErrorLED(7,ON);
 8000770:	4b5b      	ldr	r3, [pc, #364]	; (80008e0 <main+0x330>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	2007      	movs	r0, #7
 8000778:	f001 fa46 	bl	8001c08 <setErrorLED>
    HAL_Delay(1000);
 800077c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000780:	f002 fb34 	bl	8002dec <HAL_Delay>
    setErrorLED(7,OFF);
 8000784:	4b57      	ldr	r3, [pc, #348]	; (80008e4 <main+0x334>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	2007      	movs	r0, #7
 800078c:	f001 fa3c 	bl	8001c08 <setErrorLED>
    setErrorLED(8,ON);
 8000790:	4b53      	ldr	r3, [pc, #332]	; (80008e0 <main+0x330>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	2008      	movs	r0, #8
 8000798:	f001 fa36 	bl	8001c08 <setErrorLED>
    HAL_Delay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f002 fb24 	bl	8002dec <HAL_Delay>
    setErrorLED(8,OFF);
 80007a4:	4b4f      	ldr	r3, [pc, #316]	; (80008e4 <main+0x334>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	2008      	movs	r0, #8
 80007ac:	f001 fa2c 	bl	8001c08 <setErrorLED>
    setErrorLED(9,ON);
 80007b0:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <main+0x330>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	2009      	movs	r0, #9
 80007b8:	f001 fa26 	bl	8001c08 <setErrorLED>
    HAL_Delay(1000);
 80007bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c0:	f002 fb14 	bl	8002dec <HAL_Delay>
    setErrorLED(8,ON);
 80007c4:	4b46      	ldr	r3, [pc, #280]	; (80008e0 <main+0x330>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	2008      	movs	r0, #8
 80007cc:	f001 fa1c 	bl	8001c08 <setErrorLED>
    setErrorLED(9,ON);
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <main+0x330>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	2009      	movs	r0, #9
 80007d8:	f001 fa16 	bl	8001c08 <setErrorLED>
    HAL_Delay(1000);
 80007dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e0:	f002 fb04 	bl	8002dec <HAL_Delay>
    setErrorLED(9,OFF);
 80007e4:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <main+0x334>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	2009      	movs	r0, #9
 80007ec:	f001 fa0c 	bl	8001c08 <setErrorLED>
  //  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007f0:	f008 fd3e 	bl	8009270 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 80007f4:	4a3c      	ldr	r2, [pc, #240]	; (80008e8 <main+0x338>)
 80007f6:	2100      	movs	r1, #0
 80007f8:	483c      	ldr	r0, [pc, #240]	; (80008ec <main+0x33c>)
 80007fa:	f008 fda3 	bl	8009344 <osThreadNew>
 80007fe:	4602      	mov	r2, r0
 8000800:	4b3b      	ldr	r3, [pc, #236]	; (80008f0 <main+0x340>)
 8000802:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8000804:	4a3b      	ldr	r2, [pc, #236]	; (80008f4 <main+0x344>)
 8000806:	2100      	movs	r1, #0
 8000808:	483b      	ldr	r0, [pc, #236]	; (80008f8 <main+0x348>)
 800080a:	f008 fd9b 	bl	8009344 <osThreadNew>
 800080e:	4602      	mov	r2, r0
 8000810:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <main+0x34c>)
 8000812:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8000814:	4a3a      	ldr	r2, [pc, #232]	; (8000900 <main+0x350>)
 8000816:	2100      	movs	r1, #0
 8000818:	483a      	ldr	r0, [pc, #232]	; (8000904 <main+0x354>)
 800081a:	f008 fd93 	bl	8009344 <osThreadNew>
 800081e:	4602      	mov	r2, r0
 8000820:	4b39      	ldr	r3, [pc, #228]	; (8000908 <main+0x358>)
 8000822:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000824:	f008 fd58 	bl	80092d8 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8000828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082c:	f002 fade 	bl	8002dec <HAL_Delay>
	  if (!x) {
 8000830:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000834:	2b00      	cmp	r3, #0
 8000836:	d119      	bne.n	800086c <main+0x2bc>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083e:	4833      	ldr	r0, [pc, #204]	; (800090c <main+0x35c>)
 8000840:	f004 f804 	bl	800484c <HAL_GPIO_WritePin>
		  x=1;
 8000844:	2301      	movs	r3, #1
 8000846:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	2110      	movs	r1, #16
 800084e:	481b      	ldr	r0, [pc, #108]	; (80008bc <main+0x30c>)
 8000850:	f003 fffc 	bl	800484c <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
 8000854:	2364      	movs	r3, #100	; 0x64
 8000856:	2201      	movs	r2, #1
 8000858:	492d      	ldr	r1, [pc, #180]	; (8000910 <main+0x360>)
 800085a:	481a      	ldr	r0, [pc, #104]	; (80008c4 <main+0x314>)
 800085c:	f006 f9f0 	bl	8006c40 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2110      	movs	r1, #16
 8000864:	4815      	ldr	r0, [pc, #84]	; (80008bc <main+0x30c>)
 8000866:	f003 fff1 	bl	800484c <HAL_GPIO_WritePin>
 800086a:	e7dd      	b.n	8000828 <main+0x278>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000872:	4826      	ldr	r0, [pc, #152]	; (800090c <main+0x35c>)
 8000874:	f003 ffea 	bl	800484c <HAL_GPIO_WritePin>
		  x=0;
 8000878:	2300      	movs	r3, #0
 800087a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	2110      	movs	r1, #16
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <main+0x30c>)
 8000884:	f003 ffe2 	bl	800484c <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
 8000888:	2364      	movs	r3, #100	; 0x64
 800088a:	2201      	movs	r2, #1
 800088c:	4921      	ldr	r1, [pc, #132]	; (8000914 <main+0x364>)
 800088e:	480d      	ldr	r0, [pc, #52]	; (80008c4 <main+0x314>)
 8000890:	f006 f9d6 	bl	8006c40 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2110      	movs	r1, #16
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <main+0x30c>)
 800089a:	f003 ffd7 	bl	800484c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800089e:	e7c3      	b.n	8000828 <main+0x278>
 80008a0:	20005128 	.word	0x20005128
 80008a4:	200078b8 	.word	0x200078b8
 80008a8:	2000a1d4 	.word	0x2000a1d4
 80008ac:	20004ba0 	.word	0x20004ba0
 80008b0:	20007a40 	.word	0x20007a40
 80008b4:	20007900 	.word	0x20007900
 80008b8:	40022400 	.word	0x40022400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	20000010 	.word	0x20000010
 80008c4:	2000795c 	.word	0x2000795c
 80008c8:	20000012 	.word	0x20000012
 80008cc:	20000014 	.word	0x20000014
 80008d0:	200000b4 	.word	0x200000b4
 80008d4:	20000016 	.word	0x20000016
 80008d8:	20000018 	.word	0x20000018
 80008dc:	40021c00 	.word	0x40021c00
 80008e0:	2000001a 	.word	0x2000001a
 80008e4:	200000b6 	.word	0x200000b6
 80008e8:	0800c654 	.word	0x0800c654
 80008ec:	08001dc9 	.word	0x08001dc9
 80008f0:	2000a1d0 	.word	0x2000a1d0
 80008f4:	0800c678 	.word	0x0800c678
 80008f8:	08001de9 	.word	0x08001de9
 80008fc:	2000c9a8 	.word	0x2000c9a8
 8000900:	0800c69c 	.word	0x0800c69c
 8000904:	08001e69 	.word	0x08001e69
 8000908:	2000c9a4 	.word	0x2000c9a4
 800090c:	40022000 	.word	0x40022000
 8000910:	2000001c 	.word	0x2000001c
 8000914:	2000001e 	.word	0x2000001e

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0b4      	sub	sp, #208	; 0xd0
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000922:	2230      	movs	r2, #48	; 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f00b fa59 	bl	800bdde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	2284      	movs	r2, #132	; 0x84
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f00b fa4a 	bl	800bdde <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800094a:	f004 fded 	bl	8005528 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800094e:	4b43      	ldr	r3, [pc, #268]	; (8000a5c <SystemClock_Config+0x144>)
 8000950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000952:	4a42      	ldr	r2, [pc, #264]	; (8000a5c <SystemClock_Config+0x144>)
 8000954:	f023 0318 	bic.w	r3, r3, #24
 8000958:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b40      	ldr	r3, [pc, #256]	; (8000a5c <SystemClock_Config+0x144>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a3f      	ldr	r2, [pc, #252]	; (8000a5c <SystemClock_Config+0x144>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <SystemClock_Config+0x144>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000972:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <SystemClock_Config+0x148>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800097a:	4a39      	ldr	r2, [pc, #228]	; (8000a60 <SystemClock_Config+0x148>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <SystemClock_Config+0x148>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800098e:	2305      	movs	r3, #5
 8000990:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 80009b0:	230f      	movs	r3, #15
 80009b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 144;
 80009b6:	2390      	movs	r3, #144	; 0x90
 80009b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009c2:	2305      	movs	r3, #5
 80009c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f004 fdbb 	bl	8005548 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009d8:	f001 fa9e 	bl	8001f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	230f      	movs	r3, #15
 80009de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80009f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f005 f844 	bl	8005a90 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000a0e:	f001 fa83 	bl	8001f18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <SystemClock_Config+0x14c>)
 8000a14:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4618      	mov	r0, r3
 8000a44:	f005 fa28 	bl	8005e98 <HAL_RCCEx_PeriphCLKConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000a4e:	f001 fa63 	bl	8001f18 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	37d0      	adds	r7, #208	; 0xd0
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40007000 	.word	0x40007000
 8000a64:	0023d620 	.word	0x0023d620

08000a68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a7a:	4b67      	ldr	r3, [pc, #412]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000a7c:	4a67      	ldr	r2, [pc, #412]	; (8000c1c <MX_ADC1_Init+0x1b4>)
 8000a7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a80:	4b65      	ldr	r3, [pc, #404]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a86:	4b64      	ldr	r3, [pc, #400]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a8c:	4b62      	ldr	r3, [pc, #392]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a92:	4b61      	ldr	r3, [pc, #388]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a98:	4b5f      	ldr	r3, [pc, #380]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa0:	4b5d      	ldr	r3, [pc, #372]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa6:	4b5c      	ldr	r3, [pc, #368]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000aa8:	4a5d      	ldr	r2, [pc, #372]	; (8000c20 <MX_ADC1_Init+0x1b8>)
 8000aaa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aac:	4b5a      	ldr	r3, [pc, #360]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8000ab2:	4b59      	ldr	r3, [pc, #356]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000ab4:	220b      	movs	r2, #11
 8000ab6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ab8:	4b57      	ldr	r3, [pc, #348]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac0:	4b55      	ldr	r3, [pc, #340]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac6:	4854      	ldr	r0, [pc, #336]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000ac8:	f002 f9b2 	bl	8002e30 <HAL_ADC_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f001 fa21 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	484c      	ldr	r0, [pc, #304]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000ae8:	f002 fc7e 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000af2:	f001 fa11 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000af6:	2304      	movs	r3, #4
 8000af8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	4845      	ldr	r0, [pc, #276]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000b04:	f002 fc70 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000b0e:	f001 fa03 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b12:	2305      	movs	r3, #5
 8000b14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b16:	2303      	movs	r3, #3
 8000b18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	483e      	ldr	r0, [pc, #248]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000b20:	f002 fc62 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000b2a:	f001 f9f5 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b2e:	2306      	movs	r3, #6
 8000b30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b32:	2304      	movs	r3, #4
 8000b34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4837      	ldr	r0, [pc, #220]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000b3c:	f002 fc54 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000b46:	f001 f9e7 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b4e:	2305      	movs	r3, #5
 8000b50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	4619      	mov	r1, r3
 8000b56:	4830      	ldr	r0, [pc, #192]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000b58:	f002 fc46 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000b62:	f001 f9d9 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b66:	2308      	movs	r3, #8
 8000b68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	4829      	ldr	r0, [pc, #164]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000b74:	f002 fc38 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000b7e:	f001 f9cb 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b82:	2309      	movs	r3, #9
 8000b84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000b86:	2307      	movs	r3, #7
 8000b88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4822      	ldr	r0, [pc, #136]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000b90:	f002 fc2a 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000b9a:	f001 f9bd 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b9e:	230a      	movs	r3, #10
 8000ba0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481b      	ldr	r0, [pc, #108]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000bac:	f002 fc1c 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000bb6:	f001 f9af 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bba:	230b      	movs	r3, #11
 8000bbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000bbe:	2309      	movs	r3, #9
 8000bc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4814      	ldr	r0, [pc, #80]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000bc8:	f002 fc0e 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000bd2:	f001 f9a1 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bde:	463b      	mov	r3, r7
 8000be0:	4619      	mov	r1, r3
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000be4:	f002 fc00 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000bee:	f001 f993 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bf2:	230d      	movs	r3, #13
 8000bf4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000bf6:	230b      	movs	r3, #11
 8000bf8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <MX_ADC1_Init+0x1b0>)
 8000c00:	f002 fbf2 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 8000c0a:	f001 f985 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200078b8 	.word	0x200078b8
 8000c1c:	40012000 	.word	0x40012000
 8000c20:	0f000001 	.word	0x0f000001

08000c24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000c36:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c38:	4a36      	ldr	r2, [pc, #216]	; (8000d14 <MX_ADC2_Init+0xf0>)
 8000c3a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c3c:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c42:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c48:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000c4e:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c54:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c62:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c64:	4a2c      	ldr	r2, [pc, #176]	; (8000d18 <MX_ADC2_Init+0xf4>)
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c82:	4823      	ldr	r0, [pc, #140]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000c84:	f002 f8d4 	bl	8002e30 <HAL_ADC_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000c8e:	f001 f943 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	481b      	ldr	r0, [pc, #108]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000ca4:	f002 fba0 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000cae:	f001 f933 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4814      	ldr	r0, [pc, #80]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000cc0:	f002 fb92 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000cca:	f001 f925 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000cce:	230e      	movs	r3, #14
 8000cd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000cdc:	f002 fb84 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8000ce6:	f001 f917 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000cea:	230f      	movs	r3, #15
 8000cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <MX_ADC2_Init+0xec>)
 8000cf8:	f002 fb76 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8000d02:	f001 f909 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20004ba0 	.word	0x20004ba0
 8000d14:	40012100 	.word	0x40012100
 8000d18:	0f000001 	.word	0x0f000001

08000d1c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d22:	463b      	mov	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d2e:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d30:	4a44      	ldr	r2, [pc, #272]	; (8000e44 <MX_ADC3_Init+0x128>)
 8000d32:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d34:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d3a:	4b41      	ldr	r3, [pc, #260]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d40:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000d46:	4b3e      	ldr	r3, [pc, #248]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d4c:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d54:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5a:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d5c:	4a3a      	ldr	r2, [pc, #232]	; (8000e48 <MX_ADC3_Init+0x12c>)
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8000d66:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d68:	2206      	movs	r2, #6
 8000d6a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000d6c:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d74:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d7a:	4831      	ldr	r0, [pc, #196]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d7c:	f002 f858 	bl	8002e30 <HAL_ADC_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000d86:	f001 f8c7 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d92:	2307      	movs	r3, #7
 8000d94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4829      	ldr	r0, [pc, #164]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000d9c:	f002 fb24 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000da6:	f001 f8b7 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000daa:	2304      	movs	r3, #4
 8000dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	4619      	mov	r1, r3
 8000db6:	4822      	ldr	r0, [pc, #136]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000db8:	f002 fb16 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 8000dc2:	f001 f8a9 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481b      	ldr	r0, [pc, #108]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000dd4:	f002 fb08 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8000dde:	f001 f89b 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000de2:	2306      	movs	r3, #6
 8000de4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000de6:	2304      	movs	r3, #4
 8000de8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000df0:	f002 fafa 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8000dfa:	f001 f88d 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e02:	2305      	movs	r3, #5
 8000e04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000e0c:	f002 faec 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8000e16:	f001 f87f 	bl	8001f18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_ADC3_Init+0x124>)
 8000e28:	f002 fade 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8000e32:	f001 f871 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20007900 	.word	0x20007900
 8000e44:	40012200 	.word	0x40012200
 8000e48:	0f000001 	.word	0x0f000001

08000e4c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e52:	463b      	mov	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_DAC_Init+0x60>)
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <MX_DAC_Init+0x64>)
 8000e5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e60:	4812      	ldr	r0, [pc, #72]	; (8000eac <MX_DAC_Init+0x60>)
 8000e62:	f002 fe73 	bl	8003b4c <HAL_DAC_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e6c:	f001 f854 	bl	8001f18 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480b      	ldr	r0, [pc, #44]	; (8000eac <MX_DAC_Init+0x60>)
 8000e80:	f002 feda 	bl	8003c38 <HAL_DAC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e8a:	f001 f845 	bl	8001f18 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2210      	movs	r2, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_DAC_Init+0x60>)
 8000e96:	f002 fecf 	bl	8003c38 <HAL_DAC_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000ea0:	f001 f83a 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20007948 	.word	0x20007948
 8000eb0:	40007400 	.word	0x40007400

08000eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000eba:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <MX_I2C1_Init+0x78>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00606092;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <MX_I2C1_Init+0x7c>)
 8000ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ef0:	f003 fce0 	bl	80048b4 <HAL_I2C_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000efa:	f001 f80d 	bl	8001f18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000f02:	f004 f931 	bl	8005168 <HAL_I2CEx_ConfigAnalogFilter>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f0c:	f001 f804 	bl	8001f18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000f14:	f004 f973 	bl	80051fe <HAL_I2CEx_ConfigDigitalFilter>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f1e:	f000 fffb 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20004be8 	.word	0x20004be8
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	00606092 	.word	0x00606092

08000f34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <MX_I2C2_Init+0x78>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00606092;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <MX_I2C2_Init+0x7c>)
 8000f42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f70:	f003 fca0 	bl	80048b4 <HAL_I2C_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f7a:	f000 ffcd 	bl	8001f18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f82:	f004 f8f1 	bl	8005168 <HAL_I2CEx_ConfigAnalogFilter>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f8c:	f000 ffc4 	bl	8001f18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f90:	2100      	movs	r1, #0
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_I2C2_Init+0x74>)
 8000f94:	f004 f933 	bl	80051fe <HAL_I2CEx_ConfigDigitalFilter>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f9e:	f000 ffbb 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20005038 	.word	0x20005038
 8000fac:	40005800 	.word	0x40005800
 8000fb0:	00606092 	.word	0x00606092

08000fb4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_I2C3_Init+0x74>)
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <MX_I2C3_Init+0x78>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00606092;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_I2C3_Init+0x74>)
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <MX_I2C3_Init+0x7c>)
 8000fc2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_I2C3_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_I2C3_Init+0x74>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_I2C3_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_I2C3_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_I2C3_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_I2C3_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_I2C3_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fee:	480e      	ldr	r0, [pc, #56]	; (8001028 <MX_I2C3_Init+0x74>)
 8000ff0:	f003 fc60 	bl	80048b4 <HAL_I2C_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ffa:	f000 ff8d 	bl	8001f18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <MX_I2C3_Init+0x74>)
 8001002:	f004 f8b1 	bl	8005168 <HAL_I2CEx_ConfigAnalogFilter>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800100c:	f000 ff84 	bl	8001f18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001010:	2100      	movs	r1, #0
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_I2C3_Init+0x74>)
 8001014:	f004 f8f3 	bl	80051fe <HAL_I2CEx_ConfigDigitalFilter>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800101e:	f000 ff7b 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200049e4 	.word	0x200049e4
 800102c:	40005c00 	.word	0x40005c00
 8001030:	00606092 	.word	0x00606092

08001034 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_I2C4_Init+0x74>)
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_I2C4_Init+0x78>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00606092;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_I2C4_Init+0x74>)
 8001040:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <MX_I2C4_Init+0x7c>)
 8001042:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_I2C4_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_I2C4_Init+0x74>)
 800104c:	2201      	movs	r2, #1
 800104e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_I2C4_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_I2C4_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_I2C4_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_I2C4_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_I2C4_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800106e:	480e      	ldr	r0, [pc, #56]	; (80010a8 <MX_I2C4_Init+0x74>)
 8001070:	f003 fc20 	bl	80048b4 <HAL_I2C_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800107a:	f000 ff4d 	bl	8001f18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800107e:	2100      	movs	r1, #0
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <MX_I2C4_Init+0x74>)
 8001082:	f004 f871 	bl	8005168 <HAL_I2CEx_ConfigAnalogFilter>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800108c:	f000 ff44 	bl	8001f18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001090:	2100      	movs	r1, #0
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_I2C4_Init+0x74>)
 8001094:	f004 f8b3 	bl	80051fe <HAL_I2CEx_ConfigDigitalFilter>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800109e:	f000 ff3b 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20004a30 	.word	0x20004a30
 80010ac:	40006000 	.word	0x40006000
 80010b0:	00606092 	.word	0x00606092

080010b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_RTC_Init+0xb0>)
 80010d2:	4a25      	ldr	r2, [pc, #148]	; (8001168 <MX_RTC_Init+0xb4>)
 80010d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <MX_RTC_Init+0xb0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_RTC_Init+0xb0>)
 80010de:	227f      	movs	r2, #127	; 0x7f
 80010e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <MX_RTC_Init+0xb0>)
 80010e4:	22ff      	movs	r2, #255	; 0xff
 80010e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_RTC_Init+0xb0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_RTC_Init+0xb0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_RTC_Init+0xb0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010fa:	481a      	ldr	r0, [pc, #104]	; (8001164 <MX_RTC_Init+0xb0>)
 80010fc:	f005 faba 	bl	8006674 <HAL_RTC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001106:	f000 ff07 	bl	8001f18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800110a:	2300      	movs	r3, #0
 800110c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800110e:	2300      	movs	r3, #0
 8001110:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001112:	2300      	movs	r3, #0
 8001114:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	480f      	ldr	r0, [pc, #60]	; (8001164 <MX_RTC_Init+0xb0>)
 8001128:	f005 fb20 	bl	800676c <HAL_RTC_SetTime>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001132:	f000 fef1 	bl	8001f18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001136:	2301      	movs	r3, #1
 8001138:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800113a:	2301      	movs	r3, #1
 800113c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800113e:	2301      	movs	r3, #1
 8001140:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_RTC_Init+0xb0>)
 800114e:	f005 fbcb 	bl	80068e8 <HAL_RTC_SetDate>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001158:	f000 fede 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20007a20 	.word	0x20007a20
 8001168:	40002800 	.word	0x40002800

0800116c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_SPI4_Init+0x74>)
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <MX_SPI4_Init+0x78>)
 8001174:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_SPI4_Init+0x74>)
 8001178:	f44f 7282 	mov.w	r2, #260	; 0x104
 800117c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_SPI4_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_SPI4_Init+0x74>)
 8001186:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800118a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_SPI4_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_SPI4_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_SPI4_Init+0x74>)
 800119a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_SPI4_Init+0x74>)
 80011a2:	2218      	movs	r2, #24
 80011a4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_SPI4_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_SPI4_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_SPI4_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_SPI4_Init+0x74>)
 80011ba:	2207      	movs	r2, #7
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_SPI4_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_SPI4_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_SPI4_Init+0x74>)
 80011cc:	f005 fca6 	bl	8006b1c <HAL_SPI_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 fe9f 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000795c 	.word	0x2000795c
 80011e4:	40013400 	.word	0x40013400

080011e8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_SPI5_Init+0x74>)
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <MX_SPI5_Init+0x78>)
 80011f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_SPI5_Init+0x74>)
 80011f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_SPI5_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_SPI5_Init+0x74>)
 8001202:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001206:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_SPI5_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_SPI5_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_SPI5_Init+0x74>)
 8001216:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800121a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_SPI5_Init+0x74>)
 800121e:	2218      	movs	r2, #24
 8001220:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_SPI5_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_SPI5_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_SPI5_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_SPI5_Init+0x74>)
 8001236:	2207      	movs	r2, #7
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_SPI5_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_SPI5_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_SPI5_Init+0x74>)
 8001248:	f005 fc68 	bl	8006b1c <HAL_SPI_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001252:	f000 fe61 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20004afc 	.word	0x20004afc
 8001260:	40015000 	.word	0x40015000

08001264 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	; 0x38
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	615a      	str	r2, [r3, #20]
 8001294:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_TIM4_Init+0xe8>)
 8001298:	4a2d      	ldr	r2, [pc, #180]	; (8001350 <MX_TIM4_Init+0xec>)
 800129a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <MX_TIM4_Init+0xe8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_TIM4_Init+0xe8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_TIM4_Init+0xe8>)
 80012aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_TIM4_Init+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_TIM4_Init+0xe8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012bc:	4823      	ldr	r0, [pc, #140]	; (800134c <MX_TIM4_Init+0xe8>)
 80012be:	f006 f861 	bl	8007384 <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80012c8:	f000 fe26 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d6:	4619      	mov	r1, r3
 80012d8:	481c      	ldr	r0, [pc, #112]	; (800134c <MX_TIM4_Init+0xe8>)
 80012da:	f006 fb15 	bl	8007908 <HAL_TIM_ConfigClockSource>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80012e4:	f000 fe18 	bl	8001f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <MX_TIM4_Init+0xe8>)
 80012ea:	f006 f8a1 	bl	8007430 <HAL_TIM_PWM_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80012f4:	f000 fe10 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_TIM4_Init+0xe8>)
 8001308:	f006 ff78 	bl	80081fc <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001312:	f000 fe01 	bl	8001f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	2360      	movs	r3, #96	; 0x60
 8001318:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_TIM4_Init+0xe8>)
 800132e:	f006 f9d3 	bl	80076d8 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001338:	f000 fdee 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <MX_TIM4_Init+0xe8>)
 800133e:	f001 fa2f 	bl	80027a0 <HAL_TIM_MspPostInit>

}
 8001342:	bf00      	nop
 8001344:	3738      	adds	r7, #56	; 0x38
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20004b60 	.word	0x20004b60
 8001350:	40000800 	.word	0x40000800

08001354 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <MX_TIM5_Init+0xfc>)
 8001388:	4a32      	ldr	r2, [pc, #200]	; (8001454 <MX_TIM5_Init+0x100>)
 800138a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800138c:	4b30      	ldr	r3, [pc, #192]	; (8001450 <MX_TIM5_Init+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <MX_TIM5_Init+0xfc>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <MX_TIM5_Init+0xfc>)
 800139a:	f04f 32ff 	mov.w	r2, #4294967295
 800139e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <MX_TIM5_Init+0xfc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <MX_TIM5_Init+0xfc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013ac:	4828      	ldr	r0, [pc, #160]	; (8001450 <MX_TIM5_Init+0xfc>)
 80013ae:	f005 ffe9 	bl	8007384 <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80013b8:	f000 fdae 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4821      	ldr	r0, [pc, #132]	; (8001450 <MX_TIM5_Init+0xfc>)
 80013ca:	f006 fa9d 	bl	8007908 <HAL_TIM_ConfigClockSource>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013d4:	f000 fda0 	bl	8001f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013d8:	481d      	ldr	r0, [pc, #116]	; (8001450 <MX_TIM5_Init+0xfc>)
 80013da:	f006 f829 	bl	8007430 <HAL_TIM_PWM_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013e4:	f000 fd98 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4816      	ldr	r0, [pc, #88]	; (8001450 <MX_TIM5_Init+0xfc>)
 80013f8:	f006 ff00 	bl	80081fc <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001402:	f000 fd89 	bl	8001f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001406:	2360      	movs	r3, #96	; 0x60
 8001408:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	2200      	movs	r2, #0
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_TIM5_Init+0xfc>)
 800141e:	f006 f95b 	bl	80076d8 <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001428:	f000 fd76 	bl	8001f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	2204      	movs	r2, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_TIM5_Init+0xfc>)
 8001434:	f006 f950 	bl	80076d8 <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800143e:	f000 fd6b 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <MX_TIM5_Init+0xfc>)
 8001444:	f001 f9ac 	bl	80027a0 <HAL_TIM_MspPostInit>

}
 8001448:	bf00      	nop
 800144a:	3738      	adds	r7, #56	; 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200050e8 	.word	0x200050e8
 8001454:	40000c00 	.word	0x40000c00

08001458 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_UART4_Init+0x58>)
 800145e:	4a15      	ldr	r2, [pc, #84]	; (80014b4 <MX_UART4_Init+0x5c>)
 8001460:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <MX_UART4_Init+0x58>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_UART4_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_UART4_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_UART4_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_UART4_Init+0x58>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_UART4_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_UART4_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_UART4_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_UART4_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_UART4_Init+0x58>)
 800149c:	f006 ff5a 	bl	8008354 <HAL_UART_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80014a6:	f000 fd37 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000a150 	.word	0x2000a150
 80014b4:	40004c00 	.word	0x40004c00

080014b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_UART5_Init+0x58>)
 80014be:	4a15      	ldr	r2, [pc, #84]	; (8001514 <MX_UART5_Init+0x5c>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_UART5_Init+0x58>)
 80014c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_UART5_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_UART5_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_UART5_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_UART5_Init+0x58>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_UART5_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_UART5_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_UART5_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_UART5_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_UART5_Init+0x58>)
 80014fc:	f006 ff2a 	bl	8008354 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001506:	f000 fd07 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20007838 	.word	0x20007838
 8001514:	40005000 	.word	0x40005000

08001518 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_UART7_Init+0x58>)
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <MX_UART7_Init+0x5c>)
 8001520:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_UART7_Init+0x58>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_UART7_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_UART7_Init+0x58>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_UART7_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_UART7_Init+0x58>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_UART7_Init+0x58>)
 8001544:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001548:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_UART7_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_UART7_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_UART7_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_UART7_Init+0x58>)
 800155e:	f006 fef9 	bl	8008354 <HAL_UART_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8001568:	f000 fcd6 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20004a7c 	.word	0x20004a7c
 8001574:	40007800 	.word	0x40007800

08001578 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001582:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001586:	2206      	movs	r2, #6
 8001588:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158c:	2202      	movs	r2, #2
 800158e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001598:	2202      	movs	r2, #2
 800159a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015bc:	f003 fe6b 	bl	8005296 <HAL_PCD_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015c6:	f000 fca7 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20004c34 	.word	0x20004c34

080015d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <MX_DMA_Init+0x80>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <MX_DMA_Init+0x80>)
 80015e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_DMA_Init+0x80>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_DMA_Init+0x80>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a17      	ldr	r2, [pc, #92]	; (8001654 <MX_DMA_Init+0x80>)
 80015f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_DMA_Init+0x80>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2105      	movs	r1, #5
 800160e:	200b      	movs	r0, #11
 8001610:	f002 fa72 	bl	8003af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001614:	200b      	movs	r0, #11
 8001616:	f002 fa8b 	bl	8003b30 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2105      	movs	r1, #5
 800161e:	2038      	movs	r0, #56	; 0x38
 8001620:	f002 fa6a 	bl	8003af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001624:	2038      	movs	r0, #56	; 0x38
 8001626:	f002 fa83 	bl	8003b30 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2105      	movs	r1, #5
 800162e:	2039      	movs	r0, #57	; 0x39
 8001630:	f002 fa62 	bl	8003af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001634:	2039      	movs	r0, #57	; 0x39
 8001636:	f002 fa7b 	bl	8003b30 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2105      	movs	r1, #5
 800163e:	203a      	movs	r0, #58	; 0x3a
 8001640:	f002 fa5a 	bl	8003af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001644:	203a      	movs	r0, #58	; 0x3a
 8001646:	f002 fa73 	bl	8003b30 <HAL_NVIC_EnableIRQ>

}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b090      	sub	sp, #64	; 0x40
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800166e:	4bb1      	ldr	r3, [pc, #708]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4ab0      	ldr	r2, [pc, #704]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4bae      	ldr	r3, [pc, #696]	; (8001934 <MX_GPIO_Init+0x2dc>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
 8001684:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001686:	4bab      	ldr	r3, [pc, #684]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4aaa      	ldr	r2, [pc, #680]	; (8001934 <MX_GPIO_Init+0x2dc>)
 800168c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4ba8      	ldr	r3, [pc, #672]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4ba5      	ldr	r3, [pc, #660]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4aa4      	ldr	r2, [pc, #656]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4ba2      	ldr	r3, [pc, #648]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	623b      	str	r3, [r7, #32]
 80016b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	4b9f      	ldr	r3, [pc, #636]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a9e      	ldr	r2, [pc, #632]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b9c      	ldr	r3, [pc, #624]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b99      	ldr	r3, [pc, #612]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a98      	ldr	r2, [pc, #608]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b96      	ldr	r3, [pc, #600]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016e6:	4b93      	ldr	r3, [pc, #588]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a92      	ldr	r2, [pc, #584]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b90      	ldr	r3, [pc, #576]	; (8001934 <MX_GPIO_Init+0x2dc>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016fe:	4b8d      	ldr	r3, [pc, #564]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a8c      	ldr	r2, [pc, #560]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b8a      	ldr	r3, [pc, #552]	; (8001934 <MX_GPIO_Init+0x2dc>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001716:	4b87      	ldr	r3, [pc, #540]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a86      	ldr	r2, [pc, #536]	; (8001934 <MX_GPIO_Init+0x2dc>)
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b84      	ldr	r3, [pc, #528]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172e:	4b81      	ldr	r3, [pc, #516]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a80      	ldr	r2, [pc, #512]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b7e      	ldr	r3, [pc, #504]	; (8001934 <MX_GPIO_Init+0x2dc>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001746:	4b7b      	ldr	r3, [pc, #492]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a7a      	ldr	r2, [pc, #488]	; (8001934 <MX_GPIO_Init+0x2dc>)
 800174c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b78      	ldr	r3, [pc, #480]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800175e:	4b75      	ldr	r3, [pc, #468]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a74      	ldr	r2, [pc, #464]	; (8001934 <MX_GPIO_Init+0x2dc>)
 8001764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b72      	ldr	r3, [pc, #456]	; (8001934 <MX_GPIO_Init+0x2dc>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2110      	movs	r1, #16
 800177a:	486f      	ldr	r0, [pc, #444]	; (8001938 <MX_GPIO_Init+0x2e0>)
 800177c:	f003 f866 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8001780:	2200      	movs	r2, #0
 8001782:	f244 012f 	movw	r1, #16431	; 0x402f
 8001786:	486d      	ldr	r0, [pc, #436]	; (800193c <MX_GPIO_Init+0x2e4>)
 8001788:	f003 f860 	bl	800484c <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	f241 1150 	movw	r1, #4432	; 0x1150
 8001792:	486b      	ldr	r0, [pc, #428]	; (8001940 <MX_GPIO_Init+0x2e8>)
 8001794:	f003 f85a 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2103      	movs	r1, #3
 800179c:	4869      	ldr	r0, [pc, #420]	; (8001944 <MX_GPIO_Init+0x2ec>)
 800179e:	f003 f855 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 80017a2:	2200      	movs	r2, #0
 80017a4:	f243 013c 	movw	r1, #12348	; 0x303c
 80017a8:	4867      	ldr	r0, [pc, #412]	; (8001948 <MX_GPIO_Init+0x2f0>)
 80017aa:	f003 f84f 	bl	800484c <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f241 0104 	movw	r1, #4100	; 0x1004
 80017b4:	4865      	ldr	r0, [pc, #404]	; (800194c <MX_GPIO_Init+0x2f4>)
 80017b6:	f003 f849 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80017c0:	4863      	ldr	r0, [pc, #396]	; (8001950 <MX_GPIO_Init+0x2f8>)
 80017c2:	f003 f843 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	211b      	movs	r1, #27
 80017ca:	4862      	ldr	r0, [pc, #392]	; (8001954 <MX_GPIO_Init+0x2fc>)
 80017cc:	f003 f83e 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 80017d0:	2310      	movs	r3, #16
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017dc:	2302      	movs	r3, #2
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e4:	4619      	mov	r1, r3
 80017e6:	4854      	ldr	r0, [pc, #336]	; (8001938 <MX_GPIO_Init+0x2e0>)
 80017e8:	f002 fe86 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 80017ec:	2308      	movs	r3, #8
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fc:	4619      	mov	r1, r3
 80017fe:	484e      	ldr	r0, [pc, #312]	; (8001938 <MX_GPIO_Init+0x2e0>)
 8001800:	f002 fe7a 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8001804:	f244 032f 	movw	r3, #16431	; 0x402f
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181a:	4619      	mov	r1, r3
 800181c:	4847      	ldr	r0, [pc, #284]	; (800193c <MX_GPIO_Init+0x2e4>)
 800181e:	f002 fe6b 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001832:	4619      	mov	r1, r3
 8001834:	4846      	ldr	r0, [pc, #280]	; (8001950 <MX_GPIO_Init+0x2f8>)
 8001836:	f002 fe5f 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 800183a:	f241 1350 	movw	r3, #4432	; 0x1150
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800184c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001850:	4619      	mov	r1, r3
 8001852:	483b      	ldr	r0, [pc, #236]	; (8001940 <MX_GPIO_Init+0x2e8>)
 8001854:	f002 fe50 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8001858:	23f0      	movs	r3, #240	; 0xf0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001868:	4619      	mov	r1, r3
 800186a:	4836      	ldr	r0, [pc, #216]	; (8001944 <MX_GPIO_Init+0x2ec>)
 800186c:	f002 fe44 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8001870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001876:	2300      	movs	r3, #0
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001882:	4619      	mov	r1, r3
 8001884:	4834      	ldr	r0, [pc, #208]	; (8001958 <MX_GPIO_Init+0x300>)
 8001886:	f002 fe37 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 800188a:	f64f 7310 	movw	r3, #65296	; 0xff10
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189c:	4619      	mov	r1, r3
 800189e:	482f      	ldr	r0, [pc, #188]	; (800195c <MX_GPIO_Init+0x304>)
 80018a0:	f002 fe2a 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 80018a4:	2303      	movs	r3, #3
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b8:	4619      	mov	r1, r3
 80018ba:	4822      	ldr	r0, [pc, #136]	; (8001944 <MX_GPIO_Init+0x2ec>)
 80018bc:	f002 fe1c 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 80018c0:	f243 033c 	movw	r3, #12348	; 0x303c
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	481b      	ldr	r0, [pc, #108]	; (8001948 <MX_GPIO_Init+0x2f0>)
 80018da:	f002 fe0d 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 80018de:	f241 0304 	movw	r3, #4100	; 0x1004
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f4:	4619      	mov	r1, r3
 80018f6:	4815      	ldr	r0, [pc, #84]	; (800194c <MX_GPIO_Init+0x2f4>)
 80018f8:	f002 fdfe 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 80018fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001912:	4619      	mov	r1, r3
 8001914:	480e      	ldr	r0, [pc, #56]	; (8001950 <MX_GPIO_Init+0x2f8>)
 8001916:	f002 fdef 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 800191a:	231b      	movs	r3, #27
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800192a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192e:	4619      	mov	r1, r3
 8001930:	e016      	b.n	8001960 <MX_GPIO_Init+0x308>
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40021000 	.word	0x40021000
 800193c:	40021800 	.word	0x40021800
 8001940:	40022000 	.word	0x40022000
 8001944:	40022800 	.word	0x40022800
 8001948:	40021400 	.word	0x40021400
 800194c:	40021c00 	.word	0x40021c00
 8001950:	40020400 	.word	0x40020400
 8001954:	40022400 	.word	0x40022400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <MX_GPIO_Init+0x318>)
 8001962:	f002 fdc9 	bl	80044f8 <HAL_GPIO_Init>

}
 8001966:	bf00      	nop
 8001968:	3740      	adds	r7, #64	; 0x40
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40022400 	.word	0x40022400

08001974 <uartTransmitChar>:

/* USER CODE BEGIN 4 */
void uartTransmitChar(char *message, int uart){
 8001974:	b580      	push	{r7, lr}
 8001976:	b0b6      	sub	sp, #216	; 0xd8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4618      	mov	r0, r3
 8001986:	f00a fa33 	bl	800bdf0 <siprintf>
 800198a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	if (uart =7){
 800198e:	2307      	movs	r3, #7
 8001990:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8001992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001996:	b29a      	uxth	r2, r3
 8001998:	f107 010c 	add.w	r1, r7, #12
 800199c:	2364      	movs	r3, #100	; 0x64
 800199e:	4803      	ldr	r0, [pc, #12]	; (80019ac <uartTransmitChar+0x38>)
 80019a0:	f006 fd26 	bl	80083f0 <HAL_UART_Transmit>
	}
}
 80019a4:	bf00      	nop
 80019a6:	37d8      	adds	r7, #216	; 0xd8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20004a7c 	.word	0x20004a7c

080019b0 <uartTransmitInt>:
void uartTransmitInt(uint16_t *number, int uart){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b098      	sub	sp, #96	; 0x60
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4909      	ldr	r1, [pc, #36]	; (80019e8 <uartTransmitInt+0x38>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00a fa14 	bl	800bdf0 <siprintf>
 80019c8:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart =7){
 80019ca:	2307      	movs	r3, #7
 80019cc:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 80019ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	f107 010c 	add.w	r1, r7, #12
 80019d6:	2364      	movs	r3, #100	; 0x64
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <uartTransmitInt+0x3c>)
 80019da:	f006 fd09 	bl	80083f0 <HAL_UART_Transmit>
	}

}
 80019de:	bf00      	nop
 80019e0:	3760      	adds	r7, #96	; 0x60
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	0800c624 	.word	0x0800c624
 80019ec:	20004a7c 	.word	0x20004a7c

080019f0 <readI2CRegister>:

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	60ba      	str	r2, [r7, #8]
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	460b      	mov	r3, r1
 8001a00:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8001a02:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <readI2CRegister+0x80>)
 8001a04:	7bbb      	ldrb	r3, [r7, #14]
 8001a06:	7013      	strb	r3, [r2, #0]
  	if(i2CBank=1){
 8001a08:	2301      	movs	r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	b299      	uxth	r1, r3
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <readI2CRegister+0x80>)
 8001a1a:	4816      	ldr	r0, [pc, #88]	; (8001a74 <readI2CRegister+0x84>)
 8001a1c:	f002 ffda 	bl	80049d4 <HAL_I2C_Master_Transmit>
 8001a20:	4603      	mov	r3, r0
 8001a22:	75fb      	strb	r3, [r7, #23]
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
  	}
  	else if(i2CBank=4){
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
  	}
	  if ( ret != HAL_OK ) {
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <readI2CRegister+0x3e>
	          return 0xfe;
 8001a2a:	23fe      	movs	r3, #254	; 0xfe
 8001a2c:	e01b      	b.n	8001a66 <readI2CRegister+0x76>
	        }
	  else {
		  if(i2CBank=1){
 8001a2e:	2301      	movs	r3, #1
 8001a30:	607b      	str	r3, [r7, #4]
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	b299      	uxth	r1, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	4613      	mov	r3, r2
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <readI2CRegister+0x80>)
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <readI2CRegister+0x84>)
 8001a46:	f003 f8b9 	bl	8004bbc <HAL_I2C_Master_Receive>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
			}
			else if(i2CBank=4){
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
			}
		  if ( ret != HAL_OK ) {
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <readI2CRegister+0x68>
		          return 0xfe;
 8001a54:	23fe      	movs	r3, #254	; 0xfe
 8001a56:	e006      	b.n	8001a66 <readI2CRegister+0x76>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <readI2CRegister+0x80>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2107      	movs	r1, #7
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ffa6 	bl	80019b0 <uartTransmitInt>
			  return buf;
 8001a64:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <readI2CRegister+0x80>)
		  }
}
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200000b8 	.word	0x200000b8
 8001a74:	20004be8 	.word	0x20004be8

08001a78 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	60ba      	str	r2, [r7, #8]
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	460b      	mov	r3, r1
 8001a88:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 8001a8a:	7bbb      	ldrb	r3, [r7, #14]
 8001a8c:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8001a92:	2300      	movs	r3, #0
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a96:	e00d      	b.n	8001ab4 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 8001a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	441a      	add	r2, r3
 8001a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	7812      	ldrb	r2, [r2, #0]
 8001aa4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001aa8:	440b      	add	r3, r1
 8001aaa:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d9ee      	bls.n	8001a98 <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank=1){
 8001aba:	2301      	movs	r3, #1
 8001abc:	63bb      	str	r3, [r7, #56]	; 0x38
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	b299      	uxth	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b298      	uxth	r0, r3
 8001aca:	f107 0214 	add.w	r2, r7, #20
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4808      	ldr	r0, [pc, #32]	; (8001af8 <writeI2CRegister+0x80>)
 8001ad8:	f002 ff7c 	bl	80049d4 <HAL_I2C_Master_Transmit>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
	  	}
	  	else if(i2CBank=4){
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
	  	}
	  	if ( ret != HAL_OK ) {
 8001ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <writeI2CRegister+0x76>
	  	          return 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <writeI2CRegister+0x78>
	  	        }
	  	else {
	  		  return 1;
 8001aee:	2301      	movs	r3, #1
	  }
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3730      	adds	r7, #48	; 0x30
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20004be8 	.word	0x20004be8

08001afc <configureLEDDriver>:
void configureLEDDriver(){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 8001b02:	2301      	movs	r3, #1
 8001b04:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 8001b06:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <configureLEDDriver+0x104>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, currentMultiplier,1,LED.i2cBank);
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <configureLEDDriver+0x108>)
 8001b0e:	7818      	ldrb	r0, [r3, #0]
 8001b10:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <configureLEDDriver+0x108>)
 8001b12:	7999      	ldrb	r1, [r3, #6]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <configureLEDDriver+0x108>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f7ff ffaa 	bl	8001a78 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 8001b24:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <configureLEDDriver+0x108>)
 8001b26:	7818      	ldrb	r0, [r3, #0]
 8001b28:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <configureLEDDriver+0x108>)
 8001b2a:	7999      	ldrb	r1, [r3, #6]
 8001b2c:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <configureLEDDriver+0x108>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f7ff ff5d 	bl	80019f0 <readI2CRegister>
 8001b36:	6038      	str	r0, [r7, #0]
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,LED.mode0_oscon_value,1,LED.i2cBank);
 8001b38:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <configureLEDDriver+0x108>)
 8001b3a:	7818      	ldrb	r0, [r3, #0]
 8001b3c:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <configureLEDDriver+0x108>)
 8001b3e:	7859      	ldrb	r1, [r3, #1]
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <configureLEDDriver+0x108>)
 8001b42:	79db      	ldrb	r3, [r3, #7]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <configureLEDDriver+0x108>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f7ff ff93 	bl	8001a78 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,clear,1,LED.i2cBank);
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <configureLEDDriver+0x108>)
 8001b54:	7818      	ldrb	r0, [r3, #0]
 8001b56:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <configureLEDDriver+0x108>)
 8001b58:	7899      	ldrb	r1, [r3, #2]
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <configureLEDDriver+0x108>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2301      	movs	r3, #1
 8001b62:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <configureLEDDriver+0x104>)
 8001b64:	f7ff ff88 	bl	8001a78 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,clear,1,LED.i2cBank);
 8001b68:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <configureLEDDriver+0x108>)
 8001b6a:	7818      	ldrb	r0, [r3, #0]
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <configureLEDDriver+0x108>)
 8001b6e:	78d9      	ldrb	r1, [r3, #3]
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <configureLEDDriver+0x108>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2301      	movs	r3, #1
 8001b78:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <configureLEDDriver+0x104>)
 8001b7a:	f7ff ff7d 	bl	8001a78 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,clear,1,LED.i2cBank);
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <configureLEDDriver+0x108>)
 8001b80:	7818      	ldrb	r0, [r3, #0]
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <configureLEDDriver+0x108>)
 8001b84:	7919      	ldrb	r1, [r3, #4]
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <configureLEDDriver+0x108>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <configureLEDDriver+0x104>)
 8001b90:	f7ff ff72 	bl	8001a78 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,clear,1,LED.i2cBank);
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <configureLEDDriver+0x108>)
 8001b96:	7818      	ldrb	r0, [r3, #0]
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <configureLEDDriver+0x108>)
 8001b9a:	7959      	ldrb	r1, [r3, #5]
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <configureLEDDriver+0x108>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <configureLEDDriver+0x104>)
 8001ba6:	f7ff ff67 	bl	8001a78 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,LED.pwm,1,LED.i2cBank);
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <configureLEDDriver+0x108>)
 8001bac:	7818      	ldrb	r0, [r3, #0]
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <configureLEDDriver+0x108>)
 8001bb0:	7a19      	ldrb	r1, [r3, #8]
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <configureLEDDriver+0x108>)
 8001bb4:	7adb      	ldrb	r3, [r3, #11]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <configureLEDDriver+0x108>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f7ff ff5a 	bl	8001a78 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,LED.pwm,1,LED.i2cBank);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <configureLEDDriver+0x108>)
 8001bc6:	7818      	ldrb	r0, [r3, #0]
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <configureLEDDriver+0x108>)
 8001bca:	7a59      	ldrb	r1, [r3, #9]
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <configureLEDDriver+0x108>)
 8001bce:	7adb      	ldrb	r3, [r3, #11]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <configureLEDDriver+0x108>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f7ff ff4d 	bl	8001a78 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,LED.pwm,1,LED.i2cBank);
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <configureLEDDriver+0x108>)
 8001be0:	7818      	ldrb	r0, [r3, #0]
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <configureLEDDriver+0x108>)
 8001be4:	7a99      	ldrb	r1, [r3, #10]
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <configureLEDDriver+0x108>)
 8001be8:	7adb      	ldrb	r3, [r3, #11]
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <configureLEDDriver+0x108>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f7ff ff40 	bl	8001a78 <writeI2CRegister>

}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200000cc 	.word	0x200000cc
 8001c04:	20000000 	.word	0x20000000

08001c08 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 8001c14:	2301      	movs	r3, #1
 8001c16:	74fb      	strb	r3, [r7, #19]
	const uint8_t led1 = 0b00000100;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 8001c1c:	2310      	movs	r3, #16
 8001c1e:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 8001c24:	2302      	movs	r3, #2
 8001c26:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 8001c28:	2308      	movs	r3, #8
 8001c2a:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	76bb      	strb	r3, [r7, #26]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	dc05      	bgt.n	8001c46 <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 8001c3a:	4b5d      	ldr	r3, [pc, #372]	; (8001db0 <setErrorLED+0x1a8>)
 8001c3c:	789b      	ldrb	r3, [r3, #2]
 8001c3e:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	e019      	b.n	8001c7a <setErrorLED+0x72>
	}
	else if(led <8){
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b07      	cmp	r3, #7
 8001c4a:	dc06      	bgt.n	8001c5a <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 8001c4c:	4b58      	ldr	r3, [pc, #352]	; (8001db0 <setErrorLED+0x1a8>)
 8001c4e:	78db      	ldrb	r3, [r3, #3]
 8001c50:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3b04      	subs	r3, #4
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	e00f      	b.n	8001c7a <setErrorLED+0x72>
	}
	else if(led <12){
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0b      	cmp	r3, #11
 8001c5e:	dc06      	bgt.n	8001c6e <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <setErrorLED+0x1a8>)
 8001c62:	791b      	ldrb	r3, [r3, #4]
 8001c64:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3b08      	subs	r3, #8
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	e005      	b.n	8001c7a <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 8001c6e:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <setErrorLED+0x1a8>)
 8001c70:	795b      	ldrb	r3, [r3, #5]
 8001c72:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b0c      	subs	r3, #12
 8001c78:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8001c7a:	4b4d      	ldr	r3, [pc, #308]	; (8001db0 <setErrorLED+0x1a8>)
 8001c7c:	7818      	ldrb	r0, [r3, #0]
 8001c7e:	4b4c      	ldr	r3, [pc, #304]	; (8001db0 <setErrorLED+0x1a8>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	7ef9      	ldrb	r1, [r7, #27]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f7ff feb3 	bl	80019f0 <readI2CRegister>
 8001c8a:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d876      	bhi.n	8001d80 <setErrorLED+0x178>
 8001c92:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <setErrorLED+0x90>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001ce1 	.word	0x08001ce1
 8001ca0:	08001d19 	.word	0x08001d19
 8001ca4:	08001d49 	.word	0x08001d49

	case 0:
		if(change){
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <setErrorLED+0xba>
			if(led = 8){
 8001cae:	2308      	movs	r3, #8
 8001cb0:	607b      	str	r3, [r7, #4]
				ledRegisterContents[0] |= led0_pwm;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	7dbb      	ldrb	r3, [r7, #22]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 8001cc0:	e05e      	b.n	8001d80 <setErrorLED+0x178>
			if(led = 8){
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	607b      	str	r3, [r7, #4]
				ledRegisterContents[0] &= ~led0_pwm;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	701a      	strb	r2, [r3, #0]
		break;
 8001cde:	e04f      	b.n	8001d80 <setErrorLED+0x178>

	case 1:
		if(change){
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <setErrorLED+0xf2>
			if(led = 9){
 8001ce6:	2309      	movs	r3, #9
 8001ce8:	607b      	str	r3, [r7, #4]
				ledRegisterContents[0] |= led1_pwm;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	7d7b      	ldrb	r3, [r7, #21]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 8001cf8:	e042      	b.n	8001d80 <setErrorLED+0x178>
			if(led = 9){
 8001cfa:	2309      	movs	r3, #9
 8001cfc:	607b      	str	r3, [r7, #4]
				ledRegisterContents[0] &= ~led1_pwm;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b25a      	sxtb	r2, r3
 8001d04:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	b25b      	sxtb	r3, r3
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	b25b      	sxtb	r3, r3
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	701a      	strb	r2, [r3, #0]
		break;
 8001d16:	e033      	b.n	8001d80 <setErrorLED+0x178>

	case 2:
		if(change){
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <setErrorLED+0x126>
				ledRegisterContents[0] |= led2;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	7e3b      	ldrb	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8001d2c:	e028      	b.n	8001d80 <setErrorLED+0x178>
			ledRegisterContents[0] &= ~led2;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b25a      	sxtb	r2, r3
 8001d34:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	701a      	strb	r2, [r3, #0]
		break;
 8001d46:	e01b      	b.n	8001d80 <setErrorLED+0x178>

	case 3:
		if(change){
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <setErrorLED+0x15a>
			if(led = 7){
 8001d4e:	2307      	movs	r3, #7
 8001d50:	607b      	str	r3, [r7, #4]
				ledRegisterContents[0] |= led3_pwm;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	7ebb      	ldrb	r3, [r7, #26]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 8001d60:	e00d      	b.n	8001d7e <setErrorLED+0x176>
			if(led = 7){
 8001d62:	2307      	movs	r3, #7
 8001d64:	607b      	str	r3, [r7, #4]
				ledRegisterContents[0] &= ~led3_pwm;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b25a      	sxtb	r2, r3
 8001d6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	4013      	ands	r3, r2
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	701a      	strb	r2, [r3, #0]
		break;
 8001d7e:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <setErrorLED+0x1a8>)
 8001d82:	7818      	ldrb	r0, [r3, #0]
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <setErrorLED+0x1a8>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	7ef9      	ldrb	r1, [r7, #27]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	f7ff fe72 	bl	8001a78 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <setErrorLED+0x1a8>)
 8001d96:	7818      	ldrb	r0, [r3, #0]
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <setErrorLED+0x1a8>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	7ef9      	ldrb	r1, [r7, #27]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f7ff fe26 	bl	80019f0 <readI2CRegister>
 8001da4:	60f8      	str	r0, [r7, #12]
}
 8001da6:	bf00      	nop
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000

08001db4 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8001dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <startHeartbeat+0x1c>)
 8001dd6:	f002 fd52 	bl	800487e <HAL_GPIO_TogglePin>
	  osDelay(500);
 8001dda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dde:	f007 fb57 	bl	8009490 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8001de2:	e7f5      	b.n	8001dd0 <startHeartbeat+0x8>
 8001de4:	40022000 	.word	0x40022000

08001de8 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 8001df0:	2203      	movs	r2, #3
 8001df2:	2100      	movs	r1, #0
 8001df4:	4815      	ldr	r0, [pc, #84]	; (8001e4c <startADCRead+0x64>)
 8001df6:	f009 fff2 	bl	800bdde <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 8001dfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4813      	ldr	r0, [pc, #76]	; (8001e50 <startADCRead+0x68>)
 8001e02:	f009 ffec 	bl	800bdde <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 8001e06:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4811      	ldr	r0, [pc, #68]	; (8001e54 <startADCRead+0x6c>)
 8001e0e:	f009 ffe6 	bl	800bdde <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 8001e12:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e16:	2100      	movs	r1, #0
 8001e18:	480f      	ldr	r0, [pc, #60]	; (8001e58 <startADCRead+0x70>)
 8001e1a:	f009 ffe0 	bl	800bdde <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	490b      	ldr	r1, [pc, #44]	; (8001e50 <startADCRead+0x68>)
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <startADCRead+0x74>)
 8001e26:	f001 f989 	bl	800313c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4909      	ldr	r1, [pc, #36]	; (8001e54 <startADCRead+0x6c>)
 8001e30:	480b      	ldr	r0, [pc, #44]	; (8001e60 <startADCRead+0x78>)
 8001e32:	f001 f983 	bl	800313c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4907      	ldr	r1, [pc, #28]	; (8001e58 <startADCRead+0x70>)
 8001e3c:	4809      	ldr	r0, [pc, #36]	; (8001e64 <startADCRead+0x7c>)
 8001e3e:	f001 f97d 	bl	800313c <HAL_ADC_Start_DMA>
    osDelay(5000);
 8001e42:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e46:	f007 fb23 	bl	8009490 <osDelay>
  {
 8001e4a:	e7d1      	b.n	8001df0 <startADCRead+0x8>
 8001e4c:	200050e4 	.word	0x200050e4
 8001e50:	20005128 	.word	0x20005128
 8001e54:	2000a1d4 	.word	0x2000a1d4
 8001e58:	20007a40 	.word	0x20007a40
 8001e5c:	200078b8 	.word	0x200078b8
 8001e60:	20004ba0 	.word	0x20004ba0
 8001e64:	20007900 	.word	0x20007900

08001e68 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
	 static uint16_t LCD_Blink_White = 0b0001100000000000;
	 static uint16_t LCD_Blink_Black = 0b0001000000000000;
	 int x = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	 	  if (!x) {
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d114      	bne.n	8001ea4 <GetDaScreenBlink+0x3c>
	 		  //HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
	 		  x=1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]

	 		  uartTransmitChar("hello\r\n",7);
 8001e7e:	2107      	movs	r1, #7
 8001e80:	4816      	ldr	r0, [pc, #88]	; (8001edc <GetDaScreenBlink+0x74>)
 8001e82:	f7ff fd77 	bl	8001974 <uartTransmitChar>
	 		  HAL_GPIO_TogglePin(LCD_SS_GPIO_Port,LCD_SS_Pin);
 8001e86:	2110      	movs	r1, #16
 8001e88:	4815      	ldr	r0, [pc, #84]	; (8001ee0 <GetDaScreenBlink+0x78>)
 8001e8a:	f002 fcf8 	bl	800487e <HAL_GPIO_TogglePin>
	 		  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
 8001e8e:	2364      	movs	r3, #100	; 0x64
 8001e90:	2201      	movs	r2, #1
 8001e92:	4914      	ldr	r1, [pc, #80]	; (8001ee4 <GetDaScreenBlink+0x7c>)
 8001e94:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <GetDaScreenBlink+0x80>)
 8001e96:	f004 fed3 	bl	8006c40 <HAL_SPI_Transmit>
	 		  HAL_GPIO_TogglePin(LCD_SS_GPIO_Port,LCD_SS_Pin);
 8001e9a:	2110      	movs	r1, #16
 8001e9c:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <GetDaScreenBlink+0x78>)
 8001e9e:	f002 fcee 	bl	800487e <HAL_GPIO_TogglePin>
 8001ea2:	e015      	b.n	8001ed0 <GetDaScreenBlink+0x68>
	 	  }
	 	  else{
	 		  //HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
	 		  x=0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
	 		  uartTransmitChar("here\r\n",7);
 8001ea8:	2107      	movs	r1, #7
 8001eaa:	4810      	ldr	r0, [pc, #64]	; (8001eec <GetDaScreenBlink+0x84>)
 8001eac:	f7ff fd62 	bl	8001974 <uartTransmitChar>
	 		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2110      	movs	r1, #16
 8001eb4:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <GetDaScreenBlink+0x78>)
 8001eb6:	f002 fcc9 	bl	800484c <HAL_GPIO_WritePin>
	 		  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
 8001eba:	2364      	movs	r3, #100	; 0x64
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <GetDaScreenBlink+0x88>)
 8001ec0:	4809      	ldr	r0, [pc, #36]	; (8001ee8 <GetDaScreenBlink+0x80>)
 8001ec2:	f004 febd 	bl	8006c40 <HAL_SPI_Transmit>
	 		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2110      	movs	r1, #16
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <GetDaScreenBlink+0x78>)
 8001ecc:	f002 fcbe 	bl	800484c <HAL_GPIO_WritePin>
	 	  }
	 	  osDelay(400);
 8001ed0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001ed4:	f007 fadc 	bl	8009490 <osDelay>
	 	  if (!x) {
 8001ed8:	e7cc      	b.n	8001e74 <GetDaScreenBlink+0xc>
 8001eda:	bf00      	nop
 8001edc:	0800c62c 	.word	0x0800c62c
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	20000020 	.word	0x20000020
 8001ee8:	2000795c 	.word	0x2000795c
 8001eec:	0800c634 	.word	0x0800c634
 8001ef0:	20000022 	.word	0x20000022

08001ef4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f06:	f000 ff51 	bl	8002dac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40001000 	.word	0x40001000

08001f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <Error_Handler+0x6>

08001f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	210f      	movs	r1, #15
 8001f5a:	f06f 0001 	mvn.w	r0, #1
 8001f5e:	f001 fdcb 	bl	8003af8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b094      	sub	sp, #80	; 0x50
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a91      	ldr	r2, [pc, #580]	; (80021d4 <HAL_ADC_MspInit+0x264>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	f040 808c 	bne.w	80020ac <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f94:	4b90      	ldr	r3, [pc, #576]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	4a8f      	ldr	r2, [pc, #572]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa0:	4b8d      	ldr	r3, [pc, #564]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fac:	4b8a      	ldr	r3, [pc, #552]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	4a89      	ldr	r2, [pc, #548]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb8:	4b87      	ldr	r3, [pc, #540]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	4b84      	ldr	r3, [pc, #528]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	4a83      	ldr	r2, [pc, #524]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd0:	4b81      	ldr	r3, [pc, #516]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	4b7e      	ldr	r3, [pc, #504]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	4a7d      	ldr	r2, [pc, #500]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe8:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8001ff4:	230f      	movs	r3, #15
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002000:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002004:	4619      	mov	r1, r3
 8002006:	4875      	ldr	r0, [pc, #468]	; (80021dc <HAL_ADC_MspInit+0x26c>)
 8002008:	f002 fa76 	bl	80044f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 800200c:	23f8      	movs	r3, #248	; 0xf8
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002010:	2303      	movs	r3, #3
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800201c:	4619      	mov	r1, r3
 800201e:	4870      	ldr	r0, [pc, #448]	; (80021e0 <HAL_ADC_MspInit+0x270>)
 8002020:	f002 fa6a 	bl	80044f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 8002024:	2303      	movs	r3, #3
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002028:	2303      	movs	r3, #3
 800202a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002030:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002034:	4619      	mov	r1, r3
 8002036:	486b      	ldr	r0, [pc, #428]	; (80021e4 <HAL_ADC_MspInit+0x274>)
 8002038:	f002 fa5e 	bl	80044f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800203c:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 800203e:	4a6b      	ldr	r2, [pc, #428]	; (80021ec <HAL_ADC_MspInit+0x27c>)
 8002040:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002042:	4b69      	ldr	r3, [pc, #420]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002048:	4b67      	ldr	r3, [pc, #412]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800204e:	4b66      	ldr	r3, [pc, #408]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002054:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 8002056:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800205a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800205c:	4b62      	ldr	r3, [pc, #392]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 800205e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002062:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002064:	4b60      	ldr	r3, [pc, #384]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 8002066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800206a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800206c:	4b5e      	ldr	r3, [pc, #376]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002072:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002078:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800207e:	485a      	ldr	r0, [pc, #360]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 8002080:	f001 fe32 	bl	8003ce8 <HAL_DMA_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 800208a:	f7ff ff45 	bl	8001f18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a55      	ldr	r2, [pc, #340]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 8002092:	639a      	str	r2, [r3, #56]	; 0x38
 8002094:	4a54      	ldr	r2, [pc, #336]	; (80021e8 <HAL_ADC_MspInit+0x278>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2105      	movs	r1, #5
 800209e:	2012      	movs	r0, #18
 80020a0:	f001 fd2a 	bl	8003af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020a4:	2012      	movs	r0, #18
 80020a6:	f001 fd43 	bl	8003b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020aa:	e13a      	b.n	8002322 <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a4f      	ldr	r2, [pc, #316]	; (80021f0 <HAL_ADC_MspInit+0x280>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	f040 80a2 	bne.w	80021fc <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80020b8:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	4a46      	ldr	r2, [pc, #280]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 80020be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c2:	6453      	str	r3, [r2, #68]	; 0x44
 80020c4:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 80020c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d0:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a40      	ldr	r2, [pc, #256]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b3e      	ldr	r3, [pc, #248]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	4a3a      	ldr	r2, [pc, #232]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6313      	str	r3, [r2, #48]	; 0x30
 80020f4:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	623b      	str	r3, [r7, #32]
 80020fe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a34      	ldr	r2, [pc, #208]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	6313      	str	r3, [r2, #48]	; 0x30
 800210c:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <HAL_ADC_MspInit+0x268>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 8002118:	233f      	movs	r3, #63	; 0x3f
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800211c:	2303      	movs	r3, #3
 800211e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002124:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002128:	4619      	mov	r1, r3
 800212a:	482c      	ldr	r0, [pc, #176]	; (80021dc <HAL_ADC_MspInit+0x26c>)
 800212c:	f002 f9e4 	bl	80044f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 8002130:	237b      	movs	r3, #123	; 0x7b
 8002132:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002134:	2303      	movs	r3, #3
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002140:	4619      	mov	r1, r3
 8002142:	4827      	ldr	r0, [pc, #156]	; (80021e0 <HAL_ADC_MspInit+0x270>)
 8002144:	f002 f9d8 	bl	80044f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8002148:	2302      	movs	r3, #2
 800214a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800214c:	2303      	movs	r3, #3
 800214e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8002154:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002158:	4619      	mov	r1, r3
 800215a:	4822      	ldr	r0, [pc, #136]	; (80021e4 <HAL_ADC_MspInit+0x274>)
 800215c:	f002 f9cc 	bl	80044f8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002160:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 8002162:	4a25      	ldr	r2, [pc, #148]	; (80021f8 <HAL_ADC_MspInit+0x288>)
 8002164:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002166:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 8002168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800216e:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002174:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 800217c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002180:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 8002184:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002188:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 800218c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002190:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 8002194:	2200      	movs	r2, #0
 8002196:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 800219a:	2200      	movs	r2, #0
 800219c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80021a4:	4813      	ldr	r0, [pc, #76]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 80021a6:	f001 fd9f 	bl	8003ce8 <HAL_DMA_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 80021b0:	f7ff feb2 	bl	8001f18 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
 80021ba:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_ADC_MspInit+0x284>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2105      	movs	r1, #5
 80021c4:	2012      	movs	r0, #18
 80021c6:	f001 fc97 	bl	8003af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80021ca:	2012      	movs	r0, #18
 80021cc:	f001 fcb0 	bl	8003b30 <HAL_NVIC_EnableIRQ>
}
 80021d0:	e0a7      	b.n	8002322 <HAL_ADC_MspInit+0x3b2>
 80021d2:	bf00      	nop
 80021d4:	40012000 	.word	0x40012000
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020800 	.word	0x40020800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020400 	.word	0x40020400
 80021e8:	200079c0 	.word	0x200079c0
 80021ec:	40026410 	.word	0x40026410
 80021f0:	40012100 	.word	0x40012100
 80021f4:	2000c8e4 	.word	0x2000c8e4
 80021f8:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a4a      	ldr	r2, [pc, #296]	; (800232c <HAL_ADC_MspInit+0x3bc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	f040 808d 	bne.w	8002322 <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002208:	4b49      	ldr	r3, [pc, #292]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	4a48      	ldr	r2, [pc, #288]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 800220e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002212:	6453      	str	r3, [r2, #68]	; 0x44
 8002214:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002220:	4b43      	ldr	r3, [pc, #268]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4a42      	ldr	r2, [pc, #264]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 8002226:	f043 0320 	orr.w	r3, r3, #32
 800222a:	6313      	str	r3, [r2, #48]	; 0x30
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002238:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6313      	str	r3, [r2, #48]	; 0x30
 8002244:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002250:	4b37      	ldr	r3, [pc, #220]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4a36      	ldr	r2, [pc, #216]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6313      	str	r3, [r2, #48]	; 0x30
 800225c:	4b34      	ldr	r3, [pc, #208]	; (8002330 <HAL_ADC_MspInit+0x3c0>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8002268:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800226e:	2303      	movs	r3, #3
 8002270:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002276:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800227a:	4619      	mov	r1, r3
 800227c:	482d      	ldr	r0, [pc, #180]	; (8002334 <HAL_ADC_MspInit+0x3c4>)
 800227e:	f002 f93b 	bl	80044f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8002282:	230f      	movs	r3, #15
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002286:	2303      	movs	r3, #3
 8002288:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002292:	4619      	mov	r1, r3
 8002294:	4828      	ldr	r0, [pc, #160]	; (8002338 <HAL_ADC_MspInit+0x3c8>)
 8002296:	f002 f92f 	bl	80044f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 800229a:	230c      	movs	r3, #12
 800229c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800229e:	2303      	movs	r3, #3
 80022a0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022aa:	4619      	mov	r1, r3
 80022ac:	4823      	ldr	r0, [pc, #140]	; (800233c <HAL_ADC_MspInit+0x3cc>)
 80022ae:	f002 f923 	bl	80044f8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80022b2:	4b23      	ldr	r3, [pc, #140]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 80022b4:	4a23      	ldr	r2, [pc, #140]	; (8002344 <HAL_ADC_MspInit+0x3d4>)
 80022b6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 80022ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022be:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 80022ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022d2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 80022d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022da:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 80022de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022e2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80022f6:	4812      	ldr	r0, [pc, #72]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 80022f8:	f001 fcf6 	bl	8003ce8 <HAL_DMA_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_ADC_MspInit+0x396>
      Error_Handler();
 8002302:	f7ff fe09 	bl	8001f18 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 800230a:	639a      	str	r2, [r3, #56]	; 0x38
 800230c:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <HAL_ADC_MspInit+0x3d0>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2105      	movs	r1, #5
 8002316:	2012      	movs	r0, #18
 8002318:	f001 fbee 	bl	8003af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800231c:	2012      	movs	r0, #18
 800231e:	f001 fc07 	bl	8003b30 <HAL_NVIC_EnableIRQ>
}
 8002322:	bf00      	nop
 8002324:	3750      	adds	r7, #80	; 0x50
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40012200 	.word	0x40012200
 8002330:	40023800 	.word	0x40023800
 8002334:	40021400 	.word	0x40021400
 8002338:	40020800 	.word	0x40020800
 800233c:	40020000 	.word	0x40020000
 8002340:	20005084 	.word	0x20005084
 8002344:	40026428 	.word	0x40026428

08002348 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_DAC_MspInit+0x84>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d12b      	bne.n	80023c2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_DAC_MspInit+0x88>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <HAL_DAC_MspInit+0x88>)
 8002370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <HAL_DAC_MspInit+0x88>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_DAC_MspInit+0x88>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <HAL_DAC_MspInit+0x88>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <HAL_DAC_MspInit+0x88>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = ADC4_Pin|ADC5_Pin;
 800239a:	2330      	movs	r3, #48	; 0x30
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800239e:	2303      	movs	r3, #3
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	4809      	ldr	r0, [pc, #36]	; (80023d4 <HAL_DAC_MspInit+0x8c>)
 80023ae:	f002 f8a3 	bl	80044f8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2100      	movs	r1, #0
 80023b6:	2036      	movs	r0, #54	; 0x36
 80023b8:	f001 fb9e 	bl	8003af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023bc:	2036      	movs	r0, #54	; 0x36
 80023be:	f001 fbb7 	bl	8003b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80023c2:	bf00      	nop
 80023c4:	3728      	adds	r7, #40	; 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40007400 	.word	0x40007400
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020000 	.word	0x40020000

080023d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b090      	sub	sp, #64	; 0x40
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a6c      	ldr	r2, [pc, #432]	; (80025a8 <HAL_I2C_MspInit+0x1d0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d129      	bne.n	800244e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fa:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a6b      	ldr	r2, [pc, #428]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b69      	ldr	r3, [pc, #420]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 8002412:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002418:	2312      	movs	r3, #18
 800241a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800241c:	2301      	movs	r3, #1
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002424:	2304      	movs	r3, #4
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800242c:	4619      	mov	r1, r3
 800242e:	4860      	ldr	r0, [pc, #384]	; (80025b0 <HAL_I2C_MspInit+0x1d8>)
 8002430:	f002 f862 	bl	80044f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002434:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	4a5c      	ldr	r2, [pc, #368]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 800243a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800243e:	6413      	str	r3, [r2, #64]	; 0x40
 8002440:	4b5a      	ldr	r3, [pc, #360]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800244c:	e0a7      	b.n	800259e <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a58      	ldr	r2, [pc, #352]	; (80025b4 <HAL_I2C_MspInit+0x1dc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d128      	bne.n	80024aa <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002458:	4b54      	ldr	r3, [pc, #336]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4a53      	ldr	r2, [pc, #332]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 800245e:	f043 0320 	orr.w	r3, r3, #32
 8002462:	6313      	str	r3, [r2, #48]	; 0x30
 8002464:	4b51      	ldr	r3, [pc, #324]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 8002470:	2303      	movs	r3, #3
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002474:	2312      	movs	r3, #18
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002478:	2301      	movs	r3, #1
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002480:	2304      	movs	r3, #4
 8002482:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002488:	4619      	mov	r1, r3
 800248a:	484b      	ldr	r0, [pc, #300]	; (80025b8 <HAL_I2C_MspInit+0x1e0>)
 800248c:	f002 f834 	bl	80044f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002490:	4b46      	ldr	r3, [pc, #280]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	4a45      	ldr	r2, [pc, #276]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 8002496:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800249a:	6413      	str	r3, [r2, #64]	; 0x40
 800249c:	4b43      	ldr	r3, [pc, #268]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	69fb      	ldr	r3, [r7, #28]
}
 80024a8:	e079      	b.n	800259e <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a43      	ldr	r2, [pc, #268]	; (80025bc <HAL_I2C_MspInit+0x1e4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d146      	bne.n	8002542 <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b4:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	4a3c      	ldr	r2, [pc, #240]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6313      	str	r3, [r2, #48]	; 0x30
 80024c0:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	4b37      	ldr	r3, [pc, #220]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4a36      	ldr	r2, [pc, #216]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6313      	str	r3, [r2, #48]	; 0x30
 80024d8:	4b34      	ldr	r3, [pc, #208]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 80024e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ea:	2312      	movs	r3, #18
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024f6:	2304      	movs	r3, #4
 80024f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fe:	4619      	mov	r1, r3
 8002500:	482f      	ldr	r0, [pc, #188]	; (80025c0 <HAL_I2C_MspInit+0x1e8>)
 8002502:	f001 fff9 	bl	80044f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 8002506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250c:	2312      	movs	r3, #18
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002510:	2301      	movs	r3, #1
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	2303      	movs	r3, #3
 8002516:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002518:	2304      	movs	r3, #4
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 800251c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002520:	4619      	mov	r1, r3
 8002522:	4828      	ldr	r0, [pc, #160]	; (80025c4 <HAL_I2C_MspInit+0x1ec>)
 8002524:	f001 ffe8 	bl	80044f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 800252e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002532:	6413      	str	r3, [r2, #64]	; 0x40
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	693b      	ldr	r3, [r7, #16]
}
 8002540:	e02d      	b.n	800259e <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <HAL_I2C_MspInit+0x1f0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d128      	bne.n	800259e <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800254c:	4b17      	ldr	r3, [pc, #92]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	4a16      	ldr	r2, [pc, #88]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 8002552:	f043 0320 	orr.w	r3, r3, #32
 8002556:	6313      	str	r3, [r2, #48]	; 0x30
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 8002564:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800256a:	2312      	movs	r3, #18
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800256e:	2301      	movs	r3, #1
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002572:	2303      	movs	r3, #3
 8002574:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002576:	2304      	movs	r3, #4
 8002578:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800257a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257e:	4619      	mov	r1, r3
 8002580:	480d      	ldr	r0, [pc, #52]	; (80025b8 <HAL_I2C_MspInit+0x1e0>)
 8002582:	f001 ffb9 	bl	80044f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 800258c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_I2C_MspInit+0x1d4>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
}
 800259e:	bf00      	nop
 80025a0:	3740      	adds	r7, #64	; 0x40
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40005400 	.word	0x40005400
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40005800 	.word	0x40005800
 80025b8:	40021400 	.word	0x40021400
 80025bc:	40005c00 	.word	0x40005c00
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020000 	.word	0x40020000
 80025c8:	40006000 	.word	0x40006000

080025cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <HAL_RTC_MspInit+0x2c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d105      	bne.n	80025ea <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <HAL_RTC_MspInit+0x30>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a06      	ldr	r2, [pc, #24]	; (80025fc <HAL_RTC_MspInit+0x30>)
 80025e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40002800 	.word	0x40002800
 80025fc:	40023800 	.word	0x40023800

08002600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08c      	sub	sp, #48	; 0x30
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a40      	ldr	r2, [pc, #256]	; (8002720 <HAL_SPI_MspInit+0x120>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d130      	bne.n	8002684 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002622:	4b40      	ldr	r3, [pc, #256]	; (8002724 <HAL_SPI_MspInit+0x124>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a3f      	ldr	r2, [pc, #252]	; (8002724 <HAL_SPI_MspInit+0x124>)
 8002628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_SPI_MspInit+0x124>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800263a:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <HAL_SPI_MspInit+0x124>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a39      	ldr	r2, [pc, #228]	; (8002724 <HAL_SPI_MspInit+0x124>)
 8002640:	f043 0310 	orr.w	r3, r3, #16
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b37      	ldr	r3, [pc, #220]	; (8002724 <HAL_SPI_MspInit+0x124>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8002652:	2364      	movs	r3, #100	; 0x64
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265e:	2303      	movs	r3, #3
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002662:	2305      	movs	r3, #5
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	482e      	ldr	r0, [pc, #184]	; (8002728 <HAL_SPI_MspInit+0x128>)
 800266e:	f001 ff43 	bl	80044f8 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2105      	movs	r1, #5
 8002676:	2054      	movs	r0, #84	; 0x54
 8002678:	f001 fa3e 	bl	8003af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800267c:	2054      	movs	r0, #84	; 0x54
 800267e:	f001 fa57 	bl	8003b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002682:	e049      	b.n	8002718 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a28      	ldr	r2, [pc, #160]	; (800272c <HAL_SPI_MspInit+0x12c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d144      	bne.n	8002718 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800268e:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_SPI_MspInit+0x124>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	4a24      	ldr	r2, [pc, #144]	; (8002724 <HAL_SPI_MspInit+0x124>)
 8002694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002698:	6453      	str	r3, [r2, #68]	; 0x44
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_SPI_MspInit+0x124>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80026a6:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <HAL_SPI_MspInit+0x124>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_SPI_MspInit+0x124>)
 80026ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_SPI_MspInit+0x124>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_SPI_MspInit+0x124>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a18      	ldr	r2, [pc, #96]	; (8002724 <HAL_SPI_MspInit+0x124>)
 80026c4:	f043 0320 	orr.w	r3, r3, #32
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_SPI_MspInit+0x124>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 80026d6:	23e0      	movs	r3, #224	; 0xe0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80026e6:	2305      	movs	r3, #5
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026ea:	f107 031c 	add.w	r3, r7, #28
 80026ee:	4619      	mov	r1, r3
 80026f0:	480f      	ldr	r0, [pc, #60]	; (8002730 <HAL_SPI_MspInit+0x130>)
 80026f2:	f001 ff01 	bl	80044f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 80026f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002704:	2303      	movs	r3, #3
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002708:	2305      	movs	r3, #5
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 800270c:	f107 031c 	add.w	r3, r7, #28
 8002710:	4619      	mov	r1, r3
 8002712:	4808      	ldr	r0, [pc, #32]	; (8002734 <HAL_SPI_MspInit+0x134>)
 8002714:	f001 fef0 	bl	80044f8 <HAL_GPIO_Init>
}
 8002718:	bf00      	nop
 800271a:	3730      	adds	r7, #48	; 0x30
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40013400 	.word	0x40013400
 8002724:	40023800 	.word	0x40023800
 8002728:	40021000 	.word	0x40021000
 800272c:	40015000 	.word	0x40015000
 8002730:	40021c00 	.word	0x40021c00
 8002734:	40021400 	.word	0x40021400

08002738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a13      	ldr	r2, [pc, #76]	; (8002794 <HAL_TIM_Base_MspInit+0x5c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10c      	bne.n	8002764 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <HAL_TIM_Base_MspInit+0x60>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_TIM_Base_MspInit+0x60>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_TIM_Base_MspInit+0x60>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002762:	e010      	b.n	8002786 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0c      	ldr	r2, [pc, #48]	; (800279c <HAL_TIM_Base_MspInit+0x64>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10b      	bne.n	8002786 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_TIM_Base_MspInit+0x60>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <HAL_TIM_Base_MspInit+0x60>)
 8002774:	f043 0308 	orr.w	r3, r3, #8
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <HAL_TIM_Base_MspInit+0x60>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40000800 	.word	0x40000800
 8002798:	40023800 	.word	0x40023800
 800279c:	40000c00 	.word	0x40000c00

080027a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a22      	ldr	r2, [pc, #136]	; (8002848 <HAL_TIM_MspPostInit+0xa8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d11c      	bne.n	80027fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a21      	ldr	r2, [pc, #132]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 80027da:	2340      	movs	r3, #64	; 0x40
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027ea:	2302      	movs	r3, #2
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4619      	mov	r1, r3
 80027f4:	4816      	ldr	r0, [pc, #88]	; (8002850 <HAL_TIM_MspPostInit+0xb0>)
 80027f6:	f001 fe7f 	bl	80044f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80027fa:	e021      	b.n	8002840 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <HAL_TIM_MspPostInit+0xb4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d11c      	bne.n	8002840 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a10      	ldr	r2, [pc, #64]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 800280c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 800281e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002830:	2302      	movs	r3, #2
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4807      	ldr	r0, [pc, #28]	; (8002858 <HAL_TIM_MspPostInit+0xb8>)
 800283c:	f001 fe5c 	bl	80044f8 <HAL_GPIO_Init>
}
 8002840:	bf00      	nop
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40000800 	.word	0x40000800
 800284c:	40023800 	.word	0x40023800
 8002850:	40020400 	.word	0x40020400
 8002854:	40000c00 	.word	0x40000c00
 8002858:	40021c00 	.word	0x40021c00

0800285c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08e      	sub	sp, #56	; 0x38
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a6c      	ldr	r2, [pc, #432]	; (8002a2c <HAL_UART_MspInit+0x1d0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d129      	bne.n	80028d2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800287e:	4b6c      	ldr	r3, [pc, #432]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a6b      	ldr	r2, [pc, #428]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 8002884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b69      	ldr	r3, [pc, #420]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002892:	623b      	str	r3, [r7, #32]
 8002894:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002896:	4b66      	ldr	r3, [pc, #408]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a65      	ldr	r2, [pc, #404]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 80028ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028c0:	2308      	movs	r3, #8
 80028c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c8:	4619      	mov	r1, r3
 80028ca:	485a      	ldr	r0, [pc, #360]	; (8002a34 <HAL_UART_MspInit+0x1d8>)
 80028cc:	f001 fe14 	bl	80044f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80028d0:	e0a7      	b.n	8002a22 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <HAL_UART_MspInit+0x1dc>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d174      	bne.n	80029c6 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 80028dc:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	4a53      	ldr	r2, [pc, #332]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80028e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e6:	6413      	str	r3, [r2, #64]	; 0x40
 80028e8:	4b51      	ldr	r3, [pc, #324]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f4:	4b4e      	ldr	r3, [pc, #312]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a4d      	ldr	r2, [pc, #308]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800290c:	4b48      	ldr	r3, [pc, #288]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	4a47      	ldr	r2, [pc, #284]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 8002912:	f043 0308 	orr.w	r3, r3, #8
 8002916:	6313      	str	r3, [r2, #48]	; 0x30
 8002918:	4b45      	ldr	r3, [pc, #276]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8002924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002936:	2308      	movs	r3, #8
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 800293a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293e:	4619      	mov	r1, r3
 8002940:	483c      	ldr	r0, [pc, #240]	; (8002a34 <HAL_UART_MspInit+0x1d8>)
 8002942:	f001 fdd9 	bl	80044f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8002946:	2304      	movs	r3, #4
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002952:	2303      	movs	r3, #3
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002956:	2308      	movs	r3, #8
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 800295a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295e:	4619      	mov	r1, r3
 8002960:	4836      	ldr	r0, [pc, #216]	; (8002a3c <HAL_UART_MspInit+0x1e0>)
 8002962:	f001 fdc9 	bl	80044f8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 8002968:	4a36      	ldr	r2, [pc, #216]	; (8002a44 <HAL_UART_MspInit+0x1e8>)
 800296a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800296c:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 800296e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002972:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 800297c:	2200      	movs	r2, #0
 800297e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002980:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 8002982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002986:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002988:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800298e:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002994:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 8002996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800299a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800299c:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a2:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80029a8:	4825      	ldr	r0, [pc, #148]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 80029aa:	f001 f99d 	bl	8003ce8 <HAL_DMA_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80029b4:	f7ff fab0 	bl	8001f18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 80029bc:	66da      	str	r2, [r3, #108]	; 0x6c
 80029be:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <HAL_UART_MspInit+0x1e4>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029c4:	e02d      	b.n	8002a22 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <HAL_UART_MspInit+0x1ec>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d128      	bne.n	8002a22 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a16      	ldr	r2, [pc, #88]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80029d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029da:	6413      	str	r3, [r2, #64]	; 0x40
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	4a10      	ldr	r2, [pc, #64]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80029ee:	f043 0310 	orr.w	r3, r3, #16
 80029f2:	6313      	str	r3, [r2, #48]	; 0x30
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_UART_MspInit+0x1d4>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8002a00:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002a12:	2308      	movs	r3, #8
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480b      	ldr	r0, [pc, #44]	; (8002a4c <HAL_UART_MspInit+0x1f0>)
 8002a1e:	f001 fd6b 	bl	80044f8 <HAL_GPIO_Init>
}
 8002a22:	bf00      	nop
 8002a24:	3738      	adds	r7, #56	; 0x38
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40004c00 	.word	0x40004c00
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40005000 	.word	0x40005000
 8002a3c:	40020c00 	.word	0x40020c00
 8002a40:	2000c944 	.word	0x2000c944
 8002a44:	40026010 	.word	0x40026010
 8002a48:	40007800 	.word	0x40007800
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a70:	d134      	bne.n	8002adc <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <HAL_PCD_MspInit+0x94>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_PCD_MspInit+0x94>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_PCD_MspInit+0x94>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8002a8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a9c:	230a      	movs	r3, #10
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4810      	ldr	r0, [pc, #64]	; (8002ae8 <HAL_PCD_MspInit+0x98>)
 8002aa8:	f001 fd26 	bl	80044f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_PCD_MspInit+0x94>)
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	4a0c      	ldr	r2, [pc, #48]	; (8002ae4 <HAL_PCD_MspInit+0x94>)
 8002ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab6:	6353      	str	r3, [r2, #52]	; 0x34
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_PCD_MspInit+0x94>)
 8002aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <HAL_PCD_MspInit+0x94>)
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <HAL_PCD_MspInit+0x94>)
 8002aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ace:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <HAL_PCD_MspInit+0x94>)
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002adc:	bf00      	nop
 8002ade:	3728      	adds	r7, #40	; 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020000 	.word	0x40020000

08002aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	2036      	movs	r0, #54	; 0x36
 8002b02:	f000 fff9 	bl	8003af8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b06:	2036      	movs	r0, #54	; 0x36
 8002b08:	f001 f812 	bl	8003b30 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <HAL_InitTick+0x9c>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <HAL_InitTick+0x9c>)
 8002b12:	f043 0310 	orr.w	r3, r3, #16
 8002b16:	6413      	str	r3, [r2, #64]	; 0x40
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_InitTick+0x9c>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b24:	f107 0210 	add.w	r2, r7, #16
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 f980 	bl	8005e34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b34:	f003 f956 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8002b38:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_InitTick+0xa0>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	0c9b      	lsrs	r3, r3, #18
 8002b44:	3b01      	subs	r3, #1
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_InitTick+0xa4>)
 8002b4a:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <HAL_InitTick+0xa8>)
 8002b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_InitTick+0xa4>)
 8002b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b56:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <HAL_InitTick+0xa4>)
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_InitTick+0xa4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_InitTick+0xa4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b68:	4809      	ldr	r0, [pc, #36]	; (8002b90 <HAL_InitTick+0xa4>)
 8002b6a:	f004 fc0b 	bl	8007384 <HAL_TIM_Base_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d104      	bne.n	8002b7e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b74:	4806      	ldr	r0, [pc, #24]	; (8002b90 <HAL_InitTick+0xa4>)
 8002b76:	f004 fc31 	bl	80073dc <HAL_TIM_Base_Start_IT>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	e000      	b.n	8002b80 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3730      	adds	r7, #48	; 0x30
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	431bde83 	.word	0x431bde83
 8002b90:	2000c9ac 	.word	0x2000c9ac
 8002b94:	40001000 	.word	0x40001000

08002b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <NMI_Handler+0x4>

08002b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba2:	e7fe      	b.n	8002ba2 <HardFault_Handler+0x4>

08002ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <MemManage_Handler+0x4>

08002baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bae:	e7fe      	b.n	8002bae <BusFault_Handler+0x4>

08002bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <UsageFault_Handler+0x4>

08002bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <DMA1_Stream0_IRQHandler+0x10>)
 8002bca:	f001 fa2d 	bl	8004028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000c944 	.word	0x2000c944

08002bd8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002bdc:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <ADC_IRQHandler+0x1c>)
 8002bde:	f000 f96b 	bl	8002eb8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <ADC_IRQHandler+0x20>)
 8002be4:	f000 f968 	bl	8002eb8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8002be8:	4804      	ldr	r0, [pc, #16]	; (8002bfc <ADC_IRQHandler+0x24>)
 8002bea:	f000 f965 	bl	8002eb8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200078b8 	.word	0x200078b8
 8002bf8:	20004ba0 	.word	0x20004ba0
 8002bfc:	20007900 	.word	0x20007900

08002c00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002c04:	4803      	ldr	r0, [pc, #12]	; (8002c14 <TIM6_DAC_IRQHandler+0x14>)
 8002c06:	f000 ffc3 	bl	8003b90 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002c0a:	4803      	ldr	r0, [pc, #12]	; (8002c18 <TIM6_DAC_IRQHandler+0x18>)
 8002c0c:	f004 fc45 	bl	800749a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c10:	bf00      	nop
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20007948 	.word	0x20007948
 8002c18:	2000c9ac 	.word	0x2000c9ac

08002c1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <DMA2_Stream0_IRQHandler+0x1c>)
 8002c22:	f001 fa01 	bl	8004028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 8002c26:	4805      	ldr	r0, [pc, #20]	; (8002c3c <DMA2_Stream0_IRQHandler+0x20>)
 8002c28:	f000 fb76 	bl	8003318 <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <DMA2_Stream0_IRQHandler+0x24>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200079c0 	.word	0x200079c0
 8002c3c:	200078b8 	.word	0x200078b8
 8002c40:	200050e4 	.word	0x200050e4

08002c44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002c48:	4805      	ldr	r0, [pc, #20]	; (8002c60 <DMA2_Stream1_IRQHandler+0x1c>)
 8002c4a:	f001 f9ed 	bl	8004028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 8002c4e:	4805      	ldr	r0, [pc, #20]	; (8002c64 <DMA2_Stream1_IRQHandler+0x20>)
 8002c50:	f000 fb62 	bl	8003318 <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <DMA2_Stream1_IRQHandler+0x24>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20005084 	.word	0x20005084
 8002c64:	20007900 	.word	0x20007900
 8002c68:	200050e4 	.word	0x200050e4

08002c6c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002c70:	4805      	ldr	r0, [pc, #20]	; (8002c88 <DMA2_Stream2_IRQHandler+0x1c>)
 8002c72:	f001 f9d9 	bl	8004028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 8002c76:	4805      	ldr	r0, [pc, #20]	; (8002c8c <DMA2_Stream2_IRQHandler+0x20>)
 8002c78:	f000 fb4e 	bl	8003318 <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <DMA2_Stream2_IRQHandler+0x24>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	2000c8e4 	.word	0x2000c8e4
 8002c8c:	20004ba0 	.word	0x20004ba0
 8002c90:	200050e4 	.word	0x200050e4

08002c94 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <SPI4_IRQHandler+0x10>)
 8002c9a:	f004 f937 	bl	8006f0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000795c 	.word	0x2000795c

08002ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <_sbrk+0x5c>)
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <_sbrk+0x60>)
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <_sbrk+0x64>)
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <_sbrk+0x68>)
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d207      	bcs.n	8002ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cd8:	f009 f84c 	bl	800bd74 <__errno>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	230c      	movs	r3, #12
 8002ce0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	e009      	b.n	8002cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <_sbrk+0x64>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <_sbrk+0x64>)
 8002cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20050000 	.word	0x20050000
 8002d08:	00000400 	.word	0x00000400
 8002d0c:	200000d0 	.word	0x200000d0
 8002d10:	2000ca38 	.word	0x2000ca38

08002d14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <SystemInit+0x28>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <SystemInit+0x28>)
 8002d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <SystemInit+0x28>)
 8002d2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d2e:	609a      	str	r2, [r3, #8]
#endif
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d46:	e003      	b.n	8002d50 <LoopCopyDataInit>

08002d48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d4e:	3104      	adds	r1, #4

08002d50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d50:	480b      	ldr	r0, [pc, #44]	; (8002d80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d58:	d3f6      	bcc.n	8002d48 <CopyDataInit>
  ldr  r2, =_sbss
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d5c:	e002      	b.n	8002d64 <LoopFillZerobss>

08002d5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d60:	f842 3b04 	str.w	r3, [r2], #4

08002d64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d68:	d3f9      	bcc.n	8002d5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d6a:	f7ff ffd3 	bl	8002d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d6e:	f009 f807 	bl	800bd80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d72:	f7fd fc1d 	bl	80005b0 <main>
  bx  lr    
 8002d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d78:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002d7c:	0800c724 	.word	0x0800c724
  ldr  r0, =_sdata
 8002d80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d84:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8002d88:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8002d8c:	2000ca34 	.word	0x2000ca34

08002d90 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d90:	e7fe      	b.n	8002d90 <CAN1_RX0_IRQHandler>

08002d92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d96:	2003      	movs	r0, #3
 8002d98:	f000 fea3 	bl	8003ae2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7ff fea5 	bl	8002aec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002da2:	f7ff f8bd 	bl	8001f20 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_IncTick+0x20>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_IncTick+0x24>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <HAL_IncTick+0x24>)
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	2000002c 	.word	0x2000002c
 8002dd0:	2000c9ec 	.word	0x2000c9ec

08002dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_GetTick+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	2000c9ec 	.word	0x2000c9ec

08002dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7ff ffee 	bl	8002dd4 <HAL_GetTick>
 8002df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d005      	beq.n	8002e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_Delay+0x40>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e12:	bf00      	nop
 8002e14:	f7ff ffde 	bl	8002dd4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d8f7      	bhi.n	8002e14 <HAL_Delay+0x28>
  {
  }
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	2000002c 	.word	0x2000002c

08002e30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e031      	b.n	8002eaa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff f88e 	bl	8001f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d116      	bne.n	8002e9c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <HAL_ADC_Init+0x84>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	f043 0202 	orr.w	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fbfc 	bl	800367c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
 8002e9a:	e001      	b.n	8002ea0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	ffffeefd 	.word	0xffffeefd

08002eb8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d049      	beq.n	8002f8e <HAL_ADC_IRQHandler+0xd6>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d046      	beq.n	8002f8e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d12b      	bne.n	8002f7e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d127      	bne.n	8002f7e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d119      	bne.n	8002f7e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0220 	bic.w	r2, r2, #32
 8002f58:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d105      	bne.n	8002f7e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe ff18 	bl	8001db4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0212 	mvn.w	r2, #18
 8002f8c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b80      	cmp	r3, #128	; 0x80
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d057      	beq.n	8003070 <HAL_ADC_IRQHandler+0x1b8>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d054      	beq.n	8003070 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d105      	bne.n	8002fde <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d139      	bne.n	8003060 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d006      	beq.n	8003008 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003004:	2b00      	cmp	r3, #0
 8003006:	d12b      	bne.n	8003060 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	d124      	bne.n	8003060 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003020:	2b00      	cmp	r3, #0
 8003022:	d11d      	bne.n	8003060 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003028:	2b00      	cmp	r3, #0
 800302a:	d119      	bne.n	8003060 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800303a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fc87 	bl	8003974 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f06f 020c 	mvn.w	r2, #12
 800306e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	bf0c      	ite	eq
 800307e:	2301      	moveq	r3, #1
 8003080:	2300      	movne	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d017      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x21a>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d014      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d10d      	bne.n	80030d2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f97c 	bl	80033c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0201 	mvn.w	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b20      	cmp	r3, #32
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d015      	beq.n	8003132 <HAL_ADC_IRQHandler+0x27a>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d012      	beq.n	8003132 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	f043 0202 	orr.w	r2, r3, #2
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0220 	mvn.w	r2, #32
 8003120:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f956 	bl	80033d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0220 	mvn.w	r2, #32
 8003130:	601a      	str	r2, [r3, #0]
  }
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_ADC_Start_DMA+0x1e>
 8003156:	2302      	movs	r3, #2
 8003158:	e0c7      	b.n	80032ea <HAL_ADC_Start_DMA+0x1ae>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d018      	beq.n	80031a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003180:	4b5c      	ldr	r3, [pc, #368]	; (80032f4 <HAL_ADC_Start_DMA+0x1b8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5c      	ldr	r2, [pc, #368]	; (80032f8 <HAL_ADC_Start_DMA+0x1bc>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0c9a      	lsrs	r2, r3, #18
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003194:	e002      	b.n	800319c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	3b01      	subs	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f9      	bne.n	8003196 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	f040 809b 	bne.w	80032e8 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b6:	4b51      	ldr	r3, [pc, #324]	; (80032fc <HAL_ADC_Start_DMA+0x1c0>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ec:	d106      	bne.n	80031fc <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f023 0206 	bic.w	r2, r3, #6
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
 80031fa:	e002      	b.n	8003202 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	4a3c      	ldr	r2, [pc, #240]	; (8003300 <HAL_ADC_Start_DMA+0x1c4>)
 8003210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	4a3b      	ldr	r2, [pc, #236]	; (8003304 <HAL_ADC_Start_DMA+0x1c8>)
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	4a3a      	ldr	r2, [pc, #232]	; (8003308 <HAL_ADC_Start_DMA+0x1cc>)
 8003220:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800322a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800323a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	334c      	adds	r3, #76	; 0x4c
 8003256:	4619      	mov	r1, r3
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f000 fdf2 	bl	8003e44 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003260:	4b2a      	ldr	r3, [pc, #168]	; (800330c <HAL_ADC_Start_DMA+0x1d0>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10f      	bne.n	800328c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d136      	bne.n	80032e8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	e02d      	b.n	80032e8 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <HAL_ADC_Start_DMA+0x1d4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10e      	bne.n	80032b4 <HAL_ADC_Start_DMA+0x178>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032b2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80032b4:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_ADC_Start_DMA+0x1d0>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d113      	bne.n	80032e8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a13      	ldr	r2, [pc, #76]	; (8003314 <HAL_ADC_Start_DMA+0x1d8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10e      	bne.n	80032e8 <HAL_ADC_Start_DMA+0x1ac>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d107      	bne.n	80032e8 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032e6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000024 	.word	0x20000024
 80032f8:	431bde83 	.word	0x431bde83
 80032fc:	fffff8fe 	.word	0xfffff8fe
 8003300:	08003871 	.word	0x08003871
 8003304:	0800392b 	.word	0x0800392b
 8003308:	08003947 	.word	0x08003947
 800330c:	40012300 	.word	0x40012300
 8003310:	40012000 	.word	0x40012000
 8003314:	40012200 	.word	0x40012200

08003318 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_ADC_Stop_DMA+0x1a>
 800332e:	2302      	movs	r3, #2
 8003330:	e036      	b.n	80033a0 <HAL_ADC_Stop_DMA+0x88>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11e      	bne.n	8003396 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003366:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fdc9 	bl	8003f04 <HAL_DMA_Abort>
 8003372:	4603      	mov	r3, r0
 8003374:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003384:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <HAL_ADC_Stop_DMA+0x90>)
 800338c:	4013      	ands	r3, r2
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800339e:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	ffffeefe 	.word	0xffffeefe

080033ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x1c>
 8003400:	2302      	movs	r3, #2
 8003402:	e12a      	b.n	800365a <HAL_ADC_ConfigChannel+0x272>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b09      	cmp	r3, #9
 8003412:	d93a      	bls.n	800348a <HAL_ADC_ConfigChannel+0xa2>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800341c:	d035      	beq.n	800348a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68d9      	ldr	r1, [r3, #12]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	3b1e      	subs	r3, #30
 8003434:	2207      	movs	r2, #7
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43da      	mvns	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	400a      	ands	r2, r1
 8003442:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a87      	ldr	r2, [pc, #540]	; (8003668 <HAL_ADC_ConfigChannel+0x280>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10a      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68d9      	ldr	r1, [r3, #12]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	061a      	lsls	r2, r3, #24
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003462:	e035      	b.n	80034d0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68d9      	ldr	r1, [r3, #12]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	4618      	mov	r0, r3
 8003476:	4603      	mov	r3, r0
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4403      	add	r3, r0
 800347c:	3b1e      	subs	r3, #30
 800347e:	409a      	lsls	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003488:	e022      	b.n	80034d0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6919      	ldr	r1, [r3, #16]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	b29b      	uxth	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	4613      	mov	r3, r2
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	4413      	add	r3, r2
 800349e:	2207      	movs	r2, #7
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43da      	mvns	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	400a      	ands	r2, r1
 80034ac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6919      	ldr	r1, [r3, #16]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	4618      	mov	r0, r3
 80034c0:	4603      	mov	r3, r0
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4403      	add	r3, r0
 80034c6:	409a      	lsls	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b06      	cmp	r3, #6
 80034d6:	d824      	bhi.n	8003522 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	3b05      	subs	r3, #5
 80034ea:	221f      	movs	r2, #31
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43da      	mvns	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	400a      	ands	r2, r1
 80034f8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	4618      	mov	r0, r3
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	3b05      	subs	r3, #5
 8003514:	fa00 f203 	lsl.w	r2, r0, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	635a      	str	r2, [r3, #52]	; 0x34
 8003520:	e04c      	b.n	80035bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d824      	bhi.n	8003574 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	3b23      	subs	r3, #35	; 0x23
 800353c:	221f      	movs	r2, #31
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	400a      	ands	r2, r1
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	4618      	mov	r0, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	3b23      	subs	r3, #35	; 0x23
 8003566:	fa00 f203 	lsl.w	r2, r0, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
 8003572:	e023      	b.n	80035bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	3b41      	subs	r3, #65	; 0x41
 8003586:	221f      	movs	r2, #31
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43da      	mvns	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	400a      	ands	r2, r1
 8003594:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4618      	mov	r0, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	3b41      	subs	r3, #65	; 0x41
 80035b0:	fa00 f203 	lsl.w	r2, r0, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a2a      	ldr	r2, [pc, #168]	; (800366c <HAL_ADC_ConfigChannel+0x284>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d10a      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x1f4>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ce:	d105      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80035d0:	4b27      	ldr	r3, [pc, #156]	; (8003670 <HAL_ADC_ConfigChannel+0x288>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a26      	ldr	r2, [pc, #152]	; (8003670 <HAL_ADC_ConfigChannel+0x288>)
 80035d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80035da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a22      	ldr	r2, [pc, #136]	; (800366c <HAL_ADC_ConfigChannel+0x284>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d109      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x212>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b12      	cmp	r3, #18
 80035ec:	d105      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_ADC_ConfigChannel+0x288>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <HAL_ADC_ConfigChannel+0x288>)
 80035f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1b      	ldr	r2, [pc, #108]	; (800366c <HAL_ADC_ConfigChannel+0x284>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d125      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x268>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_ADC_ConfigChannel+0x280>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <HAL_ADC_ConfigChannel+0x22e>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b11      	cmp	r3, #17
 8003614:	d11c      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003616:	4b16      	ldr	r3, [pc, #88]	; (8003670 <HAL_ADC_ConfigChannel+0x288>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4a15      	ldr	r2, [pc, #84]	; (8003670 <HAL_ADC_ConfigChannel+0x288>)
 800361c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003620:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a10      	ldr	r2, [pc, #64]	; (8003668 <HAL_ADC_ConfigChannel+0x280>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d111      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_ADC_ConfigChannel+0x28c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a11      	ldr	r2, [pc, #68]	; (8003678 <HAL_ADC_ConfigChannel+0x290>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0c9a      	lsrs	r2, r3, #18
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003642:	e002      	b.n	800364a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3b01      	subs	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f9      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	10000012 	.word	0x10000012
 800366c:	40012000 	.word	0x40012000
 8003670:	40012300 	.word	0x40012300
 8003674:	20000024 	.word	0x20000024
 8003678:	431bde83 	.word	0x431bde83

0800367c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003684:	4b78      	ldr	r3, [pc, #480]	; (8003868 <ADC_Init+0x1ec>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a77      	ldr	r2, [pc, #476]	; (8003868 <ADC_Init+0x1ec>)
 800368a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800368e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003690:	4b75      	ldr	r3, [pc, #468]	; (8003868 <ADC_Init+0x1ec>)
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4973      	ldr	r1, [pc, #460]	; (8003868 <ADC_Init+0x1ec>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	021a      	lsls	r2, r3, #8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6899      	ldr	r1, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	4a58      	ldr	r2, [pc, #352]	; (800386c <ADC_Init+0x1f0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d022      	beq.n	8003756 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800371e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6899      	ldr	r1, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6899      	ldr	r1, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	e00f      	b.n	8003776 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003764:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003774:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0202 	bic.w	r2, r2, #2
 8003784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6899      	ldr	r1, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	005a      	lsls	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01b      	beq.n	80037dc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	3b01      	subs	r3, #1
 80037d0:	035a      	lsls	r2, r3, #13
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	e007      	b.n	80037ec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	3b01      	subs	r3, #1
 8003808:	051a      	lsls	r2, r3, #20
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6899      	ldr	r1, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800382e:	025a      	lsls	r2, r3, #9
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	029a      	lsls	r2, r3, #10
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	609a      	str	r2, [r3, #8]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	40012300 	.word	0x40012300
 800386c:	0f000001 	.word	0x0f000001

08003870 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003886:	2b00      	cmp	r3, #0
 8003888:	d13c      	bne.n	8003904 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d12b      	bne.n	80038fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d127      	bne.n	80038fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d006      	beq.n	80038c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d119      	bne.n	80038fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0220 	bic.w	r2, r2, #32
 80038d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d105      	bne.n	80038fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f043 0201 	orr.w	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7fe fa59 	bl	8001db4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003902:	e00e      	b.n	8003922 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f7ff fd5f 	bl	80033d4 <HAL_ADC_ErrorCallback>
}
 8003916:	e004      	b.n	8003922 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f7ff fd37 	bl	80033ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800393e:	bf00      	nop
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2240      	movs	r2, #64	; 0x40
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff fd34 	bl	80033d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <__NVIC_SetPriorityGrouping+0x40>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039a4:	4013      	ands	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <__NVIC_SetPriorityGrouping+0x44>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b6:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <__NVIC_SetPriorityGrouping+0x40>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	60d3      	str	r3, [r2, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00
 80039cc:	05fa0000 	.word	0x05fa0000

080039d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <__NVIC_GetPriorityGrouping+0x18>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	0a1b      	lsrs	r3, r3, #8
 80039da:	f003 0307 	and.w	r3, r3, #7
}
 80039de:	4618      	mov	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	db0b      	blt.n	8003a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	f003 021f 	and.w	r2, r3, #31
 8003a04:	4907      	ldr	r1, [pc, #28]	; (8003a24 <__NVIC_EnableIRQ+0x38>)
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	e000e100 	.word	0xe000e100

08003a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	6039      	str	r1, [r7, #0]
 8003a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	db0a      	blt.n	8003a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	490c      	ldr	r1, [pc, #48]	; (8003a74 <__NVIC_SetPriority+0x4c>)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	0112      	lsls	r2, r2, #4
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a50:	e00a      	b.n	8003a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	4908      	ldr	r1, [pc, #32]	; (8003a78 <__NVIC_SetPriority+0x50>)
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	3b04      	subs	r3, #4
 8003a60:	0112      	lsls	r2, r2, #4
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	440b      	add	r3, r1
 8003a66:	761a      	strb	r2, [r3, #24]
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000e100 	.word	0xe000e100
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b089      	sub	sp, #36	; 0x24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f1c3 0307 	rsb	r3, r3, #7
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	bf28      	it	cs
 8003a9a:	2304      	movcs	r3, #4
 8003a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d902      	bls.n	8003aac <NVIC_EncodePriority+0x30>
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3b03      	subs	r3, #3
 8003aaa:	e000      	b.n	8003aae <NVIC_EncodePriority+0x32>
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43da      	mvns	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	401a      	ands	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	43d9      	mvns	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad4:	4313      	orrs	r3, r2
         );
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3724      	adds	r7, #36	; 0x24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff ff4c 	bl	8003988 <__NVIC_SetPriorityGrouping>
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b0a:	f7ff ff61 	bl	80039d0 <__NVIC_GetPriorityGrouping>
 8003b0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	6978      	ldr	r0, [r7, #20]
 8003b16:	f7ff ffb1 	bl	8003a7c <NVIC_EncodePriority>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff80 	bl	8003a28 <__NVIC_SetPriority>
}
 8003b28:	bf00      	nop
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff ff54 	bl	80039ec <__NVIC_EnableIRQ>
}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e014      	b.n	8003b88 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	791b      	ldrb	r3, [r3, #4]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d105      	bne.n	8003b74 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fe fbea 	bl	8002348 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba6:	d118      	bne.n	8003bda <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2204      	movs	r2, #4
 8003bac:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f043 0201 	orr.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bd2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f825 	bl	8003c24 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be8:	d118      	bne.n	8003c1c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2204      	movs	r2, #4
 8003bee:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f043 0202 	orr.w	r2, r3, #2
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003c04:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003c14:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f85b 	bl	8003cd2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	795b      	ldrb	r3, [r3, #5]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_DAC_ConfigChannel+0x20>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e036      	b.n	8003cc6 <HAL_DAC_ConfigChannel+0x8e>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2202      	movs	r2, #2
 8003c62:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003c6c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6819      	ldr	r1, [r3, #0]
 8003ca6:	22c0      	movs	r2, #192	; 0xc0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cf4:	f7ff f86e 	bl	8002dd4 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e099      	b.n	8003e38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d24:	e00f      	b.n	8003d46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d26:	f7ff f855 	bl	8002dd4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d908      	bls.n	8003d46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e078      	b.n	8003e38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e8      	bne.n	8003d26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4b38      	ldr	r3, [pc, #224]	; (8003e40 <HAL_DMA_Init+0x158>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d107      	bne.n	8003db0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	4313      	orrs	r3, r2
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f023 0307 	bic.w	r3, r3, #7
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d117      	bne.n	8003e0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fb09 	bl	8004404 <DMA_CheckFifoParam>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2240      	movs	r2, #64	; 0x40
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e06:	2301      	movs	r3, #1
 8003e08:	e016      	b.n	8003e38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fac0 	bl	8004398 <DMA_CalcBaseAndBitshift>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	223f      	movs	r2, #63	; 0x3f
 8003e22:	409a      	lsls	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	f010803f 	.word	0xf010803f

08003e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_DMA_Start_IT+0x26>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e048      	b.n	8003efc <HAL_DMA_Start_IT+0xb8>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d137      	bne.n	8003eee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fa52 	bl	800433c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	223f      	movs	r2, #63	; 0x3f
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0216 	orr.w	r2, r2, #22
 8003eb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ec2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0208 	orr.w	r2, r2, #8
 8003eda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e005      	b.n	8003efa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f12:	f7fe ff5f 	bl	8002dd4 <HAL_GetTick>
 8003f16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d008      	beq.n	8003f36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e052      	b.n	8003fdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0216 	bic.w	r2, r2, #22
 8003f44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <HAL_DMA_Abort+0x62>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0208 	bic.w	r2, r2, #8
 8003f74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f86:	e013      	b.n	8003fb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f88:	f7fe ff24 	bl	8002dd4 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d90c      	bls.n	8003fb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e015      	b.n	8003fdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e4      	bne.n	8003f88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc2:	223f      	movs	r2, #63	; 0x3f
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d004      	beq.n	8004002 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2280      	movs	r2, #128	; 0x80
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e00c      	b.n	800401c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2205      	movs	r2, #5
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004034:	4b92      	ldr	r3, [pc, #584]	; (8004280 <HAL_DMA_IRQHandler+0x258>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a92      	ldr	r2, [pc, #584]	; (8004284 <HAL_DMA_IRQHandler+0x25c>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	0a9b      	lsrs	r3, r3, #10
 8004040:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004046:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	2208      	movs	r2, #8
 8004054:	409a      	lsls	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4013      	ands	r3, r2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01a      	beq.n	8004094 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0204 	bic.w	r2, r2, #4
 800407a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	2208      	movs	r2, #8
 8004082:	409a      	lsls	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	f043 0201 	orr.w	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004098:	2201      	movs	r2, #1
 800409a:	409a      	lsls	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d012      	beq.n	80040ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b6:	2201      	movs	r2, #1
 80040b8:	409a      	lsls	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f043 0202 	orr.w	r2, r3, #2
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ce:	2204      	movs	r2, #4
 80040d0:	409a      	lsls	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d012      	beq.n	8004100 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00b      	beq.n	8004100 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ec:	2204      	movs	r2, #4
 80040ee:	409a      	lsls	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	f043 0204 	orr.w	r2, r3, #4
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	2210      	movs	r2, #16
 8004106:	409a      	lsls	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d043      	beq.n	8004198 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d03c      	beq.n	8004198 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	2210      	movs	r2, #16
 8004124:	409a      	lsls	r2, r3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d018      	beq.n	800416a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d108      	bne.n	8004158 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d024      	beq.n	8004198 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	4798      	blx	r3
 8004156:	e01f      	b.n	8004198 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01b      	beq.n	8004198 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
 8004168:	e016      	b.n	8004198 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d107      	bne.n	8004188 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0208 	bic.w	r2, r2, #8
 8004186:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	2220      	movs	r2, #32
 800419e:	409a      	lsls	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 808e 	beq.w	80042c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8086 	beq.w	80042c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041be:	2220      	movs	r2, #32
 80041c0:	409a      	lsls	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d136      	bne.n	8004240 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0216 	bic.w	r2, r2, #22
 80041e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <HAL_DMA_IRQHandler+0x1da>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0208 	bic.w	r2, r2, #8
 8004210:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004216:	223f      	movs	r2, #63	; 0x3f
 8004218:	409a      	lsls	r2, r3
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004232:	2b00      	cmp	r3, #0
 8004234:	d07d      	beq.n	8004332 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	4798      	blx	r3
        }
        return;
 800423e:	e078      	b.n	8004332 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01c      	beq.n	8004288 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d108      	bne.n	800426e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	2b00      	cmp	r3, #0
 8004262:	d030      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	4798      	blx	r3
 800426c:	e02b      	b.n	80042c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d027      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
 800427e:	e022      	b.n	80042c6 <HAL_DMA_IRQHandler+0x29e>
 8004280:	20000024 	.word	0x20000024
 8004284:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0210 	bic.w	r2, r2, #16
 80042a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d032      	beq.n	8004334 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d022      	beq.n	8004320 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2205      	movs	r2, #5
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	3301      	adds	r3, #1
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d307      	bcc.n	800430e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f2      	bne.n	80042f2 <HAL_DMA_IRQHandler+0x2ca>
 800430c:	e000      	b.n	8004310 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800430e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
 8004330:	e000      	b.n	8004334 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004332:	bf00      	nop
    }
  }
}
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop

0800433c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004358:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d108      	bne.n	800437c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800437a:	e007      	b.n	800438c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]
}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	3b10      	subs	r3, #16
 80043a8:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <DMA_CalcBaseAndBitshift+0x60>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043b2:	4a12      	ldr	r2, [pc, #72]	; (80043fc <DMA_CalcBaseAndBitshift+0x64>)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d908      	bls.n	80043d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <DMA_CalcBaseAndBitshift+0x68>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	1d1a      	adds	r2, r3, #4
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	659a      	str	r2, [r3, #88]	; 0x58
 80043d6:	e006      	b.n	80043e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <DMA_CalcBaseAndBitshift+0x68>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	aaaaaaab 	.word	0xaaaaaaab
 80043fc:	0800c6d8 	.word	0x0800c6d8
 8004400:	fffffc00 	.word	0xfffffc00

08004404 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11f      	bne.n	800445e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d855      	bhi.n	80044d0 <DMA_CheckFifoParam+0xcc>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <DMA_CheckFifoParam+0x28>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	0800443d 	.word	0x0800443d
 8004430:	0800444f 	.word	0x0800444f
 8004434:	0800443d 	.word	0x0800443d
 8004438:	080044d1 	.word	0x080044d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d045      	beq.n	80044d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444c:	e042      	b.n	80044d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004456:	d13f      	bne.n	80044d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800445c:	e03c      	b.n	80044d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004466:	d121      	bne.n	80044ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d836      	bhi.n	80044dc <DMA_CheckFifoParam+0xd8>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <DMA_CheckFifoParam+0x70>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	08004485 	.word	0x08004485
 8004478:	0800448b 	.word	0x0800448b
 800447c:	08004485 	.word	0x08004485
 8004480:	0800449d 	.word	0x0800449d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      break;
 8004488:	e02f      	b.n	80044ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d024      	beq.n	80044e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449a:	e021      	b.n	80044e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044a4:	d11e      	bne.n	80044e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044aa:	e01b      	b.n	80044e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d902      	bls.n	80044b8 <DMA_CheckFifoParam+0xb4>
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d003      	beq.n	80044be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044b6:	e018      	b.n	80044ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      break;
 80044bc:	e015      	b.n	80044ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00e      	beq.n	80044e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
      break;
 80044ce:	e00b      	b.n	80044e8 <DMA_CheckFifoParam+0xe4>
      break;
 80044d0:	bf00      	nop
 80044d2:	e00a      	b.n	80044ea <DMA_CheckFifoParam+0xe6>
      break;
 80044d4:	bf00      	nop
 80044d6:	e008      	b.n	80044ea <DMA_CheckFifoParam+0xe6>
      break;
 80044d8:	bf00      	nop
 80044da:	e006      	b.n	80044ea <DMA_CheckFifoParam+0xe6>
      break;
 80044dc:	bf00      	nop
 80044de:	e004      	b.n	80044ea <DMA_CheckFifoParam+0xe6>
      break;
 80044e0:	bf00      	nop
 80044e2:	e002      	b.n	80044ea <DMA_CheckFifoParam+0xe6>
      break;   
 80044e4:	bf00      	nop
 80044e6:	e000      	b.n	80044ea <DMA_CheckFifoParam+0xe6>
      break;
 80044e8:	bf00      	nop
    }
  } 
  
  return status; 
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b089      	sub	sp, #36	; 0x24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004512:	2300      	movs	r3, #0
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	e175      	b.n	8004804 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004518:	2201      	movs	r2, #1
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4013      	ands	r3, r2
 800452a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	429a      	cmp	r2, r3
 8004532:	f040 8164 	bne.w	80047fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d00b      	beq.n	8004556 <HAL_GPIO_Init+0x5e>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d007      	beq.n	8004556 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800454a:	2b11      	cmp	r3, #17
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b12      	cmp	r3, #18
 8004554:	d130      	bne.n	80045b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	2203      	movs	r2, #3
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800458c:	2201      	movs	r2, #1
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 0201 	and.w	r2, r3, #1
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	2203      	movs	r2, #3
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_Init+0x100>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b12      	cmp	r3, #18
 80045f6:	d123      	bne.n	8004640 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	08da      	lsrs	r2, r3, #3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3208      	adds	r2, #8
 8004600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	220f      	movs	r2, #15
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	08da      	lsrs	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3208      	adds	r2, #8
 800463a:	69b9      	ldr	r1, [r7, #24]
 800463c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	2203      	movs	r2, #3
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 0203 	and.w	r2, r3, #3
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80be 	beq.w	80047fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004682:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_GPIO_Init+0x320>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	4a64      	ldr	r2, [pc, #400]	; (8004818 <HAL_GPIO_Init+0x320>)
 8004688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800468c:	6453      	str	r3, [r2, #68]	; 0x44
 800468e:	4b62      	ldr	r3, [pc, #392]	; (8004818 <HAL_GPIO_Init+0x320>)
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800469a:	4a60      	ldr	r2, [pc, #384]	; (800481c <HAL_GPIO_Init+0x324>)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	3302      	adds	r3, #2
 80046a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	220f      	movs	r2, #15
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4013      	ands	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a57      	ldr	r2, [pc, #348]	; (8004820 <HAL_GPIO_Init+0x328>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d037      	beq.n	8004736 <HAL_GPIO_Init+0x23e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a56      	ldr	r2, [pc, #344]	; (8004824 <HAL_GPIO_Init+0x32c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d031      	beq.n	8004732 <HAL_GPIO_Init+0x23a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a55      	ldr	r2, [pc, #340]	; (8004828 <HAL_GPIO_Init+0x330>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d02b      	beq.n	800472e <HAL_GPIO_Init+0x236>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a54      	ldr	r2, [pc, #336]	; (800482c <HAL_GPIO_Init+0x334>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d025      	beq.n	800472a <HAL_GPIO_Init+0x232>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a53      	ldr	r2, [pc, #332]	; (8004830 <HAL_GPIO_Init+0x338>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01f      	beq.n	8004726 <HAL_GPIO_Init+0x22e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a52      	ldr	r2, [pc, #328]	; (8004834 <HAL_GPIO_Init+0x33c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d019      	beq.n	8004722 <HAL_GPIO_Init+0x22a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a51      	ldr	r2, [pc, #324]	; (8004838 <HAL_GPIO_Init+0x340>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_GPIO_Init+0x226>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a50      	ldr	r2, [pc, #320]	; (800483c <HAL_GPIO_Init+0x344>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00d      	beq.n	800471a <HAL_GPIO_Init+0x222>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a4f      	ldr	r2, [pc, #316]	; (8004840 <HAL_GPIO_Init+0x348>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <HAL_GPIO_Init+0x21e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4e      	ldr	r2, [pc, #312]	; (8004844 <HAL_GPIO_Init+0x34c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <HAL_GPIO_Init+0x21a>
 800470e:	2309      	movs	r3, #9
 8004710:	e012      	b.n	8004738 <HAL_GPIO_Init+0x240>
 8004712:	230a      	movs	r3, #10
 8004714:	e010      	b.n	8004738 <HAL_GPIO_Init+0x240>
 8004716:	2308      	movs	r3, #8
 8004718:	e00e      	b.n	8004738 <HAL_GPIO_Init+0x240>
 800471a:	2307      	movs	r3, #7
 800471c:	e00c      	b.n	8004738 <HAL_GPIO_Init+0x240>
 800471e:	2306      	movs	r3, #6
 8004720:	e00a      	b.n	8004738 <HAL_GPIO_Init+0x240>
 8004722:	2305      	movs	r3, #5
 8004724:	e008      	b.n	8004738 <HAL_GPIO_Init+0x240>
 8004726:	2304      	movs	r3, #4
 8004728:	e006      	b.n	8004738 <HAL_GPIO_Init+0x240>
 800472a:	2303      	movs	r3, #3
 800472c:	e004      	b.n	8004738 <HAL_GPIO_Init+0x240>
 800472e:	2302      	movs	r3, #2
 8004730:	e002      	b.n	8004738 <HAL_GPIO_Init+0x240>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_GPIO_Init+0x240>
 8004736:	2300      	movs	r3, #0
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	f002 0203 	and.w	r2, r2, #3
 800473e:	0092      	lsls	r2, r2, #2
 8004740:	4093      	lsls	r3, r2
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004748:	4934      	ldr	r1, [pc, #208]	; (800481c <HAL_GPIO_Init+0x324>)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	089b      	lsrs	r3, r3, #2
 800474e:	3302      	adds	r3, #2
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004756:	4b3c      	ldr	r3, [pc, #240]	; (8004848 <HAL_GPIO_Init+0x350>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	43db      	mvns	r3, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4013      	ands	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800477a:	4a33      	ldr	r2, [pc, #204]	; (8004848 <HAL_GPIO_Init+0x350>)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004780:	4b31      	ldr	r3, [pc, #196]	; (8004848 <HAL_GPIO_Init+0x350>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047a4:	4a28      	ldr	r2, [pc, #160]	; (8004848 <HAL_GPIO_Init+0x350>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047aa:	4b27      	ldr	r3, [pc, #156]	; (8004848 <HAL_GPIO_Init+0x350>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	43db      	mvns	r3, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4013      	ands	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047ce:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <HAL_GPIO_Init+0x350>)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047d4:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <HAL_GPIO_Init+0x350>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	43db      	mvns	r3, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4013      	ands	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047f8:	4a13      	ldr	r2, [pc, #76]	; (8004848 <HAL_GPIO_Init+0x350>)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3301      	adds	r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	2b0f      	cmp	r3, #15
 8004808:	f67f ae86 	bls.w	8004518 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800480c:	bf00      	nop
 800480e:	3724      	adds	r7, #36	; 0x24
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	40023800 	.word	0x40023800
 800481c:	40013800 	.word	0x40013800
 8004820:	40020000 	.word	0x40020000
 8004824:	40020400 	.word	0x40020400
 8004828:	40020800 	.word	0x40020800
 800482c:	40020c00 	.word	0x40020c00
 8004830:	40021000 	.word	0x40021000
 8004834:	40021400 	.word	0x40021400
 8004838:	40021800 	.word	0x40021800
 800483c:	40021c00 	.word	0x40021c00
 8004840:	40022000 	.word	0x40022000
 8004844:	40022400 	.word	0x40022400
 8004848:	40013c00 	.word	0x40013c00

0800484c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
 8004858:	4613      	mov	r3, r2
 800485a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800485c:	787b      	ldrb	r3, [r7, #1]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004862:	887a      	ldrh	r2, [r7, #2]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004868:	e003      	b.n	8004872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	041a      	lsls	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	619a      	str	r2, [r3, #24]
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	460b      	mov	r3, r1
 8004888:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695a      	ldr	r2, [r3, #20]
 800488e:	887b      	ldrh	r3, [r7, #2]
 8004890:	4013      	ands	r3, r2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004896:	887b      	ldrh	r3, [r7, #2]
 8004898:	041a      	lsls	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800489e:	e002      	b.n	80048a6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048a0:	887a      	ldrh	r2, [r7, #2]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	619a      	str	r2, [r3, #24]
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e07f      	b.n	80049c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd fd7c 	bl	80023d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2224      	movs	r2, #36	; 0x24
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004904:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004914:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d107      	bne.n	800492e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	e006      	b.n	800493c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800493a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d104      	bne.n	800494e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800494c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <HAL_I2C_Init+0x11c>)
 800495a:	430b      	orrs	r3, r1
 800495c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800496c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	ea42 0103 	orr.w	r1, r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	021a      	lsls	r2, r3, #8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69d9      	ldr	r1, [r3, #28]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	02008000 	.word	0x02008000

080049d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	461a      	mov	r2, r3
 80049e0:	460b      	mov	r3, r1
 80049e2:	817b      	strh	r3, [r7, #10]
 80049e4:	4613      	mov	r3, r2
 80049e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	f040 80da 	bne.w	8004baa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_I2C_Master_Transmit+0x30>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e0d3      	b.n	8004bac <HAL_I2C_Master_Transmit+0x1d8>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a0c:	f7fe f9e2 	bl	8002dd4 <HAL_GetTick>
 8004a10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	2319      	movs	r3, #25
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f9e6 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e0be      	b.n	8004bac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2221      	movs	r2, #33	; 0x21
 8004a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	893a      	ldrh	r2, [r7, #8]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2bff      	cmp	r3, #255	; 0xff
 8004a5e:	d90e      	bls.n	8004a7e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	22ff      	movs	r2, #255	; 0xff
 8004a64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	8979      	ldrh	r1, [r7, #10]
 8004a6e:	4b51      	ldr	r3, [pc, #324]	; (8004bb4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fb48 	bl	800510c <I2C_TransferConfig>
 8004a7c:	e06c      	b.n	8004b58 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	8979      	ldrh	r1, [r7, #10]
 8004a90:	4b48      	ldr	r3, [pc, #288]	; (8004bb4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fb37 	bl	800510c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004a9e:	e05b      	b.n	8004b58 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	6a39      	ldr	r1, [r7, #32]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f9e3 	bl	8004e70 <I2C_WaitOnTXISFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e07b      	b.n	8004bac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d034      	beq.n	8004b58 <HAL_I2C_Master_Transmit+0x184>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d130      	bne.n	8004b58 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	2200      	movs	r2, #0
 8004afe:	2180      	movs	r1, #128	; 0x80
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f975 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e04d      	b.n	8004bac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2bff      	cmp	r3, #255	; 0xff
 8004b18:	d90e      	bls.n	8004b38 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	22ff      	movs	r2, #255	; 0xff
 8004b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	8979      	ldrh	r1, [r7, #10]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 faeb 	bl	800510c <I2C_TransferConfig>
 8004b36:	e00f      	b.n	8004b58 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	8979      	ldrh	r1, [r7, #10]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fada 	bl	800510c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d19e      	bne.n	8004aa0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	6a39      	ldr	r1, [r7, #32]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f9c2 	bl	8004ef0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e01a      	b.n	8004bac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <HAL_I2C_Master_Transmit+0x1e4>)
 8004b8a:	400b      	ands	r3, r1
 8004b8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e000      	b.n	8004bac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004baa:	2302      	movs	r3, #2
  }
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	80002000 	.word	0x80002000
 8004bb8:	fe00e800 	.word	0xfe00e800

08004bbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	460b      	mov	r3, r1
 8004bca:	817b      	strh	r3, [r7, #10]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	f040 80db 	bne.w	8004d94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_I2C_Master_Receive+0x30>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e0d4      	b.n	8004d96 <HAL_I2C_Master_Receive+0x1da>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bf4:	f7fe f8ee 	bl	8002dd4 <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	2319      	movs	r3, #25
 8004c00:	2201      	movs	r2, #1
 8004c02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f8f2 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0bf      	b.n	8004d96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2222      	movs	r2, #34	; 0x22
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2210      	movs	r2, #16
 8004c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	893a      	ldrh	r2, [r7, #8]
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2bff      	cmp	r3, #255	; 0xff
 8004c46:	d90e      	bls.n	8004c66 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	22ff      	movs	r2, #255	; 0xff
 8004c4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	8979      	ldrh	r1, [r7, #10]
 8004c56:	4b52      	ldr	r3, [pc, #328]	; (8004da0 <HAL_I2C_Master_Receive+0x1e4>)
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa54 	bl	800510c <I2C_TransferConfig>
 8004c64:	e06d      	b.n	8004d42 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	8979      	ldrh	r1, [r7, #10]
 8004c78:	4b49      	ldr	r3, [pc, #292]	; (8004da0 <HAL_I2C_Master_Receive+0x1e4>)
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fa43 	bl	800510c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004c86:	e05c      	b.n	8004d42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	6a39      	ldr	r1, [r7, #32]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f96b 	bl	8004f68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e07c      	b.n	8004d96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d034      	beq.n	8004d42 <HAL_I2C_Master_Receive+0x186>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d130      	bne.n	8004d42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2180      	movs	r1, #128	; 0x80
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 f880 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e04d      	b.n	8004d96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2bff      	cmp	r3, #255	; 0xff
 8004d02:	d90e      	bls.n	8004d22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	22ff      	movs	r2, #255	; 0xff
 8004d08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	8979      	ldrh	r1, [r7, #10]
 8004d12:	2300      	movs	r3, #0
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f9f6 	bl	800510c <I2C_TransferConfig>
 8004d20:	e00f      	b.n	8004d42 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	8979      	ldrh	r1, [r7, #10]
 8004d34:	2300      	movs	r3, #0
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f9e5 	bl	800510c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d19d      	bne.n	8004c88 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	6a39      	ldr	r1, [r7, #32]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f8cd 	bl	8004ef0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e01a      	b.n	8004d96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2220      	movs	r2, #32
 8004d66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <HAL_I2C_Master_Receive+0x1e8>)
 8004d74:	400b      	ands	r3, r1
 8004d76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e000      	b.n	8004d96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	80002400 	.word	0x80002400
 8004da4:	fe00e800 	.word	0xfe00e800

08004da8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d103      	bne.n	8004dc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d007      	beq.n	8004de4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	619a      	str	r2, [r3, #24]
  }
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e00:	e022      	b.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d01e      	beq.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0a:	f7fd ffe3 	bl	8002dd4 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d302      	bcc.n	8004e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d113      	bne.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e00f      	b.n	8004e68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4013      	ands	r3, r2
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	bf0c      	ite	eq
 8004e58:	2301      	moveq	r3, #1
 8004e5a:	2300      	movne	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d0cd      	beq.n	8004e02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e7c:	e02c      	b.n	8004ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f8dc 	bl	8005040 <I2C_IsAcknowledgeFailed>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e02a      	b.n	8004ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d01e      	beq.n	8004ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fd ff9b 	bl	8002dd4 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d113      	bne.n	8004ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb4:	f043 0220 	orr.w	r2, r3, #32
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e007      	b.n	8004ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d1cb      	bne.n	8004e7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004efc:	e028      	b.n	8004f50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f89c 	bl	8005040 <I2C_IsAcknowledgeFailed>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e026      	b.n	8004f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f12:	f7fd ff5f 	bl	8002dd4 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d113      	bne.n	8004f50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e007      	b.n	8004f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d1cf      	bne.n	8004efe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f74:	e055      	b.n	8005022 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 f860 	bl	8005040 <I2C_IsAcknowledgeFailed>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e053      	b.n	8005032 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d129      	bne.n	8004fec <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d105      	bne.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e03f      	b.n	8005032 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6859      	ldr	r1, [r3, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	; (800503c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004fc6:	400b      	ands	r3, r1
 8004fc8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e022      	b.n	8005032 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fec:	f7fd fef2 	bl	8002dd4 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d302      	bcc.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10f      	bne.n	8005022 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f043 0220 	orr.w	r2, r3, #32
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e007      	b.n	8005032 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b04      	cmp	r3, #4
 800502e:	d1a2      	bne.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	fe00e800 	.word	0xfe00e800

08005040 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b10      	cmp	r3, #16
 8005058:	d151      	bne.n	80050fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800505a:	e022      	b.n	80050a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d01e      	beq.n	80050a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005064:	f7fd feb6 	bl	8002dd4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	429a      	cmp	r2, r3
 8005072:	d302      	bcc.n	800507a <I2C_IsAcknowledgeFailed+0x3a>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d113      	bne.n	80050a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	f043 0220 	orr.w	r2, r3, #32
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e02e      	b.n	8005100 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d1d5      	bne.n	800505c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2210      	movs	r2, #16
 80050b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2220      	movs	r2, #32
 80050be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff fe71 	bl	8004da8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6859      	ldr	r1, [r3, #4]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <I2C_IsAcknowledgeFailed+0xc8>)
 80050d2:	400b      	ands	r3, r1
 80050d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	f043 0204 	orr.w	r2, r3, #4
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	fe00e800 	.word	0xfe00e800

0800510c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	460b      	mov	r3, r1
 8005118:	817b      	strh	r3, [r7, #10]
 800511a:	4613      	mov	r3, r2
 800511c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	0d5b      	lsrs	r3, r3, #21
 8005128:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800512c:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <I2C_TransferConfig+0x58>)
 800512e:	430b      	orrs	r3, r1
 8005130:	43db      	mvns	r3, r3
 8005132:	ea02 0103 	and.w	r1, r2, r3
 8005136:	897b      	ldrh	r3, [r7, #10]
 8005138:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800513c:	7a7b      	ldrb	r3, [r7, #9]
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	431a      	orrs	r2, r3
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	431a      	orrs	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	03ff63ff 	.word	0x03ff63ff

08005168 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b20      	cmp	r3, #32
 800517c:	d138      	bne.n	80051f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005188:	2302      	movs	r3, #2
 800518a:	e032      	b.n	80051f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2224      	movs	r2, #36	; 0x24
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0201 	bic.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6819      	ldr	r1, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e000      	b.n	80051f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051f0:	2302      	movs	r3, #2
  }
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b20      	cmp	r3, #32
 8005212:	d139      	bne.n	8005288 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800521e:	2302      	movs	r3, #2
 8005220:	e033      	b.n	800528a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2224      	movs	r2, #36	; 0x24
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005250:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	e000      	b.n	800528a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005288:	2302      	movs	r3, #2
  }
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005298:	b08f      	sub	sp, #60	; 0x3c
 800529a:	af0a      	add	r7, sp, #40	; 0x28
 800529c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e116      	b.n	80054d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fd fbc4 	bl	8002a50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2203      	movs	r2, #3
 80052cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f003 fd62 	bl	8008db0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	687e      	ldr	r6, [r7, #4]
 80052f4:	466d      	mov	r5, sp
 80052f6:	f106 0410 	add.w	r4, r6, #16
 80052fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005302:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005306:	e885 0003 	stmia.w	r5, {r0, r1}
 800530a:	1d33      	adds	r3, r6, #4
 800530c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800530e:	6838      	ldr	r0, [r7, #0]
 8005310:	f003 fcf6 	bl	8008d00 <USB_CoreInit>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e0d7      	b.n	80054d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f003 fd50 	bl	8008dd2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
 8005336:	e04a      	b.n	80053ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005338:	7bfa      	ldrb	r2, [r7, #15]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	333d      	adds	r3, #61	; 0x3d
 8005348:	2201      	movs	r2, #1
 800534a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800534c:	7bfa      	ldrb	r2, [r7, #15]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	333c      	adds	r3, #60	; 0x3c
 800535c:	7bfa      	ldrb	r2, [r7, #15]
 800535e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	b298      	uxth	r0, r3
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	3342      	adds	r3, #66	; 0x42
 8005374:	4602      	mov	r2, r0
 8005376:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005378:	7bfa      	ldrb	r2, [r7, #15]
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	333f      	adds	r3, #63	; 0x3f
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	3344      	adds	r3, #68	; 0x44
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053a0:	7bfa      	ldrb	r2, [r7, #15]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	3348      	adds	r3, #72	; 0x48
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053b4:	7bfa      	ldrb	r2, [r7, #15]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	3350      	adds	r3, #80	; 0x50
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	3301      	adds	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
 80053ce:	7bfa      	ldrb	r2, [r7, #15]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d3af      	bcc.n	8005338 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053d8:	2300      	movs	r3, #0
 80053da:	73fb      	strb	r3, [r7, #15]
 80053dc:	e044      	b.n	8005468 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80053de:	7bfa      	ldrb	r2, [r7, #15]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053f4:	7bfa      	ldrb	r2, [r7, #15]
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	1a9b      	subs	r3, r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005406:	7bfa      	ldrb	r2, [r7, #15]
 8005408:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800540a:	7bfa      	ldrb	r2, [r7, #15]
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	1a9b      	subs	r3, r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005420:	7bfa      	ldrb	r2, [r7, #15]
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005436:	7bfa      	ldrb	r2, [r7, #15]
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	440b      	add	r3, r1
 8005444:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800544c:	7bfa      	ldrb	r2, [r7, #15]
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	4613      	mov	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	3301      	adds	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
 8005468:	7bfa      	ldrb	r2, [r7, #15]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d3b5      	bcc.n	80053de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	687e      	ldr	r6, [r7, #4]
 800547a:	466d      	mov	r5, sp
 800547c:	f106 0410 	add.w	r4, r6, #16
 8005480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005488:	e894 0003 	ldmia.w	r4, {r0, r1}
 800548c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005490:	1d33      	adds	r3, r6, #4
 8005492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005494:	6838      	ldr	r0, [r7, #0]
 8005496:	f003 fcc7 	bl	8008e28 <USB_DevInit>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e014      	b.n	80054d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d102      	bne.n	80054ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f80b 	bl	80054e0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f003 fe79 	bl	80091c6 <USB_DevDisconnect>

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080054e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_PCDEx_ActivateLPM+0x44>)
 8005510:	4313      	orrs	r3, r2
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	10000003 	.word	0x10000003

08005528 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a04      	ldr	r2, [pc, #16]	; (8005544 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005536:	6013      	str	r3, [r2, #0]
}
 8005538:	bf00      	nop
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40007000 	.word	0x40007000

08005548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005550:	2300      	movs	r3, #0
 8005552:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e291      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8087 	beq.w	800567a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800556c:	4b96      	ldr	r3, [pc, #600]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 030c 	and.w	r3, r3, #12
 8005574:	2b04      	cmp	r3, #4
 8005576:	d00c      	beq.n	8005592 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005578:	4b93      	ldr	r3, [pc, #588]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 030c 	and.w	r3, r3, #12
 8005580:	2b08      	cmp	r3, #8
 8005582:	d112      	bne.n	80055aa <HAL_RCC_OscConfig+0x62>
 8005584:	4b90      	ldr	r3, [pc, #576]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005590:	d10b      	bne.n	80055aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005592:	4b8d      	ldr	r3, [pc, #564]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d06c      	beq.n	8005678 <HAL_RCC_OscConfig+0x130>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d168      	bne.n	8005678 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e26b      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b2:	d106      	bne.n	80055c2 <HAL_RCC_OscConfig+0x7a>
 80055b4:	4b84      	ldr	r3, [pc, #528]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a83      	ldr	r2, [pc, #524]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	e02e      	b.n	8005620 <HAL_RCC_OscConfig+0xd8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10c      	bne.n	80055e4 <HAL_RCC_OscConfig+0x9c>
 80055ca:	4b7f      	ldr	r3, [pc, #508]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a7e      	ldr	r2, [pc, #504]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	4b7c      	ldr	r3, [pc, #496]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a7b      	ldr	r2, [pc, #492]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	e01d      	b.n	8005620 <HAL_RCC_OscConfig+0xd8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055ec:	d10c      	bne.n	8005608 <HAL_RCC_OscConfig+0xc0>
 80055ee:	4b76      	ldr	r3, [pc, #472]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a75      	ldr	r2, [pc, #468]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	4b73      	ldr	r3, [pc, #460]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a72      	ldr	r2, [pc, #456]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	e00b      	b.n	8005620 <HAL_RCC_OscConfig+0xd8>
 8005608:	4b6f      	ldr	r3, [pc, #444]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a6e      	ldr	r2, [pc, #440]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800560e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	4b6c      	ldr	r3, [pc, #432]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a6b      	ldr	r2, [pc, #428]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800561a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800561e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d013      	beq.n	8005650 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fd fbd4 	bl	8002dd4 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005630:	f7fd fbd0 	bl	8002dd4 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b64      	cmp	r3, #100	; 0x64
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e21f      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005642:	4b61      	ldr	r3, [pc, #388]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f0      	beq.n	8005630 <HAL_RCC_OscConfig+0xe8>
 800564e:	e014      	b.n	800567a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005650:	f7fd fbc0 	bl	8002dd4 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005658:	f7fd fbbc 	bl	8002dd4 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b64      	cmp	r3, #100	; 0x64
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e20b      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800566a:	4b57      	ldr	r3, [pc, #348]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <HAL_RCC_OscConfig+0x110>
 8005676:	e000      	b.n	800567a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d069      	beq.n	800575a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005686:	4b50      	ldr	r3, [pc, #320]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 030c 	and.w	r3, r3, #12
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005692:	4b4d      	ldr	r3, [pc, #308]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 030c 	and.w	r3, r3, #12
 800569a:	2b08      	cmp	r3, #8
 800569c:	d11c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x190>
 800569e:	4b4a      	ldr	r3, [pc, #296]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d116      	bne.n	80056d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056aa:	4b47      	ldr	r3, [pc, #284]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d005      	beq.n	80056c2 <HAL_RCC_OscConfig+0x17a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d001      	beq.n	80056c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e1df      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c2:	4b41      	ldr	r3, [pc, #260]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	493d      	ldr	r1, [pc, #244]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056d6:	e040      	b.n	800575a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d023      	beq.n	8005728 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056e0:	4b39      	ldr	r3, [pc, #228]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a38      	ldr	r2, [pc, #224]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fd fb72 	bl	8002dd4 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f4:	f7fd fb6e 	bl	8002dd4 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e1bd      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005706:	4b30      	ldr	r3, [pc, #192]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005712:	4b2d      	ldr	r3, [pc, #180]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4929      	ldr	r1, [pc, #164]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005722:	4313      	orrs	r3, r2
 8005724:	600b      	str	r3, [r1, #0]
 8005726:	e018      	b.n	800575a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005728:	4b27      	ldr	r3, [pc, #156]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a26      	ldr	r2, [pc, #152]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fd fb4e 	bl	8002dd4 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800573c:	f7fd fb4a 	bl	8002dd4 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e199      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800574e:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d038      	beq.n	80057d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d019      	beq.n	80057a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800576e:	4b16      	ldr	r3, [pc, #88]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005772:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577a:	f7fd fb2b 	bl	8002dd4 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005780:	e008      	b.n	8005794 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005782:	f7fd fb27 	bl	8002dd4 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e176      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005794:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f0      	beq.n	8005782 <HAL_RCC_OscConfig+0x23a>
 80057a0:	e01a      	b.n	80057d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80057a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a6:	4a08      	ldr	r2, [pc, #32]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ae:	f7fd fb11 	bl	8002dd4 <HAL_GetTick>
 80057b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b4:	e00a      	b.n	80057cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b6:	f7fd fb0d 	bl	8002dd4 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d903      	bls.n	80057cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e15c      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
 80057c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057cc:	4b91      	ldr	r3, [pc, #580]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80057ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1ee      	bne.n	80057b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80a4 	beq.w	800592e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e6:	4b8b      	ldr	r3, [pc, #556]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10d      	bne.n	800580e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80057f2:	4b88      	ldr	r3, [pc, #544]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	4a87      	ldr	r2, [pc, #540]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80057f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fc:	6413      	str	r3, [r2, #64]	; 0x40
 80057fe:	4b85      	ldr	r3, [pc, #532]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800580a:	2301      	movs	r3, #1
 800580c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800580e:	4b82      	ldr	r3, [pc, #520]	; (8005a18 <HAL_RCC_OscConfig+0x4d0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d118      	bne.n	800584c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800581a:	4b7f      	ldr	r3, [pc, #508]	; (8005a18 <HAL_RCC_OscConfig+0x4d0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a7e      	ldr	r2, [pc, #504]	; (8005a18 <HAL_RCC_OscConfig+0x4d0>)
 8005820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005826:	f7fd fad5 	bl	8002dd4 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582e:	f7fd fad1 	bl	8002dd4 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b64      	cmp	r3, #100	; 0x64
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e120      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005840:	4b75      	ldr	r3, [pc, #468]	; (8005a18 <HAL_RCC_OscConfig+0x4d0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d106      	bne.n	8005862 <HAL_RCC_OscConfig+0x31a>
 8005854:	4b6f      	ldr	r3, [pc, #444]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005858:	4a6e      	ldr	r2, [pc, #440]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	6713      	str	r3, [r2, #112]	; 0x70
 8005860:	e02d      	b.n	80058be <HAL_RCC_OscConfig+0x376>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <HAL_RCC_OscConfig+0x33c>
 800586a:	4b6a      	ldr	r3, [pc, #424]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	4a69      	ldr	r2, [pc, #420]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6713      	str	r3, [r2, #112]	; 0x70
 8005876:	4b67      	ldr	r3, [pc, #412]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	4a66      	ldr	r2, [pc, #408]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 800587c:	f023 0304 	bic.w	r3, r3, #4
 8005880:	6713      	str	r3, [r2, #112]	; 0x70
 8005882:	e01c      	b.n	80058be <HAL_RCC_OscConfig+0x376>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b05      	cmp	r3, #5
 800588a:	d10c      	bne.n	80058a6 <HAL_RCC_OscConfig+0x35e>
 800588c:	4b61      	ldr	r3, [pc, #388]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	4a60      	ldr	r2, [pc, #384]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005892:	f043 0304 	orr.w	r3, r3, #4
 8005896:	6713      	str	r3, [r2, #112]	; 0x70
 8005898:	4b5e      	ldr	r3, [pc, #376]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589c:	4a5d      	ldr	r2, [pc, #372]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6713      	str	r3, [r2, #112]	; 0x70
 80058a4:	e00b      	b.n	80058be <HAL_RCC_OscConfig+0x376>
 80058a6:	4b5b      	ldr	r3, [pc, #364]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	4a5a      	ldr	r2, [pc, #360]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	6713      	str	r3, [r2, #112]	; 0x70
 80058b2:	4b58      	ldr	r3, [pc, #352]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b6:	4a57      	ldr	r2, [pc, #348]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80058b8:	f023 0304 	bic.w	r3, r3, #4
 80058bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d015      	beq.n	80058f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c6:	f7fd fa85 	bl	8002dd4 <HAL_GetTick>
 80058ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058cc:	e00a      	b.n	80058e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ce:	f7fd fa81 	bl	8002dd4 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0ce      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e4:	4b4b      	ldr	r3, [pc, #300]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ee      	beq.n	80058ce <HAL_RCC_OscConfig+0x386>
 80058f0:	e014      	b.n	800591c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f2:	f7fd fa6f 	bl	8002dd4 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fd fa6b 	bl	8002dd4 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	; 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e0b8      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005910:	4b40      	ldr	r3, [pc, #256]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ee      	bne.n	80058fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d105      	bne.n	800592e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005922:	4b3c      	ldr	r3, [pc, #240]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	4a3b      	ldr	r2, [pc, #236]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800592c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80a4 	beq.w	8005a80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005938:	4b36      	ldr	r3, [pc, #216]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 030c 	and.w	r3, r3, #12
 8005940:	2b08      	cmp	r3, #8
 8005942:	d06b      	beq.n	8005a1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d149      	bne.n	80059e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594c:	4b31      	ldr	r3, [pc, #196]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a30      	ldr	r2, [pc, #192]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fd fa3c 	bl	8002dd4 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005960:	f7fd fa38 	bl	8002dd4 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e087      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005972:	4b28      	ldr	r3, [pc, #160]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69da      	ldr	r2, [r3, #28]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	019b      	lsls	r3, r3, #6
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	3b01      	subs	r3, #1
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	061b      	lsls	r3, r3, #24
 80059a2:	4313      	orrs	r3, r2
 80059a4:	4a1b      	ldr	r2, [pc, #108]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80059a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80059b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b8:	f7fd fa0c 	bl	8002dd4 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c0:	f7fd fa08 	bl	8002dd4 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e057      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d2:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0f0      	beq.n	80059c0 <HAL_RCC_OscConfig+0x478>
 80059de:	e04f      	b.n	8005a80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e0:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a0b      	ldr	r2, [pc, #44]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80059e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fd f9f2 	bl	8002dd4 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f4:	f7fd f9ee 	bl	8002dd4 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e03d      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a06:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f0      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4ac>
 8005a12:	e035      	b.n	8005a80 <HAL_RCC_OscConfig+0x538>
 8005a14:	40023800 	.word	0x40023800
 8005a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a1c:	4b1b      	ldr	r3, [pc, #108]	; (8005a8c <HAL_RCC_OscConfig+0x544>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d028      	beq.n	8005a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d121      	bne.n	8005a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d11a      	bne.n	8005a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d111      	bne.n	8005a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	3b01      	subs	r3, #1
 8005a66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d107      	bne.n	8005a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d001      	beq.n	8005a80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40023800 	.word	0x40023800

08005a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0d0      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aa8:	4b6a      	ldr	r3, [pc, #424]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d910      	bls.n	8005ad8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ab6:	4b67      	ldr	r3, [pc, #412]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f023 020f 	bic.w	r2, r3, #15
 8005abe:	4965      	ldr	r1, [pc, #404]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac6:	4b63      	ldr	r3, [pc, #396]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d001      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0b8      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d020      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af0:	4b59      	ldr	r3, [pc, #356]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	4a58      	ldr	r2, [pc, #352]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b08:	4b53      	ldr	r3, [pc, #332]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	4a52      	ldr	r2, [pc, #328]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b14:	4b50      	ldr	r3, [pc, #320]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	494d      	ldr	r1, [pc, #308]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d040      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d107      	bne.n	8005b4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3a:	4b47      	ldr	r3, [pc, #284]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d115      	bne.n	8005b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e07f      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d107      	bne.n	8005b62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b52:	4b41      	ldr	r3, [pc, #260]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e073      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b62:	4b3d      	ldr	r3, [pc, #244]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e06b      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b72:	4b39      	ldr	r3, [pc, #228]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f023 0203 	bic.w	r2, r3, #3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	4936      	ldr	r1, [pc, #216]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b84:	f7fd f926 	bl	8002dd4 <HAL_GetTick>
 8005b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8a:	e00a      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b8c:	f7fd f922 	bl	8002dd4 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e053      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba2:	4b2d      	ldr	r3, [pc, #180]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 020c 	and.w	r2, r3, #12
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d1eb      	bne.n	8005b8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb4:	4b27      	ldr	r3, [pc, #156]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d210      	bcs.n	8005be4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f023 020f 	bic.w	r2, r3, #15
 8005bca:	4922      	ldr	r1, [pc, #136]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd2:	4b20      	ldr	r3, [pc, #128]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e032      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d008      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf0:	4b19      	ldr	r3, [pc, #100]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4916      	ldr	r1, [pc, #88]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c0e:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	490e      	ldr	r1, [pc, #56]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c22:	f000 f821 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8005c26:	4601      	mov	r1, r0
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	091b      	lsrs	r3, r3, #4
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <HAL_RCC_ClockConfig+0x1cc>)
 8005c34:	5cd3      	ldrb	r3, [r2, r3]
 8005c36:	fa21 f303 	lsr.w	r3, r1, r3
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <HAL_RCC_ClockConfig+0x1d0>)
 8005c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <HAL_RCC_ClockConfig+0x1d4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fc ff52 	bl	8002aec <HAL_InitTick>

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40023c00 	.word	0x40023c00
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	0800c6c0 	.word	0x0800c6c0
 8005c60:	20000024 	.word	0x20000024
 8005c64:	20000028 	.word	0x20000028

08005c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	607b      	str	r3, [r7, #4]
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	2300      	movs	r3, #0
 8005c78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c7e:	4b50      	ldr	r3, [pc, #320]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d007      	beq.n	8005c9a <HAL_RCC_GetSysClockFreq+0x32>
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d008      	beq.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x38>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f040 808d 	bne.w	8005dae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c94:	4b4b      	ldr	r3, [pc, #300]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005c96:	60bb      	str	r3, [r7, #8]
      break;
 8005c98:	e08c      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c9a:	4b4b      	ldr	r3, [pc, #300]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c9c:	60bb      	str	r3, [r7, #8]
      break;
 8005c9e:	e089      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ca0:	4b47      	ldr	r3, [pc, #284]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005caa:	4b45      	ldr	r3, [pc, #276]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d023      	beq.n	8005cfe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cb6:	4b42      	ldr	r3, [pc, #264]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	099b      	lsrs	r3, r3, #6
 8005cbc:	f04f 0400 	mov.w	r4, #0
 8005cc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	ea03 0501 	and.w	r5, r3, r1
 8005ccc:	ea04 0602 	and.w	r6, r4, r2
 8005cd0:	4a3d      	ldr	r2, [pc, #244]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005cd2:	fb02 f106 	mul.w	r1, r2, r6
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	fb02 f205 	mul.w	r2, r2, r5
 8005cdc:	440a      	add	r2, r1
 8005cde:	493a      	ldr	r1, [pc, #232]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ce0:	fba5 0101 	umull	r0, r1, r5, r1
 8005ce4:	1853      	adds	r3, r2, r1
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f04f 0400 	mov.w	r4, #0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	4623      	mov	r3, r4
 8005cf2:	f7fa fadd 	bl	80002b0 <__aeabi_uldivmod>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e049      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cfe:	4b30      	ldr	r3, [pc, #192]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	099b      	lsrs	r3, r3, #6
 8005d04:	f04f 0400 	mov.w	r4, #0
 8005d08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	ea03 0501 	and.w	r5, r3, r1
 8005d14:	ea04 0602 	and.w	r6, r4, r2
 8005d18:	4629      	mov	r1, r5
 8005d1a:	4632      	mov	r2, r6
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	f04f 0400 	mov.w	r4, #0
 8005d24:	0154      	lsls	r4, r2, #5
 8005d26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d2a:	014b      	lsls	r3, r1, #5
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4622      	mov	r2, r4
 8005d30:	1b49      	subs	r1, r1, r5
 8005d32:	eb62 0206 	sbc.w	r2, r2, r6
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	f04f 0400 	mov.w	r4, #0
 8005d3e:	0194      	lsls	r4, r2, #6
 8005d40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005d44:	018b      	lsls	r3, r1, #6
 8005d46:	1a5b      	subs	r3, r3, r1
 8005d48:	eb64 0402 	sbc.w	r4, r4, r2
 8005d4c:	f04f 0100 	mov.w	r1, #0
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	00e2      	lsls	r2, r4, #3
 8005d56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005d5a:	00d9      	lsls	r1, r3, #3
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4614      	mov	r4, r2
 8005d60:	195b      	adds	r3, r3, r5
 8005d62:	eb44 0406 	adc.w	r4, r4, r6
 8005d66:	f04f 0100 	mov.w	r1, #0
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	02a2      	lsls	r2, r4, #10
 8005d70:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005d74:	0299      	lsls	r1, r3, #10
 8005d76:	460b      	mov	r3, r1
 8005d78:	4614      	mov	r4, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f04f 0400 	mov.w	r4, #0
 8005d84:	461a      	mov	r2, r3
 8005d86:	4623      	mov	r3, r4
 8005d88:	f7fa fa92 	bl	80002b0 <__aeabi_uldivmod>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d92:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	0c1b      	lsrs	r3, r3, #16
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	60bb      	str	r3, [r7, #8]
      break;
 8005dac:	e002      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005db0:	60bb      	str	r3, [r7, #8]
      break;
 8005db2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005db4:	68bb      	ldr	r3, [r7, #8]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	00f42400 	.word	0x00f42400
 8005dc8:	017d7840 	.word	0x017d7840

08005dcc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd0:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000024 	.word	0x20000024

08005de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005de8:	f7ff fff0 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005dec:	4601      	mov	r1, r0
 8005dee:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	0a9b      	lsrs	r3, r3, #10
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	4a03      	ldr	r2, [pc, #12]	; (8005e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dfa:	5cd3      	ldrb	r3, [r2, r3]
 8005dfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40023800 	.word	0x40023800
 8005e08:	0800c6d0 	.word	0x0800c6d0

08005e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e10:	f7ff ffdc 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005e14:	4601      	mov	r1, r0
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	0b5b      	lsrs	r3, r3, #13
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	4a03      	ldr	r2, [pc, #12]	; (8005e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e22:	5cd3      	ldrb	r3, [r2, r3]
 8005e24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	0800c6d0 	.word	0x0800c6d0

08005e34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	220f      	movs	r2, #15
 8005e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e44:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <HAL_RCC_GetClockConfig+0x5c>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0203 	and.w	r2, r3, #3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <HAL_RCC_GetClockConfig+0x5c>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <HAL_RCC_GetClockConfig+0x5c>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005e68:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <HAL_RCC_GetClockConfig+0x5c>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	08db      	lsrs	r3, r3, #3
 8005e6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e76:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <HAL_RCC_GetClockConfig+0x60>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 020f 	and.w	r2, r3, #15
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	601a      	str	r2, [r3, #0]
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40023c00 	.word	0x40023c00

08005e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d012      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ec0:	4b69      	ldr	r3, [pc, #420]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	4a68      	ldr	r2, [pc, #416]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005eca:	6093      	str	r3, [r2, #8]
 8005ecc:	4b66      	ldr	r3, [pc, #408]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	4964      	ldr	r1, [pc, #400]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d017      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ef2:	4b5d      	ldr	r3, [pc, #372]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f00:	4959      	ldr	r1, [pc, #356]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f10:	d101      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f12:	2301      	movs	r3, #1
 8005f14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d017      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f2e:	4b4e      	ldr	r3, [pc, #312]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	494a      	ldr	r1, [pc, #296]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 808b 	beq.w	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f7c:	4b3a      	ldr	r3, [pc, #232]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	4a39      	ldr	r2, [pc, #228]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f86:	6413      	str	r3, [r2, #64]	; 0x40
 8005f88:	4b37      	ldr	r3, [pc, #220]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f94:	4b35      	ldr	r3, [pc, #212]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a34      	ldr	r2, [pc, #208]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa0:	f7fc ff18 	bl	8002dd4 <HAL_GetTick>
 8005fa4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa8:	f7fc ff14 	bl	8002dd4 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b64      	cmp	r3, #100	; 0x64
 8005fb4:	d901      	bls.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e355      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fba:	4b2c      	ldr	r3, [pc, #176]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0f0      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fc6:	4b28      	ldr	r3, [pc, #160]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d035      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d02e      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fe4:	4b20      	ldr	r3, [pc, #128]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fee:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	4a1d      	ldr	r2, [pc, #116]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ffa:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	4a1a      	ldr	r2, [pc, #104]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006004:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006006:	4a18      	ldr	r2, [pc, #96]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800600c:	4b16      	ldr	r3, [pc, #88]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d114      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006018:	f7fc fedc 	bl	8002dd4 <HAL_GetTick>
 800601c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601e:	e00a      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006020:	f7fc fed8 	bl	8002dd4 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f241 3288 	movw	r2, #5000	; 0x1388
 800602e:	4293      	cmp	r3, r2
 8006030:	d901      	bls.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e317      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006036:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0ee      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800604e:	d111      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006050:	4b05      	ldr	r3, [pc, #20]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800605c:	4b04      	ldr	r3, [pc, #16]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800605e:	400b      	ands	r3, r1
 8006060:	4901      	ldr	r1, [pc, #4]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006062:	4313      	orrs	r3, r2
 8006064:	608b      	str	r3, [r1, #8]
 8006066:	e00b      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006068:	40023800 	.word	0x40023800
 800606c:	40007000 	.word	0x40007000
 8006070:	0ffffcff 	.word	0x0ffffcff
 8006074:	4bb0      	ldr	r3, [pc, #704]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	4aaf      	ldr	r2, [pc, #700]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800607a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800607e:	6093      	str	r3, [r2, #8]
 8006080:	4bad      	ldr	r3, [pc, #692]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006082:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608c:	49aa      	ldr	r1, [pc, #680]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800608e:	4313      	orrs	r3, r2
 8006090:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b00      	cmp	r3, #0
 800609c:	d010      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800609e:	4ba6      	ldr	r3, [pc, #664]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a4:	4aa4      	ldr	r2, [pc, #656]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060ae:	4ba2      	ldr	r3, [pc, #648]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	499f      	ldr	r1, [pc, #636]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060cc:	4b9a      	ldr	r3, [pc, #616]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060da:	4997      	ldr	r1, [pc, #604]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060ee:	4b92      	ldr	r3, [pc, #584]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060fc:	498e      	ldr	r1, [pc, #568]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00a      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006110:	4b89      	ldr	r3, [pc, #548]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611e:	4986      	ldr	r1, [pc, #536]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006132:	4b81      	ldr	r3, [pc, #516]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006138:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006140:	497d      	ldr	r1, [pc, #500]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006142:	4313      	orrs	r3, r2
 8006144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006154:	4b78      	ldr	r3, [pc, #480]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615a:	f023 0203 	bic.w	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	4975      	ldr	r1, [pc, #468]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006164:	4313      	orrs	r3, r2
 8006166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006176:	4b70      	ldr	r3, [pc, #448]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617c:	f023 020c 	bic.w	r2, r3, #12
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006184:	496c      	ldr	r1, [pc, #432]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006198:	4b67      	ldr	r3, [pc, #412]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a6:	4964      	ldr	r1, [pc, #400]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061ba:	4b5f      	ldr	r3, [pc, #380]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c8:	495b      	ldr	r1, [pc, #364]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061dc:	4b56      	ldr	r3, [pc, #344]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ea:	4953      	ldr	r1, [pc, #332]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80061fe:	4b4e      	ldr	r3, [pc, #312]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006204:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620c:	494a      	ldr	r1, [pc, #296]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006220:	4b45      	ldr	r3, [pc, #276]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006226:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622e:	4942      	ldr	r1, [pc, #264]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006242:	4b3d      	ldr	r3, [pc, #244]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006248:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006250:	4939      	ldr	r1, [pc, #228]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006264:	4b34      	ldr	r3, [pc, #208]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006272:	4931      	ldr	r1, [pc, #196]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d011      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006286:	4b2c      	ldr	r3, [pc, #176]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006294:	4928      	ldr	r1, [pc, #160]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006296:	4313      	orrs	r3, r2
 8006298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062a4:	d101      	bne.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80062a6:	2301      	movs	r3, #1
 80062a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80062b6:	2301      	movs	r3, #1
 80062b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062c6:	4b1c      	ldr	r3, [pc, #112]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d4:	4918      	ldr	r1, [pc, #96]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062e8:	4b13      	ldr	r3, [pc, #76]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f8:	490f      	ldr	r1, [pc, #60]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d005      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800630e:	f040 80d8 	bne.w	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a08      	ldr	r2, [pc, #32]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006318:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800631c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631e:	f7fc fd59 	bl	8002dd4 <HAL_GetTick>
 8006322:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006324:	e00a      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006326:	f7fc fd55 	bl	8002dd4 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b64      	cmp	r3, #100	; 0x64
 8006332:	d903      	bls.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e196      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006338:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800633c:	4b6c      	ldr	r3, [pc, #432]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1ee      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d021      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006358:	2b00      	cmp	r3, #0
 800635a:	d11d      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800635c:	4b64      	ldr	r3, [pc, #400]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800635e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006362:	0c1b      	lsrs	r3, r3, #16
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800636a:	4b61      	ldr	r3, [pc, #388]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800636c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006370:	0e1b      	lsrs	r3, r3, #24
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	019a      	lsls	r2, r3, #6
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	041b      	lsls	r3, r3, #16
 8006382:	431a      	orrs	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	061b      	lsls	r3, r3, #24
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	071b      	lsls	r3, r3, #28
 8006390:	4957      	ldr	r1, [pc, #348]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d004      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x516>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ac:	d00a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d02e      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063c2:	d129      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063c4:	4b4a      	ldr	r3, [pc, #296]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ca:	0c1b      	lsrs	r3, r3, #16
 80063cc:	f003 0303 	and.w	r3, r3, #3
 80063d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063d2:	4b47      	ldr	r3, [pc, #284]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d8:	0f1b      	lsrs	r3, r3, #28
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	019a      	lsls	r2, r3, #6
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	041b      	lsls	r3, r3, #16
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	061b      	lsls	r3, r3, #24
 80063f2:	431a      	orrs	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	071b      	lsls	r3, r3, #28
 80063f8:	493d      	ldr	r1, [pc, #244]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006400:	4b3b      	ldr	r3, [pc, #236]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006406:	f023 021f 	bic.w	r2, r3, #31
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	3b01      	subs	r3, #1
 8006410:	4937      	ldr	r1, [pc, #220]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01d      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006424:	4b32      	ldr	r3, [pc, #200]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642a:	0e1b      	lsrs	r3, r3, #24
 800642c:	f003 030f 	and.w	r3, r3, #15
 8006430:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006432:	4b2f      	ldr	r3, [pc, #188]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006438:	0f1b      	lsrs	r3, r3, #28
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	019a      	lsls	r2, r3, #6
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	041b      	lsls	r3, r3, #16
 800644c:	431a      	orrs	r2, r3
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	061b      	lsls	r3, r3, #24
 8006452:	431a      	orrs	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	071b      	lsls	r3, r3, #28
 8006458:	4925      	ldr	r1, [pc, #148]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d011      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	019a      	lsls	r2, r3, #6
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	061b      	lsls	r3, r3, #24
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	071b      	lsls	r3, r3, #28
 8006488:	4919      	ldr	r1, [pc, #100]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006490:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800649a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800649c:	f7fc fc9a 	bl	8002dd4 <HAL_GetTick>
 80064a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064a4:	f7fc fc96 	bl	8002dd4 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b64      	cmp	r3, #100	; 0x64
 80064b0:	d901      	bls.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e0d7      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064b6:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f0      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	f040 80cd 	bne.w	8006664 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80064ca:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a08      	ldr	r2, [pc, #32]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d6:	f7fc fc7d 	bl	8002dd4 <HAL_GetTick>
 80064da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064dc:	e00a      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064de:	f7fc fc79 	bl	8002dd4 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b64      	cmp	r3, #100	; 0x64
 80064ea:	d903      	bls.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e0ba      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80064f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064f4:	4b5e      	ldr	r3, [pc, #376]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006500:	d0ed      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800651e:	2b00      	cmp	r3, #0
 8006520:	d02e      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d12a      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800652a:	4b51      	ldr	r3, [pc, #324]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006530:	0c1b      	lsrs	r3, r3, #16
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006538:	4b4d      	ldr	r3, [pc, #308]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653e:	0f1b      	lsrs	r3, r3, #28
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	019a      	lsls	r2, r3, #6
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	041b      	lsls	r3, r3, #16
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	061b      	lsls	r3, r3, #24
 8006558:	431a      	orrs	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	071b      	lsls	r3, r3, #28
 800655e:	4944      	ldr	r1, [pc, #272]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006566:	4b42      	ldr	r3, [pc, #264]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800656c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	3b01      	subs	r3, #1
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	493d      	ldr	r1, [pc, #244]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d022      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006594:	d11d      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006596:	4b36      	ldr	r3, [pc, #216]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659c:	0e1b      	lsrs	r3, r3, #24
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065a4:	4b32      	ldr	r3, [pc, #200]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065aa:	0f1b      	lsrs	r3, r3, #28
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	019a      	lsls	r2, r3, #6
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	041b      	lsls	r3, r3, #16
 80065be:	431a      	orrs	r2, r3
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	061b      	lsls	r3, r3, #24
 80065c4:	431a      	orrs	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	071b      	lsls	r3, r3, #28
 80065ca:	4929      	ldr	r1, [pc, #164]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d028      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065de:	4b24      	ldr	r3, [pc, #144]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e4:	0e1b      	lsrs	r3, r3, #24
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065ec:	4b20      	ldr	r3, [pc, #128]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f2:	0c1b      	lsrs	r3, r3, #16
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	019a      	lsls	r2, r3, #6
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	041b      	lsls	r3, r3, #16
 8006604:	431a      	orrs	r2, r3
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	061b      	lsls	r3, r3, #24
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	071b      	lsls	r3, r3, #28
 8006612:	4917      	ldr	r1, [pc, #92]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800661a:	4b15      	ldr	r3, [pc, #84]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800661c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006620:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	4911      	ldr	r1, [pc, #68]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a0e      	ldr	r2, [pc, #56]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800663c:	f7fc fbca 	bl	8002dd4 <HAL_GetTick>
 8006640:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006644:	f7fc fbc6 	bl	8002dd4 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b64      	cmp	r3, #100	; 0x64
 8006650:	d901      	bls.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e007      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800665e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006662:	d1ef      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	40023800 	.word	0x40023800

08006674 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e06b      	b.n	800675e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	7f5b      	ldrb	r3, [r3, #29]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d105      	bne.n	800669c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fb ff98 	bl	80025cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	22ca      	movs	r2, #202	; 0xca
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2253      	movs	r2, #83	; 0x53
 80066b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f9e8 	bl	8006a88 <RTC_EnterInitMode>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d008      	beq.n	80066d0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	22ff      	movs	r2, #255	; 0xff
 80066c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2204      	movs	r2, #4
 80066ca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e046      	b.n	800675e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6899      	ldr	r1, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b23      	ldr	r3, [pc, #140]	; (8006768 <HAL_RTC_Init+0xf4>)
 80066dc:	400b      	ands	r3, r1
 80066de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6899      	ldr	r1, [r3, #8]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	68d2      	ldr	r2, [r2, #12]
 8006706:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6919      	ldr	r1, [r3, #16]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	041a      	lsls	r2, r3, #16
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800672a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0208 	bic.w	r2, r2, #8
 800673a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	22ff      	movs	r2, #255	; 0xff
 8006754:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800675c:	2300      	movs	r3, #0
  }
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	ff8fffbf 	.word	0xff8fffbf

0800676c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800676c:	b590      	push	{r4, r7, lr}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	7f1b      	ldrb	r3, [r3, #28]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_RTC_SetTime+0x1c>
 8006784:	2302      	movs	r3, #2
 8006786:	e0a8      	b.n	80068da <HAL_RTC_SetTime+0x16e>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2202      	movs	r2, #2
 8006792:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d126      	bne.n	80067e8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2200      	movs	r2, #0
 80067ac:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 f994 	bl	8006ae0 <RTC_ByteToBcd2>
 80067b8:	4603      	mov	r3, r0
 80067ba:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	785b      	ldrb	r3, [r3, #1]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f98d 	bl	8006ae0 <RTC_ByteToBcd2>
 80067c6:	4603      	mov	r3, r0
 80067c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80067ca:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	789b      	ldrb	r3, [r3, #2]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 f985 	bl	8006ae0 <RTC_ByteToBcd2>
 80067d6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80067d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	7b1b      	ldrb	r3, [r3, #12]
 80067e0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	e018      	b.n	800681a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2200      	movs	r2, #0
 80067fa:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006808:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800680e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	7b1b      	ldrb	r3, [r3, #12]
 8006814:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	22ca      	movs	r2, #202	; 0xca
 8006820:	625a      	str	r2, [r3, #36]	; 0x24
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2253      	movs	r2, #83	; 0x53
 8006828:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 f92c 	bl	8006a88 <RTC_EnterInitMode>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	22ff      	movs	r2, #255	; 0xff
 800683c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2204      	movs	r2, #4
 8006842:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e045      	b.n	80068da <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	6979      	ldr	r1, [r7, #20]
 8006854:	4b23      	ldr	r3, [pc, #140]	; (80068e4 <HAL_RTC_SetTime+0x178>)
 8006856:	400b      	ands	r3, r1
 8006858:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006868:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6899      	ldr	r1, [r3, #8]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	431a      	orrs	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006890:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d111      	bne.n	80068c4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f8c9 	bl	8006a38 <HAL_RTC_WaitForSynchro>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	22ff      	movs	r2, #255	; 0xff
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2204      	movs	r2, #4
 80068b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e00a      	b.n	80068da <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	22ff      	movs	r2, #255	; 0xff
 80068ca:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80068d8:	2300      	movs	r3, #0
  }
}
 80068da:	4618      	mov	r0, r3
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd90      	pop	{r4, r7, pc}
 80068e2:	bf00      	nop
 80068e4:	007f7f7f 	.word	0x007f7f7f

080068e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80068e8:	b590      	push	{r4, r7, lr}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	7f1b      	ldrb	r3, [r3, #28]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_RTC_SetDate+0x1c>
 8006900:	2302      	movs	r3, #2
 8006902:	e092      	b.n	8006a2a <HAL_RTC_SetDate+0x142>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2202      	movs	r2, #2
 800690e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10e      	bne.n	8006934 <HAL_RTC_SetDate+0x4c>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	f003 0310 	and.w	r3, r3, #16
 800691e:	2b00      	cmp	r3, #0
 8006920:	d008      	beq.n	8006934 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	b2db      	uxtb	r3, r3
 800692c:	330a      	adds	r3, #10
 800692e:	b2da      	uxtb	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d11c      	bne.n	8006974 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	78db      	ldrb	r3, [r3, #3]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 f8ce 	bl	8006ae0 <RTC_ByteToBcd2>
 8006944:	4603      	mov	r3, r0
 8006946:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	785b      	ldrb	r3, [r3, #1]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 f8c7 	bl	8006ae0 <RTC_ByteToBcd2>
 8006952:	4603      	mov	r3, r0
 8006954:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006956:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	789b      	ldrb	r3, [r3, #2]
 800695c:	4618      	mov	r0, r3
 800695e:	f000 f8bf 	bl	8006ae0 <RTC_ByteToBcd2>
 8006962:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006964:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	e00e      	b.n	8006992 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	78db      	ldrb	r3, [r3, #3]
 8006978:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	785b      	ldrb	r3, [r3, #1]
 800697e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006980:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8006986:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	22ca      	movs	r2, #202	; 0xca
 8006998:	625a      	str	r2, [r3, #36]	; 0x24
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2253      	movs	r2, #83	; 0x53
 80069a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f870 	bl	8006a88 <RTC_EnterInitMode>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	22ff      	movs	r2, #255	; 0xff
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2204      	movs	r2, #4
 80069ba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e031      	b.n	8006a2a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	6979      	ldr	r1, [r7, #20]
 80069cc:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <HAL_RTC_SetDate+0x14c>)
 80069ce:	400b      	ands	r3, r1
 80069d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069e0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d111      	bne.n	8006a14 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f821 	bl	8006a38 <HAL_RTC_WaitForSynchro>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	22ff      	movs	r2, #255	; 0xff
 8006a02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2204      	movs	r2, #4
 8006a08:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e00a      	b.n	8006a2a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	22ff      	movs	r2, #255	; 0xff
 8006a1a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006a28:	2300      	movs	r3, #0
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd90      	pop	{r4, r7, pc}
 8006a32:	bf00      	nop
 8006a34:	00ffff3f 	.word	0x00ffff3f

08006a38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a52:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a54:	f7fc f9be 	bl	8002dd4 <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006a5a:	e009      	b.n	8006a70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006a5c:	f7fc f9ba 	bl	8002dd4 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a6a:	d901      	bls.n	8006a70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e007      	b.n	8006a80 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ee      	beq.n	8006a5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d119      	bne.n	8006ad6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aaa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006aac:	f7fc f992 	bl	8002dd4 <HAL_GetTick>
 8006ab0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006ab2:	e009      	b.n	8006ac8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ab4:	f7fc f98e 	bl	8002dd4 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ac2:	d901      	bls.n	8006ac8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e007      	b.n	8006ad8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0ee      	beq.n	8006ab4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8006aee:	e005      	b.n	8006afc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	3b0a      	subs	r3, #10
 8006afa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	2b09      	cmp	r3, #9
 8006b00:	d8f6      	bhi.n	8006af0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	79fb      	ldrb	r3, [r7, #7]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	b2db      	uxtb	r3, r3
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e084      	b.n	8006c38 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d106      	bne.n	8006b4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7fb fd59 	bl	8002600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2202      	movs	r2, #2
 8006b52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b64:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b6e:	d902      	bls.n	8006b76 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	e002      	b.n	8006b7c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006b84:	d007      	beq.n	8006b96 <HAL_SPI_Init+0x7a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b8e:	d002      	beq.n	8006b96 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10b      	bne.n	8006bb6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ba6:	d903      	bls.n	8006bb0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	631a      	str	r2, [r3, #48]	; 0x30
 8006bae:	e002      	b.n	8006bb6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	ea42 0103 	orr.w	r1, r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	f003 0204 	and.w	r2, r3, #4
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	ea42 0103 	orr.w	r1, r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	69da      	ldr	r2, [r3, #28]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_SPI_Transmit+0x22>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e150      	b.n	8006f04 <HAL_SPI_Transmit+0x2c4>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c6a:	f7fc f8b3 	bl	8002dd4 <HAL_GetTick>
 8006c6e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d002      	beq.n	8006c86 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c80:	2302      	movs	r3, #2
 8006c82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c84:	e135      	b.n	8006ef2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_SPI_Transmit+0x52>
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c96:	e12c      	b.n	8006ef2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	88fa      	ldrh	r2, [r7, #6]
 8006cb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	88fa      	ldrh	r2, [r7, #6]
 8006cb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce2:	d107      	bne.n	8006cf4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cf2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfe:	2b40      	cmp	r3, #64	; 0x40
 8006d00:	d007      	beq.n	8006d12 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d1a:	d94b      	bls.n	8006db4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <HAL_SPI_Transmit+0xea>
 8006d24:	8afb      	ldrh	r3, [r7, #22]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d13e      	bne.n	8006da8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	881a      	ldrh	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3a:	1c9a      	adds	r2, r3, #2
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d4e:	e02b      	b.n	8006da8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d112      	bne.n	8006d84 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	881a      	ldrh	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	1c9a      	adds	r2, r3, #2
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d82:	e011      	b.n	8006da8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d84:	f7fc f826 	bl	8002dd4 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d803      	bhi.n	8006d9c <HAL_SPI_Transmit+0x15c>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9a:	d102      	bne.n	8006da2 <HAL_SPI_Transmit+0x162>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006da6:	e0a4      	b.n	8006ef2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1ce      	bne.n	8006d50 <HAL_SPI_Transmit+0x110>
 8006db2:	e07c      	b.n	8006eae <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_SPI_Transmit+0x182>
 8006dbc:	8afb      	ldrh	r3, [r7, #22]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d170      	bne.n	8006ea4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d912      	bls.n	8006df2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	881a      	ldrh	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	1c9a      	adds	r2, r3, #2
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b02      	subs	r3, #2
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006df0:	e058      	b.n	8006ea4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	330c      	adds	r3, #12
 8006dfc:	7812      	ldrb	r2, [r2, #0]
 8006dfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e18:	e044      	b.n	8006ea4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d12b      	bne.n	8006e80 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d912      	bls.n	8006e58 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	881a      	ldrh	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	1c9a      	adds	r2, r3, #2
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b02      	subs	r3, #2
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e56:	e025      	b.n	8006ea4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	7812      	ldrb	r2, [r2, #0]
 8006e64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e7e:	e011      	b.n	8006ea4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e80:	f7fb ffa8 	bl	8002dd4 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d803      	bhi.n	8006e98 <HAL_SPI_Transmit+0x258>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e96:	d102      	bne.n	8006e9e <HAL_SPI_Transmit+0x25e>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d102      	bne.n	8006ea4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ea2:	e026      	b.n	8006ef2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1b5      	bne.n	8006e1a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fa20 	bl	80072f8 <SPI_EndRxTxTransaction>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ecc:	2300      	movs	r3, #0
 8006ece:	613b      	str	r3, [r7, #16]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	77fb      	strb	r3, [r7, #31]
 8006eee:	e000      	b.n	8006ef2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006ef0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f02:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3720      	adds	r7, #32
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	099b      	lsrs	r3, r3, #6
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10f      	bne.n	8006f50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	099b      	lsrs	r3, r3, #6
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d004      	beq.n	8006f50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
    return;
 8006f4e:	e0d8      	b.n	8007102 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <HAL_SPI_IRQHandler+0x66>
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	09db      	lsrs	r3, r3, #7
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d004      	beq.n	8006f72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
    return;
 8006f70:	e0c7      	b.n	8007102 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	095b      	lsrs	r3, r3, #5
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10c      	bne.n	8006f98 <HAL_SPI_IRQHandler+0x8c>
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	099b      	lsrs	r3, r3, #6
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d106      	bne.n	8006f98 <HAL_SPI_IRQHandler+0x8c>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	0a1b      	lsrs	r3, r3, #8
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 80b5 	beq.w	8007102 <HAL_SPI_IRQHandler+0x1f6>
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 80ae 	beq.w	8007102 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	099b      	lsrs	r3, r3, #6
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d023      	beq.n	8006ffa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d011      	beq.n	8006fe2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fc2:	f043 0204 	orr.w	r2, r3, #4
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	e00b      	b.n	8006ffa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	693b      	ldr	r3, [r7, #16]
        return;
 8006ff8:	e083      	b.n	8007102 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d014      	beq.n	8007030 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700a:	f043 0201 	orr.w	r2, r3, #1
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00c      	beq.n	8007056 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007040:	f043 0208 	orr.w	r2, r3, #8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007048:	2300      	movs	r3, #0
 800704a:	60bb      	str	r3, [r7, #8]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	60bb      	str	r3, [r7, #8]
 8007054:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800705a:	2b00      	cmp	r3, #0
 800705c:	d050      	beq.n	8007100 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800706c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d104      	bne.n	800708a <HAL_SPI_IRQHandler+0x17e>
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d034      	beq.n	80070f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0203 	bic.w	r2, r2, #3
 8007098:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d011      	beq.n	80070c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a6:	4a18      	ldr	r2, [pc, #96]	; (8007108 <HAL_SPI_IRQHandler+0x1fc>)
 80070a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fc ff98 	bl	8003fe4 <HAL_DMA_Abort_IT>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d005      	beq.n	80070c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d016      	beq.n	80070fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d2:	4a0d      	ldr	r2, [pc, #52]	; (8007108 <HAL_SPI_IRQHandler+0x1fc>)
 80070d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fc ff82 	bl	8003fe4 <HAL_DMA_Abort_IT>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80070f2:	e003      	b.n	80070fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f809 	bl	800710c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80070fa:	e000      	b.n	80070fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80070fc:	bf00      	nop
    return;
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
  }
}
 8007102:	3720      	adds	r7, #32
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	08007121 	.word	0x08007121

0800710c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff ffe5 	bl	800710c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	603b      	str	r3, [r7, #0]
 8007156:	4613      	mov	r3, r2
 8007158:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800715a:	e04c      	b.n	80071f6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007162:	d048      	beq.n	80071f6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007164:	f7fb fe36 	bl	8002dd4 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d902      	bls.n	800717a <SPI_WaitFlagStateUntilTimeout+0x30>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d13d      	bne.n	80071f6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007192:	d111      	bne.n	80071b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800719c:	d004      	beq.n	80071a8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071a6:	d107      	bne.n	80071b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c0:	d10f      	bne.n	80071e2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e00f      	b.n	8007216 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	4013      	ands	r3, r2
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	429a      	cmp	r2, r3
 8007204:	bf0c      	ite	eq
 8007206:	2301      	moveq	r3, #1
 8007208:	2300      	movne	r3, #0
 800720a:	b2db      	uxtb	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	429a      	cmp	r2, r3
 8007212:	d1a3      	bne.n	800715c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800722c:	e057      	b.n	80072de <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007234:	d106      	bne.n	8007244 <SPI_WaitFifoStateUntilTimeout+0x26>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d103      	bne.n	8007244 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	330c      	adds	r3, #12
 8007242:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724a:	d048      	beq.n	80072de <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800724c:	f7fb fdc2 	bl	8002dd4 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	429a      	cmp	r2, r3
 800725a:	d902      	bls.n	8007262 <SPI_WaitFifoStateUntilTimeout+0x44>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d13d      	bne.n	80072de <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800727a:	d111      	bne.n	80072a0 <SPI_WaitFifoStateUntilTimeout+0x82>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007284:	d004      	beq.n	8007290 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800728e:	d107      	bne.n	80072a0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800729e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072a8:	d10f      	bne.n	80072ca <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e008      	b.n	80072f0 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4013      	ands	r3, r2
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d19f      	bne.n	800722e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af02      	add	r7, sp, #8
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2200      	movs	r2, #0
 800730c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff ff84 	bl	800721e <SPI_WaitFifoStateUntilTimeout>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d007      	beq.n	800732c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007320:	f043 0220 	orr.w	r2, r3, #32
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e027      	b.n	800737c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2200      	movs	r2, #0
 8007334:	2180      	movs	r1, #128	; 0x80
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f7ff ff07 	bl	800714a <SPI_WaitFlagStateUntilTimeout>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d007      	beq.n	8007352 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007346:	f043 0220 	orr.w	r2, r3, #32
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e014      	b.n	800737c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2200      	movs	r2, #0
 800735a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff ff5d 	bl	800721e <SPI_WaitFifoStateUntilTimeout>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800736e:	f043 0220 	orr.w	r2, r3, #32
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e000      	b.n	800737c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e01d      	b.n	80073d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d106      	bne.n	80073b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7fb f9c4 	bl	8002738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3304      	adds	r3, #4
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f000 fb82 	bl	8007acc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	4b0c      	ldr	r3, [pc, #48]	; (800742c <HAL_TIM_Base_Start_IT+0x50>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b06      	cmp	r3, #6
 8007404:	d00b      	beq.n	800741e <HAL_TIM_Base_Start_IT+0x42>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740c:	d007      	beq.n	800741e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0201 	orr.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	00010007 	.word	0x00010007

08007430 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e01d      	b.n	800747e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d106      	bne.n	800745c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f815 	bl	8007486 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3304      	adds	r3, #4
 800746c:	4619      	mov	r1, r3
 800746e:	4610      	mov	r0, r2
 8007470:	f000 fb2c 	bl	8007acc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d122      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d11b      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f06f 0202 	mvn.w	r2, #2
 80074c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fad7 	bl	8007a90 <HAL_TIM_IC_CaptureCallback>
 80074e2:	e005      	b.n	80074f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fac9 	bl	8007a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fada 	bl	8007aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b04      	cmp	r3, #4
 8007502:	d122      	bne.n	800754a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b04      	cmp	r3, #4
 8007510:	d11b      	bne.n	800754a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f06f 0204 	mvn.w	r2, #4
 800751a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 faad 	bl	8007a90 <HAL_TIM_IC_CaptureCallback>
 8007536:	e005      	b.n	8007544 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fa9f 	bl	8007a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fab0 	bl	8007aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b08      	cmp	r3, #8
 8007556:	d122      	bne.n	800759e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f003 0308 	and.w	r3, r3, #8
 8007562:	2b08      	cmp	r3, #8
 8007564:	d11b      	bne.n	800759e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f06f 0208 	mvn.w	r2, #8
 800756e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2204      	movs	r2, #4
 8007574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	f003 0303 	and.w	r3, r3, #3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fa83 	bl	8007a90 <HAL_TIM_IC_CaptureCallback>
 800758a:	e005      	b.n	8007598 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fa75 	bl	8007a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fa86 	bl	8007aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f003 0310 	and.w	r3, r3, #16
 80075a8:	2b10      	cmp	r3, #16
 80075aa:	d122      	bne.n	80075f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f003 0310 	and.w	r3, r3, #16
 80075b6:	2b10      	cmp	r3, #16
 80075b8:	d11b      	bne.n	80075f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f06f 0210 	mvn.w	r2, #16
 80075c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2208      	movs	r2, #8
 80075c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d003      	beq.n	80075e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fa59 	bl	8007a90 <HAL_TIM_IC_CaptureCallback>
 80075de:	e005      	b.n	80075ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fa4b 	bl	8007a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fa5c 	bl	8007aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d10e      	bne.n	800761e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b01      	cmp	r3, #1
 800760c:	d107      	bne.n	800761e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f06f 0201 	mvn.w	r2, #1
 8007616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7fa fc6b 	bl	8001ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007628:	2b80      	cmp	r3, #128	; 0x80
 800762a:	d10e      	bne.n	800764a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007636:	2b80      	cmp	r3, #128	; 0x80
 8007638:	d107      	bne.n	800764a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fe71 	bl	800832c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007658:	d10e      	bne.n	8007678 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007664:	2b80      	cmp	r3, #128	; 0x80
 8007666:	d107      	bne.n	8007678 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fe64 	bl	8008340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d10e      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d107      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800769c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa0a 	bl	8007ab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d10e      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b20      	cmp	r3, #32
 80076be:	d107      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f06f 0220 	mvn.w	r2, #32
 80076c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fe24 	bl	8008318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d101      	bne.n	80076f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80076ee:	2302      	movs	r3, #2
 80076f0:	e105      	b.n	80078fe <HAL_TIM_PWM_ConfigChannel+0x226>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2202      	movs	r2, #2
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b14      	cmp	r3, #20
 8007706:	f200 80f0 	bhi.w	80078ea <HAL_TIM_PWM_ConfigChannel+0x212>
 800770a:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	08007765 	.word	0x08007765
 8007714:	080078eb 	.word	0x080078eb
 8007718:	080078eb 	.word	0x080078eb
 800771c:	080078eb 	.word	0x080078eb
 8007720:	080077a5 	.word	0x080077a5
 8007724:	080078eb 	.word	0x080078eb
 8007728:	080078eb 	.word	0x080078eb
 800772c:	080078eb 	.word	0x080078eb
 8007730:	080077e7 	.word	0x080077e7
 8007734:	080078eb 	.word	0x080078eb
 8007738:	080078eb 	.word	0x080078eb
 800773c:	080078eb 	.word	0x080078eb
 8007740:	08007827 	.word	0x08007827
 8007744:	080078eb 	.word	0x080078eb
 8007748:	080078eb 	.word	0x080078eb
 800774c:	080078eb 	.word	0x080078eb
 8007750:	08007869 	.word	0x08007869
 8007754:	080078eb 	.word	0x080078eb
 8007758:	080078eb 	.word	0x080078eb
 800775c:	080078eb 	.word	0x080078eb
 8007760:	080078a9 	.word	0x080078a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fa4e 	bl	8007c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0208 	orr.w	r2, r2, #8
 800777e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0204 	bic.w	r2, r2, #4
 800778e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6999      	ldr	r1, [r3, #24]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	691a      	ldr	r2, [r3, #16]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	619a      	str	r2, [r3, #24]
      break;
 80077a2:	e0a3      	b.n	80078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68b9      	ldr	r1, [r7, #8]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 faa0 	bl	8007cf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699a      	ldr	r2, [r3, #24]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699a      	ldr	r2, [r3, #24]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6999      	ldr	r1, [r3, #24]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	021a      	lsls	r2, r3, #8
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	619a      	str	r2, [r3, #24]
      break;
 80077e4:	e082      	b.n	80078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 faf7 	bl	8007de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69da      	ldr	r2, [r3, #28]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0208 	orr.w	r2, r2, #8
 8007800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69da      	ldr	r2, [r3, #28]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0204 	bic.w	r2, r2, #4
 8007810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69d9      	ldr	r1, [r3, #28]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	61da      	str	r2, [r3, #28]
      break;
 8007824:	e062      	b.n	80078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	4618      	mov	r0, r3
 800782e:	f000 fb4d 	bl	8007ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69da      	ldr	r2, [r3, #28]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69da      	ldr	r2, [r3, #28]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69d9      	ldr	r1, [r3, #28]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	021a      	lsls	r2, r3, #8
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	61da      	str	r2, [r3, #28]
      break;
 8007866:	e041      	b.n	80078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68b9      	ldr	r1, [r7, #8]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fb84 	bl	8007f7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0208 	orr.w	r2, r2, #8
 8007882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0204 	bic.w	r2, r2, #4
 8007892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	691a      	ldr	r2, [r3, #16]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80078a6:	e021      	b.n	80078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68b9      	ldr	r1, [r7, #8]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fbb6 	bl	8008020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	021a      	lsls	r2, r3, #8
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80078e8:	e000      	b.n	80078ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80078ea:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop

08007908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_TIM_ConfigClockSource+0x18>
 800791c:	2302      	movs	r3, #2
 800791e:	e0a6      	b.n	8007a6e <HAL_TIM_ConfigClockSource+0x166>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4b4f      	ldr	r3, [pc, #316]	; (8007a78 <HAL_TIM_ConfigClockSource+0x170>)
 800793c:	4013      	ands	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007946:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b40      	cmp	r3, #64	; 0x40
 8007956:	d067      	beq.n	8007a28 <HAL_TIM_ConfigClockSource+0x120>
 8007958:	2b40      	cmp	r3, #64	; 0x40
 800795a:	d80b      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x6c>
 800795c:	2b10      	cmp	r3, #16
 800795e:	d073      	beq.n	8007a48 <HAL_TIM_ConfigClockSource+0x140>
 8007960:	2b10      	cmp	r3, #16
 8007962:	d802      	bhi.n	800796a <HAL_TIM_ConfigClockSource+0x62>
 8007964:	2b00      	cmp	r3, #0
 8007966:	d06f      	beq.n	8007a48 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007968:	e078      	b.n	8007a5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800796a:	2b20      	cmp	r3, #32
 800796c:	d06c      	beq.n	8007a48 <HAL_TIM_ConfigClockSource+0x140>
 800796e:	2b30      	cmp	r3, #48	; 0x30
 8007970:	d06a      	beq.n	8007a48 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007972:	e073      	b.n	8007a5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007974:	2b70      	cmp	r3, #112	; 0x70
 8007976:	d00d      	beq.n	8007994 <HAL_TIM_ConfigClockSource+0x8c>
 8007978:	2b70      	cmp	r3, #112	; 0x70
 800797a:	d804      	bhi.n	8007986 <HAL_TIM_ConfigClockSource+0x7e>
 800797c:	2b50      	cmp	r3, #80	; 0x50
 800797e:	d033      	beq.n	80079e8 <HAL_TIM_ConfigClockSource+0xe0>
 8007980:	2b60      	cmp	r3, #96	; 0x60
 8007982:	d041      	beq.n	8007a08 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007984:	e06a      	b.n	8007a5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800798a:	d066      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0x152>
 800798c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007990:	d017      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007992:	e063      	b.n	8007a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	6899      	ldr	r1, [r3, #8]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f000 fc0a 	bl	80081bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	609a      	str	r2, [r3, #8]
      break;
 80079c0:	e04c      	b.n	8007a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	6899      	ldr	r1, [r3, #8]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f000 fbf3 	bl	80081bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079e4:	609a      	str	r2, [r3, #8]
      break;
 80079e6:	e039      	b.n	8007a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	6859      	ldr	r1, [r3, #4]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	461a      	mov	r2, r3
 80079f6:	f000 fb67 	bl	80080c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2150      	movs	r1, #80	; 0x50
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fbc0 	bl	8008186 <TIM_ITRx_SetConfig>
      break;
 8007a06:	e029      	b.n	8007a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	6859      	ldr	r1, [r3, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	461a      	mov	r2, r3
 8007a16:	f000 fb86 	bl	8008126 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2160      	movs	r1, #96	; 0x60
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fbb0 	bl	8008186 <TIM_ITRx_SetConfig>
      break;
 8007a26:	e019      	b.n	8007a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	6859      	ldr	r1, [r3, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	461a      	mov	r2, r3
 8007a36:	f000 fb47 	bl	80080c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2140      	movs	r1, #64	; 0x40
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fba0 	bl	8008186 <TIM_ITRx_SetConfig>
      break;
 8007a46:	e009      	b.n	8007a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4619      	mov	r1, r3
 8007a52:	4610      	mov	r0, r2
 8007a54:	f000 fb97 	bl	8008186 <TIM_ITRx_SetConfig>
      break;
 8007a58:	e000      	b.n	8007a5c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	fffeff88 	.word	0xfffeff88

08007a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a40      	ldr	r2, [pc, #256]	; (8007be0 <TIM_Base_SetConfig+0x114>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d013      	beq.n	8007b0c <TIM_Base_SetConfig+0x40>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aea:	d00f      	beq.n	8007b0c <TIM_Base_SetConfig+0x40>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a3d      	ldr	r2, [pc, #244]	; (8007be4 <TIM_Base_SetConfig+0x118>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00b      	beq.n	8007b0c <TIM_Base_SetConfig+0x40>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a3c      	ldr	r2, [pc, #240]	; (8007be8 <TIM_Base_SetConfig+0x11c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d007      	beq.n	8007b0c <TIM_Base_SetConfig+0x40>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a3b      	ldr	r2, [pc, #236]	; (8007bec <TIM_Base_SetConfig+0x120>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d003      	beq.n	8007b0c <TIM_Base_SetConfig+0x40>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a3a      	ldr	r2, [pc, #232]	; (8007bf0 <TIM_Base_SetConfig+0x124>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d108      	bne.n	8007b1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a2f      	ldr	r2, [pc, #188]	; (8007be0 <TIM_Base_SetConfig+0x114>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d02b      	beq.n	8007b7e <TIM_Base_SetConfig+0xb2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b2c:	d027      	beq.n	8007b7e <TIM_Base_SetConfig+0xb2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a2c      	ldr	r2, [pc, #176]	; (8007be4 <TIM_Base_SetConfig+0x118>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d023      	beq.n	8007b7e <TIM_Base_SetConfig+0xb2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2b      	ldr	r2, [pc, #172]	; (8007be8 <TIM_Base_SetConfig+0x11c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d01f      	beq.n	8007b7e <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a2a      	ldr	r2, [pc, #168]	; (8007bec <TIM_Base_SetConfig+0x120>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d01b      	beq.n	8007b7e <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a29      	ldr	r2, [pc, #164]	; (8007bf0 <TIM_Base_SetConfig+0x124>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d017      	beq.n	8007b7e <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a28      	ldr	r2, [pc, #160]	; (8007bf4 <TIM_Base_SetConfig+0x128>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d013      	beq.n	8007b7e <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a27      	ldr	r2, [pc, #156]	; (8007bf8 <TIM_Base_SetConfig+0x12c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d00f      	beq.n	8007b7e <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a26      	ldr	r2, [pc, #152]	; (8007bfc <TIM_Base_SetConfig+0x130>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00b      	beq.n	8007b7e <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a25      	ldr	r2, [pc, #148]	; (8007c00 <TIM_Base_SetConfig+0x134>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d007      	beq.n	8007b7e <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a24      	ldr	r2, [pc, #144]	; (8007c04 <TIM_Base_SetConfig+0x138>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d003      	beq.n	8007b7e <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a23      	ldr	r2, [pc, #140]	; (8007c08 <TIM_Base_SetConfig+0x13c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d108      	bne.n	8007b90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a0a      	ldr	r2, [pc, #40]	; (8007be0 <TIM_Base_SetConfig+0x114>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d003      	beq.n	8007bc4 <TIM_Base_SetConfig+0xf8>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a0c      	ldr	r2, [pc, #48]	; (8007bf0 <TIM_Base_SetConfig+0x124>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d103      	bne.n	8007bcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	691a      	ldr	r2, [r3, #16]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	615a      	str	r2, [r3, #20]
}
 8007bd2:	bf00      	nop
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	40010000 	.word	0x40010000
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40000800 	.word	0x40000800
 8007bec:	40000c00 	.word	0x40000c00
 8007bf0:	40010400 	.word	0x40010400
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	40014400 	.word	0x40014400
 8007bfc:	40014800 	.word	0x40014800
 8007c00:	40001800 	.word	0x40001800
 8007c04:	40001c00 	.word	0x40001c00
 8007c08:	40002000 	.word	0x40002000

08007c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f023 0201 	bic.w	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4b2b      	ldr	r3, [pc, #172]	; (8007ce4 <TIM_OC1_SetConfig+0xd8>)
 8007c38:	4013      	ands	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0303 	bic.w	r3, r3, #3
 8007c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f023 0302 	bic.w	r3, r3, #2
 8007c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a21      	ldr	r2, [pc, #132]	; (8007ce8 <TIM_OC1_SetConfig+0xdc>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <TIM_OC1_SetConfig+0x64>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a20      	ldr	r2, [pc, #128]	; (8007cec <TIM_OC1_SetConfig+0xe0>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10c      	bne.n	8007c8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f023 0308 	bic.w	r3, r3, #8
 8007c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f023 0304 	bic.w	r3, r3, #4
 8007c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a16      	ldr	r2, [pc, #88]	; (8007ce8 <TIM_OC1_SetConfig+0xdc>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d003      	beq.n	8007c9a <TIM_OC1_SetConfig+0x8e>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a15      	ldr	r2, [pc, #84]	; (8007cec <TIM_OC1_SetConfig+0xe0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d111      	bne.n	8007cbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	621a      	str	r2, [r3, #32]
}
 8007cd8:	bf00      	nop
 8007cda:	371c      	adds	r7, #28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	fffeff8f 	.word	0xfffeff8f
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40010400 	.word	0x40010400

08007cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f023 0210 	bic.w	r2, r3, #16
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4b2e      	ldr	r3, [pc, #184]	; (8007dd4 <TIM_OC2_SetConfig+0xe4>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	021b      	lsls	r3, r3, #8
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f023 0320 	bic.w	r3, r3, #32
 8007d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	011b      	lsls	r3, r3, #4
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a23      	ldr	r2, [pc, #140]	; (8007dd8 <TIM_OC2_SetConfig+0xe8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_OC2_SetConfig+0x68>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a22      	ldr	r2, [pc, #136]	; (8007ddc <TIM_OC2_SetConfig+0xec>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d10d      	bne.n	8007d74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a18      	ldr	r2, [pc, #96]	; (8007dd8 <TIM_OC2_SetConfig+0xe8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d003      	beq.n	8007d84 <TIM_OC2_SetConfig+0x94>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a17      	ldr	r2, [pc, #92]	; (8007ddc <TIM_OC2_SetConfig+0xec>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d113      	bne.n	8007dac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	621a      	str	r2, [r3, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	feff8fff 	.word	0xfeff8fff
 8007dd8:	40010000 	.word	0x40010000
 8007ddc:	40010400 	.word	0x40010400

08007de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	4b2d      	ldr	r3, [pc, #180]	; (8007ec0 <TIM_OC3_SetConfig+0xe0>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a22      	ldr	r2, [pc, #136]	; (8007ec4 <TIM_OC3_SetConfig+0xe4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d003      	beq.n	8007e46 <TIM_OC3_SetConfig+0x66>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a21      	ldr	r2, [pc, #132]	; (8007ec8 <TIM_OC3_SetConfig+0xe8>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d10d      	bne.n	8007e62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a17      	ldr	r2, [pc, #92]	; (8007ec4 <TIM_OC3_SetConfig+0xe4>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d003      	beq.n	8007e72 <TIM_OC3_SetConfig+0x92>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a16      	ldr	r2, [pc, #88]	; (8007ec8 <TIM_OC3_SetConfig+0xe8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d113      	bne.n	8007e9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	621a      	str	r2, [r3, #32]
}
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	fffeff8f 	.word	0xfffeff8f
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	40010400 	.word	0x40010400

08007ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4b1e      	ldr	r3, [pc, #120]	; (8007f70 <TIM_OC4_SetConfig+0xa4>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	021b      	lsls	r3, r3, #8
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	031b      	lsls	r3, r3, #12
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a13      	ldr	r2, [pc, #76]	; (8007f74 <TIM_OC4_SetConfig+0xa8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_OC4_SetConfig+0x68>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a12      	ldr	r2, [pc, #72]	; (8007f78 <TIM_OC4_SetConfig+0xac>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d109      	bne.n	8007f48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	019b      	lsls	r3, r3, #6
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	621a      	str	r2, [r3, #32]
}
 8007f62:	bf00      	nop
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	feff8fff 	.word	0xfeff8fff
 8007f74:	40010000 	.word	0x40010000
 8007f78:	40010400 	.word	0x40010400

08007f7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4b1b      	ldr	r3, [pc, #108]	; (8008014 <TIM_OC5_SetConfig+0x98>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	041b      	lsls	r3, r3, #16
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a12      	ldr	r2, [pc, #72]	; (8008018 <TIM_OC5_SetConfig+0x9c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d003      	beq.n	8007fda <TIM_OC5_SetConfig+0x5e>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a11      	ldr	r2, [pc, #68]	; (800801c <TIM_OC5_SetConfig+0xa0>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d109      	bne.n	8007fee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	621a      	str	r2, [r3, #32]
}
 8008008:	bf00      	nop
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	fffeff8f 	.word	0xfffeff8f
 8008018:	40010000 	.word	0x40010000
 800801c:	40010400 	.word	0x40010400

08008020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4b1c      	ldr	r3, [pc, #112]	; (80080bc <TIM_OC6_SetConfig+0x9c>)
 800804c:	4013      	ands	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	051b      	lsls	r3, r3, #20
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	4313      	orrs	r3, r2
 800806e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a13      	ldr	r2, [pc, #76]	; (80080c0 <TIM_OC6_SetConfig+0xa0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d003      	beq.n	8008080 <TIM_OC6_SetConfig+0x60>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a12      	ldr	r2, [pc, #72]	; (80080c4 <TIM_OC6_SetConfig+0xa4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d109      	bne.n	8008094 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008086:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	029b      	lsls	r3, r3, #10
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	621a      	str	r2, [r3, #32]
}
 80080ae:	bf00      	nop
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	feff8fff 	.word	0xfeff8fff
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40010400 	.word	0x40010400

080080c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	f023 0201 	bic.w	r2, r3, #1
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	011b      	lsls	r3, r3, #4
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f023 030a 	bic.w	r3, r3, #10
 8008104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008126:	b480      	push	{r7}
 8008128:	b087      	sub	sp, #28
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	f023 0210 	bic.w	r2, r3, #16
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	031b      	lsls	r3, r3, #12
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4313      	orrs	r3, r2
 800815a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008162:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	011b      	lsls	r3, r3, #4
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	4313      	orrs	r3, r2
 800816c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	621a      	str	r2, [r3, #32]
}
 800817a:	bf00      	nop
 800817c:	371c      	adds	r7, #28
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008186:	b480      	push	{r7}
 8008188:	b085      	sub	sp, #20
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	f043 0307 	orr.w	r3, r3, #7
 80081a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	609a      	str	r2, [r3, #8]
}
 80081b0:	bf00      	nop
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	021a      	lsls	r2, r3, #8
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	431a      	orrs	r2, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	609a      	str	r2, [r3, #8]
}
 80081f0:	bf00      	nop
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800820c:	2b01      	cmp	r3, #1
 800820e:	d101      	bne.n	8008214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008210:	2302      	movs	r3, #2
 8008212:	e06d      	b.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a30      	ldr	r2, [pc, #192]	; (80082fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d004      	beq.n	8008248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a2f      	ldr	r2, [pc, #188]	; (8008300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d108      	bne.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800824e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a20      	ldr	r2, [pc, #128]	; (80082fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d022      	beq.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008286:	d01d      	beq.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a1d      	ldr	r2, [pc, #116]	; (8008304 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d018      	beq.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a1c      	ldr	r2, [pc, #112]	; (8008308 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d013      	beq.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a1a      	ldr	r2, [pc, #104]	; (800830c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00e      	beq.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a15      	ldr	r2, [pc, #84]	; (8008300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d009      	beq.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a16      	ldr	r2, [pc, #88]	; (8008310 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d004      	beq.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a15      	ldr	r2, [pc, #84]	; (8008314 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d10c      	bne.n	80082de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	40010000 	.word	0x40010000
 8008300:	40010400 	.word	0x40010400
 8008304:	40000400 	.word	0x40000400
 8008308:	40000800 	.word	0x40000800
 800830c:	40000c00 	.word	0x40000c00
 8008310:	40014000 	.word	0x40014000
 8008314:	40001800 	.word	0x40001800

08008318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e040      	b.n	80083e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800836a:	2b00      	cmp	r3, #0
 800836c:	d106      	bne.n	800837c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7fa fa70 	bl	800285c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2224      	movs	r2, #36	; 0x24
 8008380:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0201 	bic.w	r2, r2, #1
 8008390:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f8be 	bl	8008514 <UART_SetConfig>
 8008398:	4603      	mov	r3, r0
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e022      	b.n	80083e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fb5c 	bl	8008a68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0201 	orr.w	r2, r2, #1
 80083de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fbe3 	bl	8008bac <UART_CheckIdleState>
 80083e6:	4603      	mov	r3, r0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08a      	sub	sp, #40	; 0x28
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	603b      	str	r3, [r7, #0]
 80083fc:	4613      	mov	r3, r2
 80083fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008404:	2b20      	cmp	r3, #32
 8008406:	d17f      	bne.n	8008508 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <HAL_UART_Transmit+0x24>
 800840e:	88fb      	ldrh	r3, [r7, #6]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e078      	b.n	800850a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800841e:	2b01      	cmp	r3, #1
 8008420:	d101      	bne.n	8008426 <HAL_UART_Transmit+0x36>
 8008422:	2302      	movs	r3, #2
 8008424:	e071      	b.n	800850a <HAL_UART_Transmit+0x11a>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2221      	movs	r2, #33	; 0x21
 8008438:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800843a:	f7fa fccb 	bl	8002dd4 <HAL_GetTick>
 800843e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	88fa      	ldrh	r2, [r7, #6]
 8008444:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	88fa      	ldrh	r2, [r7, #6]
 800844c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008458:	d108      	bne.n	800846c <HAL_UART_Transmit+0x7c>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d104      	bne.n	800846c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008462:	2300      	movs	r3, #0
 8008464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	61bb      	str	r3, [r7, #24]
 800846a:	e003      	b.n	8008474 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008470:	2300      	movs	r3, #0
 8008472:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800847c:	e02c      	b.n	80084d8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2200      	movs	r2, #0
 8008486:	2180      	movs	r1, #128	; 0x80
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 fbbe 	bl	8008c0a <UART_WaitOnFlagUntilTimeout>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e038      	b.n	800850a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10b      	bne.n	80084b6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	3302      	adds	r3, #2
 80084b2:	61bb      	str	r3, [r7, #24]
 80084b4:	e007      	b.n	80084c6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	781a      	ldrb	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	3301      	adds	r3, #1
 80084c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80084de:	b29b      	uxth	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1cc      	bne.n	800847e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2200      	movs	r2, #0
 80084ec:	2140      	movs	r1, #64	; 0x40
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 fb8b 	bl	8008c0a <UART_WaitOnFlagUntilTimeout>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e005      	b.n	800850a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2220      	movs	r2, #32
 8008502:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	e000      	b.n	800850a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008508:	2302      	movs	r3, #2
  }
}
 800850a:	4618      	mov	r0, r3
 800850c:	3720      	adds	r7, #32
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b088      	sub	sp, #32
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800851c:	2300      	movs	r3, #0
 800851e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	431a      	orrs	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	431a      	orrs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	4313      	orrs	r3, r2
 800853a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	4bb1      	ldr	r3, [pc, #708]	; (8008808 <UART_SetConfig+0x2f4>)
 8008544:	4013      	ands	r3, r2
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	6812      	ldr	r2, [r2, #0]
 800854a:	6939      	ldr	r1, [r7, #16]
 800854c:	430b      	orrs	r3, r1
 800854e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	430a      	orrs	r2, r1
 8008588:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a9f      	ldr	r2, [pc, #636]	; (800880c <UART_SetConfig+0x2f8>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d121      	bne.n	80085d8 <UART_SetConfig+0xc4>
 8008594:	4b9e      	ldr	r3, [pc, #632]	; (8008810 <UART_SetConfig+0x2fc>)
 8008596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859a:	f003 0303 	and.w	r3, r3, #3
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d816      	bhi.n	80085d0 <UART_SetConfig+0xbc>
 80085a2:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <UART_SetConfig+0x94>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	080085b9 	.word	0x080085b9
 80085ac:	080085c5 	.word	0x080085c5
 80085b0:	080085bf 	.word	0x080085bf
 80085b4:	080085cb 	.word	0x080085cb
 80085b8:	2301      	movs	r3, #1
 80085ba:	77fb      	strb	r3, [r7, #31]
 80085bc:	e151      	b.n	8008862 <UART_SetConfig+0x34e>
 80085be:	2302      	movs	r3, #2
 80085c0:	77fb      	strb	r3, [r7, #31]
 80085c2:	e14e      	b.n	8008862 <UART_SetConfig+0x34e>
 80085c4:	2304      	movs	r3, #4
 80085c6:	77fb      	strb	r3, [r7, #31]
 80085c8:	e14b      	b.n	8008862 <UART_SetConfig+0x34e>
 80085ca:	2308      	movs	r3, #8
 80085cc:	77fb      	strb	r3, [r7, #31]
 80085ce:	e148      	b.n	8008862 <UART_SetConfig+0x34e>
 80085d0:	2310      	movs	r3, #16
 80085d2:	77fb      	strb	r3, [r7, #31]
 80085d4:	bf00      	nop
 80085d6:	e144      	b.n	8008862 <UART_SetConfig+0x34e>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a8d      	ldr	r2, [pc, #564]	; (8008814 <UART_SetConfig+0x300>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d134      	bne.n	800864c <UART_SetConfig+0x138>
 80085e2:	4b8b      	ldr	r3, [pc, #556]	; (8008810 <UART_SetConfig+0x2fc>)
 80085e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e8:	f003 030c 	and.w	r3, r3, #12
 80085ec:	2b0c      	cmp	r3, #12
 80085ee:	d829      	bhi.n	8008644 <UART_SetConfig+0x130>
 80085f0:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <UART_SetConfig+0xe4>)
 80085f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f6:	bf00      	nop
 80085f8:	0800862d 	.word	0x0800862d
 80085fc:	08008645 	.word	0x08008645
 8008600:	08008645 	.word	0x08008645
 8008604:	08008645 	.word	0x08008645
 8008608:	08008639 	.word	0x08008639
 800860c:	08008645 	.word	0x08008645
 8008610:	08008645 	.word	0x08008645
 8008614:	08008645 	.word	0x08008645
 8008618:	08008633 	.word	0x08008633
 800861c:	08008645 	.word	0x08008645
 8008620:	08008645 	.word	0x08008645
 8008624:	08008645 	.word	0x08008645
 8008628:	0800863f 	.word	0x0800863f
 800862c:	2300      	movs	r3, #0
 800862e:	77fb      	strb	r3, [r7, #31]
 8008630:	e117      	b.n	8008862 <UART_SetConfig+0x34e>
 8008632:	2302      	movs	r3, #2
 8008634:	77fb      	strb	r3, [r7, #31]
 8008636:	e114      	b.n	8008862 <UART_SetConfig+0x34e>
 8008638:	2304      	movs	r3, #4
 800863a:	77fb      	strb	r3, [r7, #31]
 800863c:	e111      	b.n	8008862 <UART_SetConfig+0x34e>
 800863e:	2308      	movs	r3, #8
 8008640:	77fb      	strb	r3, [r7, #31]
 8008642:	e10e      	b.n	8008862 <UART_SetConfig+0x34e>
 8008644:	2310      	movs	r3, #16
 8008646:	77fb      	strb	r3, [r7, #31]
 8008648:	bf00      	nop
 800864a:	e10a      	b.n	8008862 <UART_SetConfig+0x34e>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a71      	ldr	r2, [pc, #452]	; (8008818 <UART_SetConfig+0x304>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d120      	bne.n	8008698 <UART_SetConfig+0x184>
 8008656:	4b6e      	ldr	r3, [pc, #440]	; (8008810 <UART_SetConfig+0x2fc>)
 8008658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008660:	2b10      	cmp	r3, #16
 8008662:	d00f      	beq.n	8008684 <UART_SetConfig+0x170>
 8008664:	2b10      	cmp	r3, #16
 8008666:	d802      	bhi.n	800866e <UART_SetConfig+0x15a>
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <UART_SetConfig+0x164>
 800866c:	e010      	b.n	8008690 <UART_SetConfig+0x17c>
 800866e:	2b20      	cmp	r3, #32
 8008670:	d005      	beq.n	800867e <UART_SetConfig+0x16a>
 8008672:	2b30      	cmp	r3, #48	; 0x30
 8008674:	d009      	beq.n	800868a <UART_SetConfig+0x176>
 8008676:	e00b      	b.n	8008690 <UART_SetConfig+0x17c>
 8008678:	2300      	movs	r3, #0
 800867a:	77fb      	strb	r3, [r7, #31]
 800867c:	e0f1      	b.n	8008862 <UART_SetConfig+0x34e>
 800867e:	2302      	movs	r3, #2
 8008680:	77fb      	strb	r3, [r7, #31]
 8008682:	e0ee      	b.n	8008862 <UART_SetConfig+0x34e>
 8008684:	2304      	movs	r3, #4
 8008686:	77fb      	strb	r3, [r7, #31]
 8008688:	e0eb      	b.n	8008862 <UART_SetConfig+0x34e>
 800868a:	2308      	movs	r3, #8
 800868c:	77fb      	strb	r3, [r7, #31]
 800868e:	e0e8      	b.n	8008862 <UART_SetConfig+0x34e>
 8008690:	2310      	movs	r3, #16
 8008692:	77fb      	strb	r3, [r7, #31]
 8008694:	bf00      	nop
 8008696:	e0e4      	b.n	8008862 <UART_SetConfig+0x34e>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a5f      	ldr	r2, [pc, #380]	; (800881c <UART_SetConfig+0x308>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d120      	bne.n	80086e4 <UART_SetConfig+0x1d0>
 80086a2:	4b5b      	ldr	r3, [pc, #364]	; (8008810 <UART_SetConfig+0x2fc>)
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086ac:	2b40      	cmp	r3, #64	; 0x40
 80086ae:	d00f      	beq.n	80086d0 <UART_SetConfig+0x1bc>
 80086b0:	2b40      	cmp	r3, #64	; 0x40
 80086b2:	d802      	bhi.n	80086ba <UART_SetConfig+0x1a6>
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <UART_SetConfig+0x1b0>
 80086b8:	e010      	b.n	80086dc <UART_SetConfig+0x1c8>
 80086ba:	2b80      	cmp	r3, #128	; 0x80
 80086bc:	d005      	beq.n	80086ca <UART_SetConfig+0x1b6>
 80086be:	2bc0      	cmp	r3, #192	; 0xc0
 80086c0:	d009      	beq.n	80086d6 <UART_SetConfig+0x1c2>
 80086c2:	e00b      	b.n	80086dc <UART_SetConfig+0x1c8>
 80086c4:	2300      	movs	r3, #0
 80086c6:	77fb      	strb	r3, [r7, #31]
 80086c8:	e0cb      	b.n	8008862 <UART_SetConfig+0x34e>
 80086ca:	2302      	movs	r3, #2
 80086cc:	77fb      	strb	r3, [r7, #31]
 80086ce:	e0c8      	b.n	8008862 <UART_SetConfig+0x34e>
 80086d0:	2304      	movs	r3, #4
 80086d2:	77fb      	strb	r3, [r7, #31]
 80086d4:	e0c5      	b.n	8008862 <UART_SetConfig+0x34e>
 80086d6:	2308      	movs	r3, #8
 80086d8:	77fb      	strb	r3, [r7, #31]
 80086da:	e0c2      	b.n	8008862 <UART_SetConfig+0x34e>
 80086dc:	2310      	movs	r3, #16
 80086de:	77fb      	strb	r3, [r7, #31]
 80086e0:	bf00      	nop
 80086e2:	e0be      	b.n	8008862 <UART_SetConfig+0x34e>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a4d      	ldr	r2, [pc, #308]	; (8008820 <UART_SetConfig+0x30c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d124      	bne.n	8008738 <UART_SetConfig+0x224>
 80086ee:	4b48      	ldr	r3, [pc, #288]	; (8008810 <UART_SetConfig+0x2fc>)
 80086f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086fc:	d012      	beq.n	8008724 <UART_SetConfig+0x210>
 80086fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008702:	d802      	bhi.n	800870a <UART_SetConfig+0x1f6>
 8008704:	2b00      	cmp	r3, #0
 8008706:	d007      	beq.n	8008718 <UART_SetConfig+0x204>
 8008708:	e012      	b.n	8008730 <UART_SetConfig+0x21c>
 800870a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800870e:	d006      	beq.n	800871e <UART_SetConfig+0x20a>
 8008710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008714:	d009      	beq.n	800872a <UART_SetConfig+0x216>
 8008716:	e00b      	b.n	8008730 <UART_SetConfig+0x21c>
 8008718:	2300      	movs	r3, #0
 800871a:	77fb      	strb	r3, [r7, #31]
 800871c:	e0a1      	b.n	8008862 <UART_SetConfig+0x34e>
 800871e:	2302      	movs	r3, #2
 8008720:	77fb      	strb	r3, [r7, #31]
 8008722:	e09e      	b.n	8008862 <UART_SetConfig+0x34e>
 8008724:	2304      	movs	r3, #4
 8008726:	77fb      	strb	r3, [r7, #31]
 8008728:	e09b      	b.n	8008862 <UART_SetConfig+0x34e>
 800872a:	2308      	movs	r3, #8
 800872c:	77fb      	strb	r3, [r7, #31]
 800872e:	e098      	b.n	8008862 <UART_SetConfig+0x34e>
 8008730:	2310      	movs	r3, #16
 8008732:	77fb      	strb	r3, [r7, #31]
 8008734:	bf00      	nop
 8008736:	e094      	b.n	8008862 <UART_SetConfig+0x34e>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a39      	ldr	r2, [pc, #228]	; (8008824 <UART_SetConfig+0x310>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d124      	bne.n	800878c <UART_SetConfig+0x278>
 8008742:	4b33      	ldr	r3, [pc, #204]	; (8008810 <UART_SetConfig+0x2fc>)
 8008744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800874c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008750:	d012      	beq.n	8008778 <UART_SetConfig+0x264>
 8008752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008756:	d802      	bhi.n	800875e <UART_SetConfig+0x24a>
 8008758:	2b00      	cmp	r3, #0
 800875a:	d007      	beq.n	800876c <UART_SetConfig+0x258>
 800875c:	e012      	b.n	8008784 <UART_SetConfig+0x270>
 800875e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008762:	d006      	beq.n	8008772 <UART_SetConfig+0x25e>
 8008764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008768:	d009      	beq.n	800877e <UART_SetConfig+0x26a>
 800876a:	e00b      	b.n	8008784 <UART_SetConfig+0x270>
 800876c:	2301      	movs	r3, #1
 800876e:	77fb      	strb	r3, [r7, #31]
 8008770:	e077      	b.n	8008862 <UART_SetConfig+0x34e>
 8008772:	2302      	movs	r3, #2
 8008774:	77fb      	strb	r3, [r7, #31]
 8008776:	e074      	b.n	8008862 <UART_SetConfig+0x34e>
 8008778:	2304      	movs	r3, #4
 800877a:	77fb      	strb	r3, [r7, #31]
 800877c:	e071      	b.n	8008862 <UART_SetConfig+0x34e>
 800877e:	2308      	movs	r3, #8
 8008780:	77fb      	strb	r3, [r7, #31]
 8008782:	e06e      	b.n	8008862 <UART_SetConfig+0x34e>
 8008784:	2310      	movs	r3, #16
 8008786:	77fb      	strb	r3, [r7, #31]
 8008788:	bf00      	nop
 800878a:	e06a      	b.n	8008862 <UART_SetConfig+0x34e>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a25      	ldr	r2, [pc, #148]	; (8008828 <UART_SetConfig+0x314>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d124      	bne.n	80087e0 <UART_SetConfig+0x2cc>
 8008796:	4b1e      	ldr	r3, [pc, #120]	; (8008810 <UART_SetConfig+0x2fc>)
 8008798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800879c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80087a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a4:	d012      	beq.n	80087cc <UART_SetConfig+0x2b8>
 80087a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087aa:	d802      	bhi.n	80087b2 <UART_SetConfig+0x29e>
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d007      	beq.n	80087c0 <UART_SetConfig+0x2ac>
 80087b0:	e012      	b.n	80087d8 <UART_SetConfig+0x2c4>
 80087b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087b6:	d006      	beq.n	80087c6 <UART_SetConfig+0x2b2>
 80087b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087bc:	d009      	beq.n	80087d2 <UART_SetConfig+0x2be>
 80087be:	e00b      	b.n	80087d8 <UART_SetConfig+0x2c4>
 80087c0:	2300      	movs	r3, #0
 80087c2:	77fb      	strb	r3, [r7, #31]
 80087c4:	e04d      	b.n	8008862 <UART_SetConfig+0x34e>
 80087c6:	2302      	movs	r3, #2
 80087c8:	77fb      	strb	r3, [r7, #31]
 80087ca:	e04a      	b.n	8008862 <UART_SetConfig+0x34e>
 80087cc:	2304      	movs	r3, #4
 80087ce:	77fb      	strb	r3, [r7, #31]
 80087d0:	e047      	b.n	8008862 <UART_SetConfig+0x34e>
 80087d2:	2308      	movs	r3, #8
 80087d4:	77fb      	strb	r3, [r7, #31]
 80087d6:	e044      	b.n	8008862 <UART_SetConfig+0x34e>
 80087d8:	2310      	movs	r3, #16
 80087da:	77fb      	strb	r3, [r7, #31]
 80087dc:	bf00      	nop
 80087de:	e040      	b.n	8008862 <UART_SetConfig+0x34e>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a11      	ldr	r2, [pc, #68]	; (800882c <UART_SetConfig+0x318>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d139      	bne.n	800885e <UART_SetConfig+0x34a>
 80087ea:	4b09      	ldr	r3, [pc, #36]	; (8008810 <UART_SetConfig+0x2fc>)
 80087ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80087f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087f8:	d027      	beq.n	800884a <UART_SetConfig+0x336>
 80087fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087fe:	d817      	bhi.n	8008830 <UART_SetConfig+0x31c>
 8008800:	2b00      	cmp	r3, #0
 8008802:	d01c      	beq.n	800883e <UART_SetConfig+0x32a>
 8008804:	e027      	b.n	8008856 <UART_SetConfig+0x342>
 8008806:	bf00      	nop
 8008808:	efff69f3 	.word	0xefff69f3
 800880c:	40011000 	.word	0x40011000
 8008810:	40023800 	.word	0x40023800
 8008814:	40004400 	.word	0x40004400
 8008818:	40004800 	.word	0x40004800
 800881c:	40004c00 	.word	0x40004c00
 8008820:	40005000 	.word	0x40005000
 8008824:	40011400 	.word	0x40011400
 8008828:	40007800 	.word	0x40007800
 800882c:	40007c00 	.word	0x40007c00
 8008830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008834:	d006      	beq.n	8008844 <UART_SetConfig+0x330>
 8008836:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800883a:	d009      	beq.n	8008850 <UART_SetConfig+0x33c>
 800883c:	e00b      	b.n	8008856 <UART_SetConfig+0x342>
 800883e:	2300      	movs	r3, #0
 8008840:	77fb      	strb	r3, [r7, #31]
 8008842:	e00e      	b.n	8008862 <UART_SetConfig+0x34e>
 8008844:	2302      	movs	r3, #2
 8008846:	77fb      	strb	r3, [r7, #31]
 8008848:	e00b      	b.n	8008862 <UART_SetConfig+0x34e>
 800884a:	2304      	movs	r3, #4
 800884c:	77fb      	strb	r3, [r7, #31]
 800884e:	e008      	b.n	8008862 <UART_SetConfig+0x34e>
 8008850:	2308      	movs	r3, #8
 8008852:	77fb      	strb	r3, [r7, #31]
 8008854:	e005      	b.n	8008862 <UART_SetConfig+0x34e>
 8008856:	2310      	movs	r3, #16
 8008858:	77fb      	strb	r3, [r7, #31]
 800885a:	bf00      	nop
 800885c:	e001      	b.n	8008862 <UART_SetConfig+0x34e>
 800885e:	2310      	movs	r3, #16
 8008860:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800886a:	d17f      	bne.n	800896c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800886c:	7ffb      	ldrb	r3, [r7, #31]
 800886e:	2b08      	cmp	r3, #8
 8008870:	d85c      	bhi.n	800892c <UART_SetConfig+0x418>
 8008872:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <UART_SetConfig+0x364>)
 8008874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008878:	0800889d 	.word	0x0800889d
 800887c:	080088bd 	.word	0x080088bd
 8008880:	080088dd 	.word	0x080088dd
 8008884:	0800892d 	.word	0x0800892d
 8008888:	080088f5 	.word	0x080088f5
 800888c:	0800892d 	.word	0x0800892d
 8008890:	0800892d 	.word	0x0800892d
 8008894:	0800892d 	.word	0x0800892d
 8008898:	08008915 	.word	0x08008915
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800889c:	f7fd faa2 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 80088a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	005a      	lsls	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	441a      	add	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	61bb      	str	r3, [r7, #24]
        break;
 80088ba:	e03a      	b.n	8008932 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088bc:	f7fd faa6 	bl	8005e0c <HAL_RCC_GetPCLK2Freq>
 80088c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	005a      	lsls	r2, r3, #1
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	085b      	lsrs	r3, r3, #1
 80088cc:	441a      	add	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	61bb      	str	r3, [r7, #24]
        break;
 80088da:	e02a      	b.n	8008932 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	085a      	lsrs	r2, r3, #1
 80088e2:	4b5f      	ldr	r3, [pc, #380]	; (8008a60 <UART_SetConfig+0x54c>)
 80088e4:	4413      	add	r3, r2
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6852      	ldr	r2, [r2, #4]
 80088ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	61bb      	str	r3, [r7, #24]
        break;
 80088f2:	e01e      	b.n	8008932 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088f4:	f7fd f9b8 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 80088f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	005a      	lsls	r2, r3, #1
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	085b      	lsrs	r3, r3, #1
 8008904:	441a      	add	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	fbb2 f3f3 	udiv	r3, r2, r3
 800890e:	b29b      	uxth	r3, r3
 8008910:	61bb      	str	r3, [r7, #24]
        break;
 8008912:	e00e      	b.n	8008932 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	085b      	lsrs	r3, r3, #1
 800891a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	fbb2 f3f3 	udiv	r3, r2, r3
 8008926:	b29b      	uxth	r3, r3
 8008928:	61bb      	str	r3, [r7, #24]
        break;
 800892a:	e002      	b.n	8008932 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	75fb      	strb	r3, [r7, #23]
        break;
 8008930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2b0f      	cmp	r3, #15
 8008936:	d916      	bls.n	8008966 <UART_SetConfig+0x452>
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800893e:	d212      	bcs.n	8008966 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	b29b      	uxth	r3, r3
 8008944:	f023 030f 	bic.w	r3, r3, #15
 8008948:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	085b      	lsrs	r3, r3, #1
 800894e:	b29b      	uxth	r3, r3
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	b29a      	uxth	r2, r3
 8008956:	897b      	ldrh	r3, [r7, #10]
 8008958:	4313      	orrs	r3, r2
 800895a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	897a      	ldrh	r2, [r7, #10]
 8008962:	60da      	str	r2, [r3, #12]
 8008964:	e070      	b.n	8008a48 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	75fb      	strb	r3, [r7, #23]
 800896a:	e06d      	b.n	8008a48 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800896c:	7ffb      	ldrb	r3, [r7, #31]
 800896e:	2b08      	cmp	r3, #8
 8008970:	d859      	bhi.n	8008a26 <UART_SetConfig+0x512>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <UART_SetConfig+0x464>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	0800899d 	.word	0x0800899d
 800897c:	080089bb 	.word	0x080089bb
 8008980:	080089d9 	.word	0x080089d9
 8008984:	08008a27 	.word	0x08008a27
 8008988:	080089f1 	.word	0x080089f1
 800898c:	08008a27 	.word	0x08008a27
 8008990:	08008a27 	.word	0x08008a27
 8008994:	08008a27 	.word	0x08008a27
 8008998:	08008a0f 	.word	0x08008a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800899c:	f7fd fa22 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 80089a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	085a      	lsrs	r2, r3, #1
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	441a      	add	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	61bb      	str	r3, [r7, #24]
        break;
 80089b8:	e038      	b.n	8008a2c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089ba:	f7fd fa27 	bl	8005e0c <HAL_RCC_GetPCLK2Freq>
 80089be:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	085a      	lsrs	r2, r3, #1
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	441a      	add	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	61bb      	str	r3, [r7, #24]
        break;
 80089d6:	e029      	b.n	8008a2c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	085a      	lsrs	r2, r3, #1
 80089de:	4b21      	ldr	r3, [pc, #132]	; (8008a64 <UART_SetConfig+0x550>)
 80089e0:	4413      	add	r3, r2
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	6852      	ldr	r2, [r2, #4]
 80089e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	61bb      	str	r3, [r7, #24]
        break;
 80089ee:	e01d      	b.n	8008a2c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089f0:	f7fd f93a 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 80089f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	085a      	lsrs	r2, r3, #1
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	441a      	add	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	61bb      	str	r3, [r7, #24]
        break;
 8008a0c:	e00e      	b.n	8008a2c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	085b      	lsrs	r3, r3, #1
 8008a14:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	61bb      	str	r3, [r7, #24]
        break;
 8008a24:	e002      	b.n	8008a2c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	75fb      	strb	r3, [r7, #23]
        break;
 8008a2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	2b0f      	cmp	r3, #15
 8008a30:	d908      	bls.n	8008a44 <UART_SetConfig+0x530>
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a38:	d204      	bcs.n	8008a44 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	60da      	str	r2, [r3, #12]
 8008a42:	e001      	b.n	8008a48 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	01e84800 	.word	0x01e84800
 8008a64:	00f42400 	.word	0x00f42400

08008a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00a      	beq.n	8008a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00a      	beq.n	8008ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	f003 0304 	and.w	r3, r3, #4
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00a      	beq.n	8008ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	f003 0308 	and.w	r3, r3, #8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00a      	beq.n	8008af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	f003 0310 	and.w	r3, r3, #16
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00a      	beq.n	8008b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	f003 0320 	and.w	r3, r3, #32
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d01a      	beq.n	8008b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b66:	d10a      	bne.n	8008b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	605a      	str	r2, [r3, #4]
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af02      	add	r7, sp, #8
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008bba:	f7fa f90b 	bl	8002dd4 <HAL_GetTick>
 8008bbe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0308 	and.w	r3, r3, #8
 8008bca:	2b08      	cmp	r3, #8
 8008bcc:	d10e      	bne.n	8008bec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f814 	bl	8008c0a <UART_WaitOnFlagUntilTimeout>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e00a      	b.n	8008c02 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	603b      	str	r3, [r7, #0]
 8008c16:	4613      	mov	r3, r2
 8008c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c1a:	e05d      	b.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c22:	d059      	beq.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c24:	f7fa f8d6 	bl	8002dd4 <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d302      	bcc.n	8008c3a <UART_WaitOnFlagUntilTimeout+0x30>
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d11b      	bne.n	8008c72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c48:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 0201 	bic.w	r2, r2, #1
 8008c58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2220      	movs	r2, #32
 8008c64:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e042      	b.n	8008cf8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d02b      	beq.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c8e:	d123      	bne.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c98:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ca8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0201 	bic.w	r2, r2, #1
 8008cb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e00f      	b.n	8008cf8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	69da      	ldr	r2, [r3, #28]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2301      	moveq	r3, #1
 8008cea:	2300      	movne	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d092      	beq.n	8008c1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d00:	b084      	sub	sp, #16
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	f107 001c 	add.w	r0, r7, #28
 8008d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d120      	bne.n	8008d5a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68da      	ldr	r2, [r3, #12]
 8008d28:	4b20      	ldr	r3, [pc, #128]	; (8008dac <USB_CoreInit+0xac>)
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d105      	bne.n	8008d4e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa52 	bl	80091f8 <USB_CoreReset>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]
 8008d58:	e010      	b.n	8008d7c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa46 	bl	80091f8 <USB_CoreReset>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d10b      	bne.n	8008d9a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f043 0206 	orr.w	r2, r3, #6
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f043 0220 	orr.w	r2, r3, #32
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008da6:	b004      	add	sp, #16
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	ffbdffbf 	.word	0xffbdffbf

08008db0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f023 0201 	bic.w	r2, r3, #1
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008dea:	78fb      	ldrb	r3, [r7, #3]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d106      	bne.n	8008dfe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	60da      	str	r2, [r3, #12]
 8008dfc:	e00b      	b.n	8008e16 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008dfe:	78fb      	ldrb	r3, [r7, #3]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d106      	bne.n	8008e12 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	60da      	str	r2, [r3, #12]
 8008e10:	e001      	b.n	8008e16 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e003      	b.n	8008e1e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008e16:	2032      	movs	r0, #50	; 0x32
 8008e18:	f7f9 ffe8 	bl	8002dec <HAL_Delay>

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e28:	b084      	sub	sp, #16
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b086      	sub	sp, #24
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e42:	2300      	movs	r3, #0
 8008e44:	613b      	str	r3, [r7, #16]
 8008e46:	e009      	b.n	8008e5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	3340      	adds	r3, #64	; 0x40
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	2200      	movs	r2, #0
 8008e54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	613b      	str	r3, [r7, #16]
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	2b0e      	cmp	r3, #14
 8008e60:	d9f2      	bls.n	8008e48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d11c      	bne.n	8008ea2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e76:	f043 0302 	orr.w	r3, r3, #2
 8008e7a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	e005      	b.n	8008eae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec8:	461a      	mov	r2, r3
 8008eca:	680b      	ldr	r3, [r1, #0]
 8008ecc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d10c      	bne.n	8008eee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d104      	bne.n	8008ee4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008eda:	2100      	movs	r1, #0
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f959 	bl	8009194 <USB_SetDevSpeed>
 8008ee2:	e018      	b.n	8008f16 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f954 	bl	8009194 <USB_SetDevSpeed>
 8008eec:	e013      	b.n	8008f16 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	d10c      	bne.n	8008f0e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d104      	bne.n	8008f04 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008efa:	2100      	movs	r1, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f949 	bl	8009194 <USB_SetDevSpeed>
 8008f02:	e008      	b.n	8008f16 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f04:	2101      	movs	r1, #1
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f944 	bl	8009194 <USB_SetDevSpeed>
 8008f0c:	e003      	b.n	8008f16 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f0e:	2103      	movs	r1, #3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f93f 	bl	8009194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f16:	2110      	movs	r1, #16
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f8f3 	bl	8009104 <USB_FlushTxFifo>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f911 	bl	8009150 <USB_FlushRxFifo>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3e:	461a      	mov	r2, r3
 8008f40:	2300      	movs	r3, #0
 8008f42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f56:	461a      	mov	r2, r3
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	613b      	str	r3, [r7, #16]
 8008f60:	e043      	b.n	8008fea <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f78:	d118      	bne.n	8008fac <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10a      	bne.n	8008f96 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	e013      	b.n	8008fbe <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	e008      	b.n	8008fbe <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb8:	461a      	mov	r2, r3
 8008fba:	2300      	movs	r3, #0
 8008fbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fca:	461a      	mov	r2, r3
 8008fcc:	2300      	movs	r3, #0
 8008fce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	613b      	str	r3, [r7, #16]
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d3b7      	bcc.n	8008f62 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	613b      	str	r3, [r7, #16]
 8008ff6:	e043      	b.n	8009080 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800900a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800900e:	d118      	bne.n	8009042 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10a      	bne.n	800902c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009022:	461a      	mov	r2, r3
 8009024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	e013      	b.n	8009054 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009038:	461a      	mov	r2, r3
 800903a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	e008      	b.n	8009054 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	4413      	add	r3, r2
 800904a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904e:	461a      	mov	r2, r3
 8009050:	2300      	movs	r3, #0
 8009052:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009060:	461a      	mov	r2, r3
 8009062:	2300      	movs	r3, #0
 8009064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009072:	461a      	mov	r2, r3
 8009074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	3301      	adds	r3, #1
 800907e:	613b      	str	r3, [r7, #16]
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	429a      	cmp	r2, r3
 8009086:	d3b7      	bcc.n	8008ff8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800909a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80090a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d105      	bne.n	80090bc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	f043 0210 	orr.w	r2, r3, #16
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	699a      	ldr	r2, [r3, #24]
 80090c0:	4b0e      	ldr	r3, [pc, #56]	; (80090fc <USB_DevInit+0x2d4>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80090c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d005      	beq.n	80090da <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	f043 0208 	orr.w	r2, r3, #8
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80090da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d105      	bne.n	80090ec <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	699a      	ldr	r2, [r3, #24]
 80090e4:	4b06      	ldr	r3, [pc, #24]	; (8009100 <USB_DevInit+0x2d8>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80090ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090f8:	b004      	add	sp, #16
 80090fa:	4770      	bx	lr
 80090fc:	803c3800 	.word	0x803c3800
 8009100:	40000004 	.word	0x40000004

08009104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	019b      	lsls	r3, r3, #6
 8009116:	f043 0220 	orr.w	r2, r3, #32
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	4a09      	ldr	r2, [pc, #36]	; (800914c <USB_FlushTxFifo+0x48>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d901      	bls.n	8009130 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e006      	b.n	800913e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b20      	cmp	r3, #32
 800913a:	d0f0      	beq.n	800911e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	00030d40 	.word	0x00030d40

08009150 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2210      	movs	r2, #16
 8009160:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4a09      	ldr	r2, [pc, #36]	; (8009190 <USB_FlushRxFifo+0x40>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d901      	bls.n	8009174 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e006      	b.n	8009182 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	f003 0310 	and.w	r3, r3, #16
 800917c:	2b10      	cmp	r3, #16
 800917e:	d0f0      	beq.n	8009162 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	00030d40 	.word	0x00030d40

08009194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	68f9      	ldr	r1, [r7, #12]
 80091b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091b4:	4313      	orrs	r3, r2
 80091b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b084      	sub	sp, #16
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091e0:	f043 0302 	orr.w	r3, r3, #2
 80091e4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80091e6:	2003      	movs	r0, #3
 80091e8:	f7f9 fe00 	bl	8002dec <HAL_Delay>

  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3301      	adds	r3, #1
 8009208:	60fb      	str	r3, [r7, #12]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4a13      	ldr	r2, [pc, #76]	; (800925c <USB_CoreReset+0x64>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d901      	bls.n	8009216 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e01b      	b.n	800924e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	daf2      	bge.n	8009204 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	f043 0201 	orr.w	r2, r3, #1
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3301      	adds	r3, #1
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4a09      	ldr	r2, [pc, #36]	; (800925c <USB_CoreReset+0x64>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d901      	bls.n	8009240 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e006      	b.n	800924e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b01      	cmp	r3, #1
 800924a:	d0f0      	beq.n	800922e <USB_CoreReset+0x36>

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	00030d40 	.word	0x00030d40

08009260 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009260:	b480      	push	{r7}
 8009262:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009264:	bf00      	nop
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
	...

08009270 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009276:	f3ef 8305 	mrs	r3, IPSR
 800927a:	60bb      	str	r3, [r7, #8]
  return(result);
 800927c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10f      	bne.n	80092a2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009282:	f3ef 8310 	mrs	r3, PRIMASK
 8009286:	607b      	str	r3, [r7, #4]
  return(result);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800928e:	f3ef 8311 	mrs	r3, BASEPRI
 8009292:	603b      	str	r3, [r7, #0]
  return(result);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d007      	beq.n	80092aa <osKernelInitialize+0x3a>
 800929a:	4b0e      	ldr	r3, [pc, #56]	; (80092d4 <osKernelInitialize+0x64>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d103      	bne.n	80092aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80092a2:	f06f 0305 	mvn.w	r3, #5
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	e00c      	b.n	80092c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80092aa:	4b0a      	ldr	r3, [pc, #40]	; (80092d4 <osKernelInitialize+0x64>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d105      	bne.n	80092be <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80092b2:	4b08      	ldr	r3, [pc, #32]	; (80092d4 <osKernelInitialize+0x64>)
 80092b4:	2201      	movs	r2, #1
 80092b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	e002      	b.n	80092c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80092be:	f04f 33ff 	mov.w	r3, #4294967295
 80092c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80092c4:	68fb      	ldr	r3, [r7, #12]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	200000d4 	.word	0x200000d4

080092d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092de:	f3ef 8305 	mrs	r3, IPSR
 80092e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80092e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10f      	bne.n	800930a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ea:	f3ef 8310 	mrs	r3, PRIMASK
 80092ee:	607b      	str	r3, [r7, #4]
  return(result);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d105      	bne.n	8009302 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092f6:	f3ef 8311 	mrs	r3, BASEPRI
 80092fa:	603b      	str	r3, [r7, #0]
  return(result);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d007      	beq.n	8009312 <osKernelStart+0x3a>
 8009302:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <osKernelStart+0x68>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d103      	bne.n	8009312 <osKernelStart+0x3a>
    stat = osErrorISR;
 800930a:	f06f 0305 	mvn.w	r3, #5
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	e010      	b.n	8009334 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009312:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <osKernelStart+0x68>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d109      	bne.n	800932e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800931a:	f7ff ffa1 	bl	8009260 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800931e:	4b08      	ldr	r3, [pc, #32]	; (8009340 <osKernelStart+0x68>)
 8009320:	2202      	movs	r2, #2
 8009322:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009324:	f001 fca4 	bl	800ac70 <vTaskStartScheduler>
      stat = osOK;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	e002      	b.n	8009334 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800932e:	f04f 33ff 	mov.w	r3, #4294967295
 8009332:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009334:	68fb      	ldr	r3, [r7, #12]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	200000d4 	.word	0x200000d4

08009344 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009344:	b580      	push	{r7, lr}
 8009346:	b090      	sub	sp, #64	; 0x40
 8009348:	af04      	add	r7, sp, #16
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009354:	f3ef 8305 	mrs	r3, IPSR
 8009358:	61fb      	str	r3, [r7, #28]
  return(result);
 800935a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800935c:	2b00      	cmp	r3, #0
 800935e:	f040 808f 	bne.w	8009480 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009362:	f3ef 8310 	mrs	r3, PRIMASK
 8009366:	61bb      	str	r3, [r7, #24]
  return(result);
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d105      	bne.n	800937a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800936e:	f3ef 8311 	mrs	r3, BASEPRI
 8009372:	617b      	str	r3, [r7, #20]
  return(result);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <osThreadNew+0x3e>
 800937a:	4b44      	ldr	r3, [pc, #272]	; (800948c <osThreadNew+0x148>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b02      	cmp	r3, #2
 8009380:	d07e      	beq.n	8009480 <osThreadNew+0x13c>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d07b      	beq.n	8009480 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009388:	2380      	movs	r3, #128	; 0x80
 800938a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800938c:	2318      	movs	r3, #24
 800938e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009394:	f04f 33ff 	mov.w	r3, #4294967295
 8009398:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d045      	beq.n	800942c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <osThreadNew+0x6a>
        name = attr->name;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d008      	beq.n	80093d4 <osThreadNew+0x90>
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	2b38      	cmp	r3, #56	; 0x38
 80093c6:	d805      	bhi.n	80093d4 <osThreadNew+0x90>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <osThreadNew+0x94>
        return (NULL);
 80093d4:	2300      	movs	r3, #0
 80093d6:	e054      	b.n	8009482 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	089b      	lsrs	r3, r3, #2
 80093e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00e      	beq.n	800940e <osThreadNew+0xca>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	2b5b      	cmp	r3, #91	; 0x5b
 80093f6:	d90a      	bls.n	800940e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d006      	beq.n	800940e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <osThreadNew+0xca>
        mem = 1;
 8009408:	2301      	movs	r3, #1
 800940a:	623b      	str	r3, [r7, #32]
 800940c:	e010      	b.n	8009430 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10c      	bne.n	8009430 <osThreadNew+0xec>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d108      	bne.n	8009430 <osThreadNew+0xec>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d104      	bne.n	8009430 <osThreadNew+0xec>
          mem = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	623b      	str	r3, [r7, #32]
 800942a:	e001      	b.n	8009430 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d110      	bne.n	8009458 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800943e:	9202      	str	r2, [sp, #8]
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800944a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f001 fa33 	bl	800a8b8 <xTaskCreateStatic>
 8009452:	4603      	mov	r3, r0
 8009454:	613b      	str	r3, [r7, #16]
 8009456:	e013      	b.n	8009480 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d110      	bne.n	8009480 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	b29a      	uxth	r2, r3
 8009462:	f107 0310 	add.w	r3, r7, #16
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f001 fa81 	bl	800a978 <xTaskCreate>
 8009476:	4603      	mov	r3, r0
 8009478:	2b01      	cmp	r3, #1
 800947a:	d001      	beq.n	8009480 <osThreadNew+0x13c>
          hTask = NULL;
 800947c:	2300      	movs	r3, #0
 800947e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009480:	693b      	ldr	r3, [r7, #16]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3730      	adds	r7, #48	; 0x30
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	200000d4 	.word	0x200000d4

08009490 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009498:	f3ef 8305 	mrs	r3, IPSR
 800949c:	613b      	str	r3, [r7, #16]
  return(result);
 800949e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10f      	bne.n	80094c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094a4:	f3ef 8310 	mrs	r3, PRIMASK
 80094a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d105      	bne.n	80094bc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094b0:	f3ef 8311 	mrs	r3, BASEPRI
 80094b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d007      	beq.n	80094cc <osDelay+0x3c>
 80094bc:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <osDelay+0x58>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d103      	bne.n	80094cc <osDelay+0x3c>
    stat = osErrorISR;
 80094c4:	f06f 0305 	mvn.w	r3, #5
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	e007      	b.n	80094dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 fb94 	bl	800ac04 <vTaskDelay>
    }
  }

  return (stat);
 80094dc:	697b      	ldr	r3, [r7, #20]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	200000d4 	.word	0x200000d4

080094ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	4a07      	ldr	r2, [pc, #28]	; (8009518 <vApplicationGetIdleTaskMemory+0x2c>)
 80094fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	4a06      	ldr	r2, [pc, #24]	; (800951c <vApplicationGetIdleTaskMemory+0x30>)
 8009502:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2280      	movs	r2, #128	; 0x80
 8009508:	601a      	str	r2, [r3, #0]
}
 800950a:	bf00      	nop
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	200000d8 	.word	0x200000d8
 800951c:	20000134 	.word	0x20000134

08009520 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4a07      	ldr	r2, [pc, #28]	; (800954c <vApplicationGetTimerTaskMemory+0x2c>)
 8009530:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	4a06      	ldr	r2, [pc, #24]	; (8009550 <vApplicationGetTimerTaskMemory+0x30>)
 8009536:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800953e:	601a      	str	r2, [r3, #0]
}
 8009540:	bf00      	nop
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	20000334 	.word	0x20000334
 8009550:	20000390 	.word	0x20000390

08009554 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08a      	sub	sp, #40	; 0x28
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800955c:	2300      	movs	r3, #0
 800955e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009560:	f001 fbee 	bl	800ad40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009564:	4b5a      	ldr	r3, [pc, #360]	; (80096d0 <pvPortMalloc+0x17c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800956c:	f000 f916 	bl	800979c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009570:	4b58      	ldr	r3, [pc, #352]	; (80096d4 <pvPortMalloc+0x180>)
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4013      	ands	r3, r2
 8009578:	2b00      	cmp	r3, #0
 800957a:	f040 8090 	bne.w	800969e <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01e      	beq.n	80095c2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009584:	2208      	movs	r2, #8
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4413      	add	r3, r2
 800958a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f003 0307 	and.w	r3, r3, #7
 8009592:	2b00      	cmp	r3, #0
 8009594:	d015      	beq.n	80095c2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f023 0307 	bic.w	r3, r3, #7
 800959c:	3308      	adds	r3, #8
 800959e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f003 0307 	and.w	r3, r3, #7
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00b      	beq.n	80095c2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	b672      	cpsid	i
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	b662      	cpsie	i
 80095be:	617b      	str	r3, [r7, #20]
 80095c0:	e7fe      	b.n	80095c0 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d06a      	beq.n	800969e <pvPortMalloc+0x14a>
 80095c8:	4b43      	ldr	r3, [pc, #268]	; (80096d8 <pvPortMalloc+0x184>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d865      	bhi.n	800969e <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095d2:	4b42      	ldr	r3, [pc, #264]	; (80096dc <pvPortMalloc+0x188>)
 80095d4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095d6:	4b41      	ldr	r3, [pc, #260]	; (80096dc <pvPortMalloc+0x188>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095dc:	e004      	b.n	80095e8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d903      	bls.n	80095fa <pvPortMalloc+0xa6>
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1f1      	bne.n	80095de <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095fa:	4b35      	ldr	r3, [pc, #212]	; (80096d0 <pvPortMalloc+0x17c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009600:	429a      	cmp	r2, r3
 8009602:	d04c      	beq.n	800969e <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2208      	movs	r2, #8
 800960a:	4413      	add	r3, r2
 800960c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	1ad2      	subs	r2, r2, r3
 800961e:	2308      	movs	r3, #8
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	429a      	cmp	r2, r3
 8009624:	d920      	bls.n	8009668 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4413      	add	r3, r2
 800962c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	f003 0307 	and.w	r3, r3, #7
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00b      	beq.n	8009650 <pvPortMalloc+0xfc>
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	b672      	cpsid	i
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	b662      	cpsie	i
 800964c:	613b      	str	r3, [r7, #16]
 800964e:	e7fe      	b.n	800964e <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	1ad2      	subs	r2, r2, r3
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009662:	69b8      	ldr	r0, [r7, #24]
 8009664:	f000 f8fc 	bl	8009860 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009668:	4b1b      	ldr	r3, [pc, #108]	; (80096d8 <pvPortMalloc+0x184>)
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	4a19      	ldr	r2, [pc, #100]	; (80096d8 <pvPortMalloc+0x184>)
 8009674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009676:	4b18      	ldr	r3, [pc, #96]	; (80096d8 <pvPortMalloc+0x184>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	4b19      	ldr	r3, [pc, #100]	; (80096e0 <pvPortMalloc+0x18c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d203      	bcs.n	800968a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009682:	4b15      	ldr	r3, [pc, #84]	; (80096d8 <pvPortMalloc+0x184>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a16      	ldr	r2, [pc, #88]	; (80096e0 <pvPortMalloc+0x18c>)
 8009688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <pvPortMalloc+0x180>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	431a      	orrs	r2, r3
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800969e:	f001 fb5d 	bl	800ad5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	f003 0307 	and.w	r3, r3, #7
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00b      	beq.n	80096c4 <pvPortMalloc+0x170>
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	b672      	cpsid	i
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	b662      	cpsie	i
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	e7fe      	b.n	80096c2 <pvPortMalloc+0x16e>
	return pvReturn;
 80096c4:	69fb      	ldr	r3, [r7, #28]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3728      	adds	r7, #40	; 0x28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20004398 	.word	0x20004398
 80096d4:	200043a4 	.word	0x200043a4
 80096d8:	2000439c 	.word	0x2000439c
 80096dc:	20004390 	.word	0x20004390
 80096e0:	200043a0 	.word	0x200043a0

080096e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d04a      	beq.n	800978c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096f6:	2308      	movs	r3, #8
 80096f8:	425b      	negs	r3, r3
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	4413      	add	r3, r2
 80096fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	4b22      	ldr	r3, [pc, #136]	; (8009794 <vPortFree+0xb0>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4013      	ands	r3, r2
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10b      	bne.n	800972a <vPortFree+0x46>
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	b672      	cpsid	i
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	b662      	cpsie	i
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	e7fe      	b.n	8009728 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00b      	beq.n	800974a <vPortFree+0x66>
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	b672      	cpsid	i
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	b662      	cpsie	i
 8009746:	60bb      	str	r3, [r7, #8]
 8009748:	e7fe      	b.n	8009748 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	4b11      	ldr	r3, [pc, #68]	; (8009794 <vPortFree+0xb0>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4013      	ands	r3, r2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d019      	beq.n	800978c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d115      	bne.n	800978c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <vPortFree+0xb0>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	43db      	mvns	r3, r3
 800976a:	401a      	ands	r2, r3
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009770:	f001 fae6 	bl	800ad40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	4b07      	ldr	r3, [pc, #28]	; (8009798 <vPortFree+0xb4>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4413      	add	r3, r2
 800977e:	4a06      	ldr	r2, [pc, #24]	; (8009798 <vPortFree+0xb4>)
 8009780:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009782:	6938      	ldr	r0, [r7, #16]
 8009784:	f000 f86c 	bl	8009860 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009788:	f001 fae8 	bl	800ad5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800978c:	bf00      	nop
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	200043a4 	.word	0x200043a4
 8009798:	2000439c 	.word	0x2000439c

0800979c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80097a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097a8:	4b27      	ldr	r3, [pc, #156]	; (8009848 <prvHeapInit+0xac>)
 80097aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00c      	beq.n	80097d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3307      	adds	r3, #7
 80097ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 0307 	bic.w	r3, r3, #7
 80097c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	4a1f      	ldr	r2, [pc, #124]	; (8009848 <prvHeapInit+0xac>)
 80097cc:	4413      	add	r3, r2
 80097ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097d4:	4a1d      	ldr	r2, [pc, #116]	; (800984c <prvHeapInit+0xb0>)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097da:	4b1c      	ldr	r3, [pc, #112]	; (800984c <prvHeapInit+0xb0>)
 80097dc:	2200      	movs	r2, #0
 80097de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	4413      	add	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097e8:	2208      	movs	r2, #8
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	1a9b      	subs	r3, r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0307 	bic.w	r3, r3, #7
 80097f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4a15      	ldr	r2, [pc, #84]	; (8009850 <prvHeapInit+0xb4>)
 80097fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097fe:	4b14      	ldr	r3, [pc, #80]	; (8009850 <prvHeapInit+0xb4>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2200      	movs	r2, #0
 8009804:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009806:	4b12      	ldr	r3, [pc, #72]	; (8009850 <prvHeapInit+0xb4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800981c:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <prvHeapInit+0xb4>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	4a0a      	ldr	r2, [pc, #40]	; (8009854 <prvHeapInit+0xb8>)
 800982a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4a09      	ldr	r2, [pc, #36]	; (8009858 <prvHeapInit+0xbc>)
 8009832:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009834:	4b09      	ldr	r3, [pc, #36]	; (800985c <prvHeapInit+0xc0>)
 8009836:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800983a:	601a      	str	r2, [r3, #0]
}
 800983c:	bf00      	nop
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	20000790 	.word	0x20000790
 800984c:	20004390 	.word	0x20004390
 8009850:	20004398 	.word	0x20004398
 8009854:	200043a0 	.word	0x200043a0
 8009858:	2000439c 	.word	0x2000439c
 800985c:	200043a4 	.word	0x200043a4

08009860 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009868:	4b28      	ldr	r3, [pc, #160]	; (800990c <prvInsertBlockIntoFreeList+0xac>)
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	e002      	b.n	8009874 <prvInsertBlockIntoFreeList+0x14>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	429a      	cmp	r2, r3
 800987c:	d8f7      	bhi.n	800986e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	4413      	add	r3, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	429a      	cmp	r2, r3
 800988e:	d108      	bne.n	80098a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	441a      	add	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	441a      	add	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d118      	bne.n	80098e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b15      	ldr	r3, [pc, #84]	; (8009910 <prvInsertBlockIntoFreeList+0xb0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d00d      	beq.n	80098de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	441a      	add	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	e008      	b.n	80098f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098de:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <prvInsertBlockIntoFreeList+0xb0>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	e003      	b.n	80098f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d002      	beq.n	80098fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098fe:	bf00      	nop
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	20004390 	.word	0x20004390
 8009910:	20004398 	.word	0x20004398

08009914 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f103 0208 	add.w	r2, r3, #8
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f04f 32ff 	mov.w	r2, #4294967295
 800992c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f103 0208 	add.w	r2, r3, #8
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f103 0208 	add.w	r2, r3, #8
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009962:	bf00      	nop
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	689a      	ldr	r2, [r3, #8]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	601a      	str	r2, [r3, #0]
}
 80099aa:	bf00      	nop
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099cc:	d103      	bne.n	80099d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	e00c      	b.n	80099f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	3308      	adds	r3, #8
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	e002      	b.n	80099e4 <vListInsert+0x2e>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d2f6      	bcs.n	80099de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	601a      	str	r2, [r3, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	6892      	ldr	r2, [r2, #8]
 8009a3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6852      	ldr	r2, [r2, #4]
 8009a48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d103      	bne.n	8009a5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	1e5a      	subs	r2, r3, #1
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	3b04      	subs	r3, #4
 8009a8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3b04      	subs	r3, #4
 8009a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	f023 0201 	bic.w	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3b04      	subs	r3, #4
 8009aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009aac:	4a0c      	ldr	r2, [pc, #48]	; (8009ae0 <pxPortInitialiseStack+0x64>)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3b14      	subs	r3, #20
 8009ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3b04      	subs	r3, #4
 8009ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f06f 0202 	mvn.w	r2, #2
 8009aca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3b20      	subs	r3, #32
 8009ad0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	08009ae5 	.word	0x08009ae5

08009ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009aee:	4b13      	ldr	r3, [pc, #76]	; (8009b3c <prvTaskExitError+0x58>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af6:	d00b      	beq.n	8009b10 <prvTaskExitError+0x2c>
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	b672      	cpsid	i
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	b662      	cpsie	i
 8009b0c:	60fb      	str	r3, [r7, #12]
 8009b0e:	e7fe      	b.n	8009b0e <prvTaskExitError+0x2a>
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	b672      	cpsid	i
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	b662      	cpsie	i
 8009b24:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b26:	bf00      	nop
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0fc      	beq.n	8009b28 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b2e:	bf00      	nop
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	20000030 	.word	0x20000030

08009b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b40:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <pxCurrentTCBConst2>)
 8009b42:	6819      	ldr	r1, [r3, #0]
 8009b44:	6808      	ldr	r0, [r1, #0]
 8009b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	f380 8809 	msr	PSP, r0
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f04f 0000 	mov.w	r0, #0
 8009b56:	f380 8811 	msr	BASEPRI, r0
 8009b5a:	4770      	bx	lr
 8009b5c:	f3af 8000 	nop.w

08009b60 <pxCurrentTCBConst2>:
 8009b60:	200043b0 	.word	0x200043b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop

08009b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b68:	4808      	ldr	r0, [pc, #32]	; (8009b8c <prvPortStartFirstTask+0x24>)
 8009b6a:	6800      	ldr	r0, [r0, #0]
 8009b6c:	6800      	ldr	r0, [r0, #0]
 8009b6e:	f380 8808 	msr	MSP, r0
 8009b72:	f04f 0000 	mov.w	r0, #0
 8009b76:	f380 8814 	msr	CONTROL, r0
 8009b7a:	b662      	cpsie	i
 8009b7c:	b661      	cpsie	f
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	df00      	svc	0
 8009b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b8a:	bf00      	nop
 8009b8c:	e000ed08 	.word	0xe000ed08

08009b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b96:	4b36      	ldr	r3, [pc, #216]	; (8009c70 <xPortStartScheduler+0xe0>)
 8009b98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	22ff      	movs	r2, #255	; 0xff
 8009ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	4b2e      	ldr	r3, [pc, #184]	; (8009c74 <xPortStartScheduler+0xe4>)
 8009bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bbe:	4b2e      	ldr	r3, [pc, #184]	; (8009c78 <xPortStartScheduler+0xe8>)
 8009bc0:	2207      	movs	r2, #7
 8009bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bc4:	e009      	b.n	8009bda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009bc6:	4b2c      	ldr	r3, [pc, #176]	; (8009c78 <xPortStartScheduler+0xe8>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	4a2a      	ldr	r2, [pc, #168]	; (8009c78 <xPortStartScheduler+0xe8>)
 8009bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	005b      	lsls	r3, r3, #1
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be2:	2b80      	cmp	r3, #128	; 0x80
 8009be4:	d0ef      	beq.n	8009bc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009be6:	4b24      	ldr	r3, [pc, #144]	; (8009c78 <xPortStartScheduler+0xe8>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f1c3 0307 	rsb	r3, r3, #7
 8009bee:	2b04      	cmp	r3, #4
 8009bf0:	d00b      	beq.n	8009c0a <xPortStartScheduler+0x7a>
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	b672      	cpsid	i
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	b662      	cpsie	i
 8009c06:	60bb      	str	r3, [r7, #8]
 8009c08:	e7fe      	b.n	8009c08 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c0a:	4b1b      	ldr	r3, [pc, #108]	; (8009c78 <xPortStartScheduler+0xe8>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	021b      	lsls	r3, r3, #8
 8009c10:	4a19      	ldr	r2, [pc, #100]	; (8009c78 <xPortStartScheduler+0xe8>)
 8009c12:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c14:	4b18      	ldr	r3, [pc, #96]	; (8009c78 <xPortStartScheduler+0xe8>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c1c:	4a16      	ldr	r2, [pc, #88]	; (8009c78 <xPortStartScheduler+0xe8>)
 8009c1e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c28:	4b14      	ldr	r3, [pc, #80]	; (8009c7c <xPortStartScheduler+0xec>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a13      	ldr	r2, [pc, #76]	; (8009c7c <xPortStartScheduler+0xec>)
 8009c2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c32:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c34:	4b11      	ldr	r3, [pc, #68]	; (8009c7c <xPortStartScheduler+0xec>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a10      	ldr	r2, [pc, #64]	; (8009c7c <xPortStartScheduler+0xec>)
 8009c3a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c3e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c40:	f000 f8d4 	bl	8009dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c44:	4b0e      	ldr	r3, [pc, #56]	; (8009c80 <xPortStartScheduler+0xf0>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c4a:	f000 f8f3 	bl	8009e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c4e:	4b0d      	ldr	r3, [pc, #52]	; (8009c84 <xPortStartScheduler+0xf4>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a0c      	ldr	r2, [pc, #48]	; (8009c84 <xPortStartScheduler+0xf4>)
 8009c54:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c58:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c5a:	f7ff ff85 	bl	8009b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c5e:	f001 f9e5 	bl	800b02c <vTaskSwitchContext>
	prvTaskExitError();
 8009c62:	f7ff ff3f 	bl	8009ae4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	e000e400 	.word	0xe000e400
 8009c74:	200043a8 	.word	0x200043a8
 8009c78:	200043ac 	.word	0x200043ac
 8009c7c:	e000ed20 	.word	0xe000ed20
 8009c80:	20000030 	.word	0x20000030
 8009c84:	e000ef34 	.word	0xe000ef34

08009c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	b672      	cpsid	i
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	b662      	cpsie	i
 8009ca2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ca4:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <vPortEnterCritical+0x5c>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	4a0e      	ldr	r2, [pc, #56]	; (8009ce4 <vPortEnterCritical+0x5c>)
 8009cac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cae:	4b0d      	ldr	r3, [pc, #52]	; (8009ce4 <vPortEnterCritical+0x5c>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d110      	bne.n	8009cd8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <vPortEnterCritical+0x60>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00b      	beq.n	8009cd8 <vPortEnterCritical+0x50>
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	b672      	cpsid	i
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	b662      	cpsie	i
 8009cd4:	603b      	str	r3, [r7, #0]
 8009cd6:	e7fe      	b.n	8009cd6 <vPortEnterCritical+0x4e>
	}
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	20000030 	.word	0x20000030
 8009ce8:	e000ed04 	.word	0xe000ed04

08009cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009cf2:	4b12      	ldr	r3, [pc, #72]	; (8009d3c <vPortExitCritical+0x50>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10b      	bne.n	8009d12 <vPortExitCritical+0x26>
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	b672      	cpsid	i
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	b662      	cpsie	i
 8009d0e:	607b      	str	r3, [r7, #4]
 8009d10:	e7fe      	b.n	8009d10 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8009d12:	4b0a      	ldr	r3, [pc, #40]	; (8009d3c <vPortExitCritical+0x50>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3b01      	subs	r3, #1
 8009d18:	4a08      	ldr	r2, [pc, #32]	; (8009d3c <vPortExitCritical+0x50>)
 8009d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d1c:	4b07      	ldr	r3, [pc, #28]	; (8009d3c <vPortExitCritical+0x50>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d104      	bne.n	8009d2e <vPortExitCritical+0x42>
 8009d24:	2300      	movs	r3, #0
 8009d26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d2e:	bf00      	nop
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	20000030 	.word	0x20000030

08009d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d40:	f3ef 8009 	mrs	r0, PSP
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	4b15      	ldr	r3, [pc, #84]	; (8009da0 <pxCurrentTCBConst>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	f01e 0f10 	tst.w	lr, #16
 8009d50:	bf08      	it	eq
 8009d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5a:	6010      	str	r0, [r2, #0]
 8009d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d64:	b672      	cpsid	i
 8009d66:	f380 8811 	msr	BASEPRI, r0
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	b662      	cpsie	i
 8009d74:	f001 f95a 	bl	800b02c <vTaskSwitchContext>
 8009d78:	f04f 0000 	mov.w	r0, #0
 8009d7c:	f380 8811 	msr	BASEPRI, r0
 8009d80:	bc09      	pop	{r0, r3}
 8009d82:	6819      	ldr	r1, [r3, #0]
 8009d84:	6808      	ldr	r0, [r1, #0]
 8009d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8a:	f01e 0f10 	tst.w	lr, #16
 8009d8e:	bf08      	it	eq
 8009d90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d94:	f380 8809 	msr	PSP, r0
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop

08009da0 <pxCurrentTCBConst>:
 8009da0:	200043b0 	.word	0x200043b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop

08009da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	b672      	cpsid	i
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	b662      	cpsie	i
 8009dc2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009dc4:	f001 f878 	bl	800aeb8 <xTaskIncrementTick>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dce:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <SysTick_Handler+0x40>)
 8009dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd4:	601a      	str	r2, [r3, #0]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	e000ed04 	.word	0xe000ed04

08009dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009dec:	b480      	push	{r7}
 8009dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <vPortSetupTimerInterrupt+0x34>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009df6:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <vPortSetupTimerInterrupt+0x38>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dfc:	4b0a      	ldr	r3, [pc, #40]	; (8009e28 <vPortSetupTimerInterrupt+0x3c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <vPortSetupTimerInterrupt+0x40>)
 8009e02:	fba2 2303 	umull	r2, r3, r2, r3
 8009e06:	099b      	lsrs	r3, r3, #6
 8009e08:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <vPortSetupTimerInterrupt+0x44>)
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e0e:	4b04      	ldr	r3, [pc, #16]	; (8009e20 <vPortSetupTimerInterrupt+0x34>)
 8009e10:	2207      	movs	r2, #7
 8009e12:	601a      	str	r2, [r3, #0]
}
 8009e14:	bf00      	nop
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	e000e010 	.word	0xe000e010
 8009e24:	e000e018 	.word	0xe000e018
 8009e28:	20000024 	.word	0x20000024
 8009e2c:	10624dd3 	.word	0x10624dd3
 8009e30:	e000e014 	.word	0xe000e014

08009e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e44 <vPortEnableVFP+0x10>
 8009e38:	6801      	ldr	r1, [r0, #0]
 8009e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e3e:	6001      	str	r1, [r0, #0]
 8009e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e42:	bf00      	nop
 8009e44:	e000ed88 	.word	0xe000ed88

08009e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e4e:	f3ef 8305 	mrs	r3, IPSR
 8009e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b0f      	cmp	r3, #15
 8009e58:	d915      	bls.n	8009e86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e5a:	4a18      	ldr	r2, [pc, #96]	; (8009ebc <vPortValidateInterruptPriority+0x74>)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4413      	add	r3, r2
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e64:	4b16      	ldr	r3, [pc, #88]	; (8009ec0 <vPortValidateInterruptPriority+0x78>)
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	7afa      	ldrb	r2, [r7, #11]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d20b      	bcs.n	8009e86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e72:	b672      	cpsid	i
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	b662      	cpsie	i
 8009e82:	607b      	str	r3, [r7, #4]
 8009e84:	e7fe      	b.n	8009e84 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e86:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <vPortValidateInterruptPriority+0x7c>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e8e:	4b0e      	ldr	r3, [pc, #56]	; (8009ec8 <vPortValidateInterruptPriority+0x80>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d90b      	bls.n	8009eae <vPortValidateInterruptPriority+0x66>
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	b672      	cpsid	i
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	b662      	cpsie	i
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	e7fe      	b.n	8009eac <vPortValidateInterruptPriority+0x64>
	}
 8009eae:	bf00      	nop
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	e000e3f0 	.word	0xe000e3f0
 8009ec0:	200043a8 	.word	0x200043a8
 8009ec4:	e000ed0c 	.word	0xe000ed0c
 8009ec8:	200043ac 	.word	0x200043ac

08009ecc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10b      	bne.n	8009ef8 <xQueueGenericReset+0x2c>
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	b672      	cpsid	i
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	b662      	cpsie	i
 8009ef4:	60bb      	str	r3, [r7, #8]
 8009ef6:	e7fe      	b.n	8009ef6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8009ef8:	f7ff fec6 	bl	8009c88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f04:	68f9      	ldr	r1, [r7, #12]
 8009f06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f08:	fb01 f303 	mul.w	r3, r1, r3
 8009f0c:	441a      	add	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	68f9      	ldr	r1, [r7, #12]
 8009f2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f2e:	fb01 f303 	mul.w	r3, r1, r3
 8009f32:	441a      	add	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	22ff      	movs	r2, #255	; 0xff
 8009f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	22ff      	movs	r2, #255	; 0xff
 8009f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d114      	bne.n	8009f78 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d01a      	beq.n	8009f8c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3310      	adds	r3, #16
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 f916 	bl	800b18c <xTaskRemoveFromEventList>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d012      	beq.n	8009f8c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f66:	4b0d      	ldr	r3, [pc, #52]	; (8009f9c <xQueueGenericReset+0xd0>)
 8009f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	e009      	b.n	8009f8c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3310      	adds	r3, #16
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7ff fcc9 	bl	8009914 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3324      	adds	r3, #36	; 0x24
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7ff fcc4 	bl	8009914 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f8c:	f7ff feae 	bl	8009cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f90:	2301      	movs	r3, #1
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	e000ed04 	.word	0xe000ed04

08009fa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b08e      	sub	sp, #56	; 0x38
 8009fa4:	af02      	add	r7, sp, #8
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10b      	bne.n	8009fcc <xQueueGenericCreateStatic+0x2c>
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	b672      	cpsid	i
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	b662      	cpsie	i
 8009fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fca:	e7fe      	b.n	8009fca <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10b      	bne.n	8009fea <xQueueGenericCreateStatic+0x4a>
 8009fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd6:	b672      	cpsid	i
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	b662      	cpsie	i
 8009fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8009fe8:	e7fe      	b.n	8009fe8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d002      	beq.n	8009ff6 <xQueueGenericCreateStatic+0x56>
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <xQueueGenericCreateStatic+0x5a>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e000      	b.n	8009ffc <xQueueGenericCreateStatic+0x5c>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10b      	bne.n	800a018 <xQueueGenericCreateStatic+0x78>
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	b672      	cpsid	i
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	b662      	cpsie	i
 800a014:	623b      	str	r3, [r7, #32]
 800a016:	e7fe      	b.n	800a016 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d102      	bne.n	800a024 <xQueueGenericCreateStatic+0x84>
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <xQueueGenericCreateStatic+0x88>
 800a024:	2301      	movs	r3, #1
 800a026:	e000      	b.n	800a02a <xQueueGenericCreateStatic+0x8a>
 800a028:	2300      	movs	r3, #0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10b      	bne.n	800a046 <xQueueGenericCreateStatic+0xa6>
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	b672      	cpsid	i
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	b662      	cpsie	i
 800a042:	61fb      	str	r3, [r7, #28]
 800a044:	e7fe      	b.n	800a044 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a046:	2350      	movs	r3, #80	; 0x50
 800a048:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b50      	cmp	r3, #80	; 0x50
 800a04e:	d00b      	beq.n	800a068 <xQueueGenericCreateStatic+0xc8>
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	b672      	cpsid	i
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	b662      	cpsie	i
 800a064:	61bb      	str	r3, [r7, #24]
 800a066:	e7fe      	b.n	800a066 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a068:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00d      	beq.n	800a090 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a07c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	4613      	mov	r3, r2
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	68b9      	ldr	r1, [r7, #8]
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 f805 	bl	800a09a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a092:	4618      	mov	r0, r3
 800a094:	3730      	adds	r7, #48	; 0x30
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	607a      	str	r2, [r7, #4]
 800a0a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d103      	bne.n	800a0b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	e002      	b.n	800a0bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	69b8      	ldr	r0, [r7, #24]
 800a0cc:	f7ff fefe 	bl	8009ecc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	78fa      	ldrb	r2, [r7, #3]
 800a0d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0d8:	bf00      	nop
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08e      	sub	sp, #56	; 0x38
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
 800a0ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10b      	bne.n	800a114 <xQueueGenericSend+0x34>
 800a0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a100:	b672      	cpsid	i
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	b662      	cpsie	i
 800a110:	62bb      	str	r3, [r7, #40]	; 0x28
 800a112:	e7fe      	b.n	800a112 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d103      	bne.n	800a122 <xQueueGenericSend+0x42>
 800a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <xQueueGenericSend+0x46>
 800a122:	2301      	movs	r3, #1
 800a124:	e000      	b.n	800a128 <xQueueGenericSend+0x48>
 800a126:	2300      	movs	r3, #0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10b      	bne.n	800a144 <xQueueGenericSend+0x64>
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	b672      	cpsid	i
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	b662      	cpsie	i
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
 800a142:	e7fe      	b.n	800a142 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	2b02      	cmp	r3, #2
 800a148:	d103      	bne.n	800a152 <xQueueGenericSend+0x72>
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d101      	bne.n	800a156 <xQueueGenericSend+0x76>
 800a152:	2301      	movs	r3, #1
 800a154:	e000      	b.n	800a158 <xQueueGenericSend+0x78>
 800a156:	2300      	movs	r3, #0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10b      	bne.n	800a174 <xQueueGenericSend+0x94>
 800a15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a160:	b672      	cpsid	i
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	b662      	cpsie	i
 800a170:	623b      	str	r3, [r7, #32]
 800a172:	e7fe      	b.n	800a172 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a174:	f001 f9c8 	bl	800b508 <xTaskGetSchedulerState>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d102      	bne.n	800a184 <xQueueGenericSend+0xa4>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <xQueueGenericSend+0xa8>
 800a184:	2301      	movs	r3, #1
 800a186:	e000      	b.n	800a18a <xQueueGenericSend+0xaa>
 800a188:	2300      	movs	r3, #0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10b      	bne.n	800a1a6 <xQueueGenericSend+0xc6>
 800a18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a192:	b672      	cpsid	i
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	b662      	cpsie	i
 800a1a2:	61fb      	str	r3, [r7, #28]
 800a1a4:	e7fe      	b.n	800a1a4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1a6:	f7ff fd6f 	bl	8009c88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d302      	bcc.n	800a1bc <xQueueGenericSend+0xdc>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d129      	bne.n	800a210 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1bc:	683a      	ldr	r2, [r7, #0]
 800a1be:	68b9      	ldr	r1, [r7, #8]
 800a1c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1c2:	f000 fa0d 	bl	800a5e0 <prvCopyDataToQueue>
 800a1c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d010      	beq.n	800a1f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	3324      	adds	r3, #36	; 0x24
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 ffd9 	bl	800b18c <xTaskRemoveFromEventList>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d013      	beq.n	800a208 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a1e0:	4b3f      	ldr	r3, [pc, #252]	; (800a2e0 <xQueueGenericSend+0x200>)
 800a1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	e00a      	b.n	800a208 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1f8:	4b39      	ldr	r3, [pc, #228]	; (800a2e0 <xQueueGenericSend+0x200>)
 800a1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a208:	f7ff fd70 	bl	8009cec <vPortExitCritical>
				return pdPASS;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e063      	b.n	800a2d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d103      	bne.n	800a21e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a216:	f7ff fd69 	bl	8009cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a21a:	2300      	movs	r3, #0
 800a21c:	e05c      	b.n	800a2d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a220:	2b00      	cmp	r3, #0
 800a222:	d106      	bne.n	800a232 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a224:	f107 0314 	add.w	r3, r7, #20
 800a228:	4618      	mov	r0, r3
 800a22a:	f001 f813 	bl	800b254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a22e:	2301      	movs	r3, #1
 800a230:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a232:	f7ff fd5b 	bl	8009cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a236:	f000 fd83 	bl	800ad40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a23a:	f7ff fd25 	bl	8009c88 <vPortEnterCritical>
 800a23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a244:	b25b      	sxtb	r3, r3
 800a246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24a:	d103      	bne.n	800a254 <xQueueGenericSend+0x174>
 800a24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a25a:	b25b      	sxtb	r3, r3
 800a25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a260:	d103      	bne.n	800a26a <xQueueGenericSend+0x18a>
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a26a:	f7ff fd3f 	bl	8009cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a26e:	1d3a      	adds	r2, r7, #4
 800a270:	f107 0314 	add.w	r3, r7, #20
 800a274:	4611      	mov	r1, r2
 800a276:	4618      	mov	r0, r3
 800a278:	f001 f802 	bl	800b280 <xTaskCheckForTimeOut>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d124      	bne.n	800a2cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a284:	f000 faa4 	bl	800a7d0 <prvIsQueueFull>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d018      	beq.n	800a2c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	3310      	adds	r3, #16
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f000 ff26 	bl	800b0e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a29c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a29e:	f000 fa2f 	bl	800a700 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2a2:	f000 fd5b 	bl	800ad5c <xTaskResumeAll>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f47f af7c 	bne.w	800a1a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a2ae:	4b0c      	ldr	r3, [pc, #48]	; (800a2e0 <xQueueGenericSend+0x200>)
 800a2b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	e772      	b.n	800a1a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2c2:	f000 fa1d 	bl	800a700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2c6:	f000 fd49 	bl	800ad5c <xTaskResumeAll>
 800a2ca:	e76c      	b.n	800a1a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ce:	f000 fa17 	bl	800a700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2d2:	f000 fd43 	bl	800ad5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3738      	adds	r7, #56	; 0x38
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	e000ed04 	.word	0xe000ed04

0800a2e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b08e      	sub	sp, #56	; 0x38
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
 800a2f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10b      	bne.n	800a314 <xQueueGenericSendFromISR+0x30>
 800a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a300:	b672      	cpsid	i
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	b662      	cpsie	i
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
 800a312:	e7fe      	b.n	800a312 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d103      	bne.n	800a322 <xQueueGenericSendFromISR+0x3e>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <xQueueGenericSendFromISR+0x42>
 800a322:	2301      	movs	r3, #1
 800a324:	e000      	b.n	800a328 <xQueueGenericSendFromISR+0x44>
 800a326:	2300      	movs	r3, #0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10b      	bne.n	800a344 <xQueueGenericSendFromISR+0x60>
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	b672      	cpsid	i
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	b662      	cpsie	i
 800a340:	623b      	str	r3, [r7, #32]
 800a342:	e7fe      	b.n	800a342 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b02      	cmp	r3, #2
 800a348:	d103      	bne.n	800a352 <xQueueGenericSendFromISR+0x6e>
 800a34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d101      	bne.n	800a356 <xQueueGenericSendFromISR+0x72>
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <xQueueGenericSendFromISR+0x74>
 800a356:	2300      	movs	r3, #0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10b      	bne.n	800a374 <xQueueGenericSendFromISR+0x90>
 800a35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a360:	b672      	cpsid	i
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	b662      	cpsie	i
 800a370:	61fb      	str	r3, [r7, #28]
 800a372:	e7fe      	b.n	800a372 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a374:	f7ff fd68 	bl	8009e48 <vPortValidateInterruptPriority>
	__asm volatile
 800a378:	f3ef 8211 	mrs	r2, BASEPRI
 800a37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a380:	b672      	cpsid	i
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	b662      	cpsie	i
 800a390:	61ba      	str	r2, [r7, #24]
 800a392:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a394:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a396:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d302      	bcc.n	800a3aa <xQueueGenericSendFromISR+0xc6>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d12c      	bne.n	800a404 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ba:	f000 f911 	bl	800a5e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c6:	d112      	bne.n	800a3ee <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d016      	beq.n	800a3fe <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d2:	3324      	adds	r3, #36	; 0x24
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fed9 	bl	800b18c <xTaskRemoveFromEventList>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00e      	beq.n	800a3fe <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00b      	beq.n	800a3fe <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	601a      	str	r2, [r3, #0]
 800a3ec:	e007      	b.n	800a3fe <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	b25a      	sxtb	r2, r3
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3fe:	2301      	movs	r3, #1
 800a400:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a402:	e001      	b.n	800a408 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a404:	2300      	movs	r3, #0
 800a406:	637b      	str	r3, [r7, #52]	; 0x34
 800a408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a414:	4618      	mov	r0, r3
 800a416:	3738      	adds	r7, #56	; 0x38
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08c      	sub	sp, #48	; 0x30
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a428:	2300      	movs	r3, #0
 800a42a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10b      	bne.n	800a44e <xQueueReceive+0x32>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	b672      	cpsid	i
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	b662      	cpsie	i
 800a44a:	623b      	str	r3, [r7, #32]
 800a44c:	e7fe      	b.n	800a44c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d103      	bne.n	800a45c <xQueueReceive+0x40>
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <xQueueReceive+0x44>
 800a45c:	2301      	movs	r3, #1
 800a45e:	e000      	b.n	800a462 <xQueueReceive+0x46>
 800a460:	2300      	movs	r3, #0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10b      	bne.n	800a47e <xQueueReceive+0x62>
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	b672      	cpsid	i
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	b662      	cpsie	i
 800a47a:	61fb      	str	r3, [r7, #28]
 800a47c:	e7fe      	b.n	800a47c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a47e:	f001 f843 	bl	800b508 <xTaskGetSchedulerState>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d102      	bne.n	800a48e <xQueueReceive+0x72>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d101      	bne.n	800a492 <xQueueReceive+0x76>
 800a48e:	2301      	movs	r3, #1
 800a490:	e000      	b.n	800a494 <xQueueReceive+0x78>
 800a492:	2300      	movs	r3, #0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10b      	bne.n	800a4b0 <xQueueReceive+0x94>
 800a498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49c:	b672      	cpsid	i
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	b662      	cpsie	i
 800a4ac:	61bb      	str	r3, [r7, #24]
 800a4ae:	e7fe      	b.n	800a4ae <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4b0:	f7ff fbea 	bl	8009c88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01f      	beq.n	800a500 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4c0:	68b9      	ldr	r1, [r7, #8]
 800a4c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c4:	f000 f8f6 	bl	800a6b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ca:	1e5a      	subs	r2, r3, #1
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00f      	beq.n	800a4f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	3310      	adds	r3, #16
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 fe55 	bl	800b18c <xTaskRemoveFromEventList>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d007      	beq.n	800a4f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4e8:	4b3c      	ldr	r3, [pc, #240]	; (800a5dc <xQueueReceive+0x1c0>)
 800a4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4f8:	f7ff fbf8 	bl	8009cec <vPortExitCritical>
				return pdPASS;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e069      	b.n	800a5d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d103      	bne.n	800a50e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a506:	f7ff fbf1 	bl	8009cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a50a:	2300      	movs	r3, #0
 800a50c:	e062      	b.n	800a5d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a510:	2b00      	cmp	r3, #0
 800a512:	d106      	bne.n	800a522 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a514:	f107 0310 	add.w	r3, r7, #16
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fe9b 	bl	800b254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a51e:	2301      	movs	r3, #1
 800a520:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a522:	f7ff fbe3 	bl	8009cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a526:	f000 fc0b 	bl	800ad40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a52a:	f7ff fbad 	bl	8009c88 <vPortEnterCritical>
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a534:	b25b      	sxtb	r3, r3
 800a536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53a:	d103      	bne.n	800a544 <xQueueReceive+0x128>
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a54a:	b25b      	sxtb	r3, r3
 800a54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a550:	d103      	bne.n	800a55a <xQueueReceive+0x13e>
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	2200      	movs	r2, #0
 800a556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a55a:	f7ff fbc7 	bl	8009cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a55e:	1d3a      	adds	r2, r7, #4
 800a560:	f107 0310 	add.w	r3, r7, #16
 800a564:	4611      	mov	r1, r2
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fe8a 	bl	800b280 <xTaskCheckForTimeOut>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d123      	bne.n	800a5ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a574:	f000 f916 	bl	800a7a4 <prvIsQueueEmpty>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d017      	beq.n	800a5ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	3324      	adds	r3, #36	; 0x24
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	4611      	mov	r1, r2
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fdae 	bl	800b0e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a58c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a58e:	f000 f8b7 	bl	800a700 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a592:	f000 fbe3 	bl	800ad5c <xTaskResumeAll>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d189      	bne.n	800a4b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <xQueueReceive+0x1c0>)
 800a59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	e780      	b.n	800a4b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b0:	f000 f8a6 	bl	800a700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5b4:	f000 fbd2 	bl	800ad5c <xTaskResumeAll>
 800a5b8:	e77a      	b.n	800a4b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5bc:	f000 f8a0 	bl	800a700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5c0:	f000 fbcc 	bl	800ad5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5c6:	f000 f8ed 	bl	800a7a4 <prvIsQueueEmpty>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f43f af6f 	beq.w	800a4b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3730      	adds	r7, #48	; 0x30
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	e000ed04 	.word	0xe000ed04

0800a5e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10d      	bne.n	800a61a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d14d      	bne.n	800a6a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 ff9a 	bl	800b544 <xTaskPriorityDisinherit>
 800a610:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	609a      	str	r2, [r3, #8]
 800a618:	e043      	b.n	800a6a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d119      	bne.n	800a654 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6858      	ldr	r0, [r3, #4]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a628:	461a      	mov	r2, r3
 800a62a:	68b9      	ldr	r1, [r7, #8]
 800a62c:	f001 fbcc 	bl	800bdc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a638:	441a      	add	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	429a      	cmp	r2, r3
 800a648:	d32b      	bcc.n	800a6a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	605a      	str	r2, [r3, #4]
 800a652:	e026      	b.n	800a6a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	68d8      	ldr	r0, [r3, #12]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	461a      	mov	r2, r3
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	f001 fbb2 	bl	800bdc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	68da      	ldr	r2, [r3, #12]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66c:	425b      	negs	r3, r3
 800a66e:	441a      	add	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	68da      	ldr	r2, [r3, #12]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d207      	bcs.n	800a690 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a688:	425b      	negs	r3, r3
 800a68a:	441a      	add	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b02      	cmp	r3, #2
 800a694:	d105      	bne.n	800a6a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	1c5a      	adds	r2, r3, #1
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a6aa:	697b      	ldr	r3, [r7, #20]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3718      	adds	r7, #24
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d018      	beq.n	800a6f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68da      	ldr	r2, [r3, #12]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ce:	441a      	add	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68da      	ldr	r2, [r3, #12]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d303      	bcc.n	800a6e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68d9      	ldr	r1, [r3, #12]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6838      	ldr	r0, [r7, #0]
 800a6f4:	f001 fb68 	bl	800bdc8 <memcpy>
	}
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a708:	f7ff fabe 	bl	8009c88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a712:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a714:	e011      	b.n	800a73a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d012      	beq.n	800a744 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	3324      	adds	r3, #36	; 0x24
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fd32 	bl	800b18c <xTaskRemoveFromEventList>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a72e:	f000 fe0b 	bl	800b348 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a732:	7bfb      	ldrb	r3, [r7, #15]
 800a734:	3b01      	subs	r3, #1
 800a736:	b2db      	uxtb	r3, r3
 800a738:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a73a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	dce9      	bgt.n	800a716 <prvUnlockQueue+0x16>
 800a742:	e000      	b.n	800a746 <prvUnlockQueue+0x46>
					break;
 800a744:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	22ff      	movs	r2, #255	; 0xff
 800a74a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a74e:	f7ff facd 	bl	8009cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a752:	f7ff fa99 	bl	8009c88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a75c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a75e:	e011      	b.n	800a784 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d012      	beq.n	800a78e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	3310      	adds	r3, #16
 800a76c:	4618      	mov	r0, r3
 800a76e:	f000 fd0d 	bl	800b18c <xTaskRemoveFromEventList>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a778:	f000 fde6 	bl	800b348 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	3b01      	subs	r3, #1
 800a780:	b2db      	uxtb	r3, r3
 800a782:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	dce9      	bgt.n	800a760 <prvUnlockQueue+0x60>
 800a78c:	e000      	b.n	800a790 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a78e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	22ff      	movs	r2, #255	; 0xff
 800a794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a798:	f7ff faa8 	bl	8009cec <vPortExitCritical>
}
 800a79c:	bf00      	nop
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7ac:	f7ff fa6c 	bl	8009c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	e001      	b.n	800a7c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7c2:	f7ff fa93 	bl	8009cec <vPortExitCritical>

	return xReturn;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7d8:	f7ff fa56 	bl	8009c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d102      	bne.n	800a7ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	e001      	b.n	800a7f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7f2:	f7ff fa7b 	bl	8009cec <vPortExitCritical>

	return xReturn;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	e014      	b.n	800a83a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a810:	4a0e      	ldr	r2, [pc, #56]	; (800a84c <vQueueAddToRegistry+0x4c>)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10b      	bne.n	800a834 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a81c:	490b      	ldr	r1, [pc, #44]	; (800a84c <vQueueAddToRegistry+0x4c>)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	683a      	ldr	r2, [r7, #0]
 800a822:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a826:	4a09      	ldr	r2, [pc, #36]	; (800a84c <vQueueAddToRegistry+0x4c>)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	4413      	add	r3, r2
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a832:	e005      	b.n	800a840 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	3301      	adds	r3, #1
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2b07      	cmp	r3, #7
 800a83e:	d9e7      	bls.n	800a810 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a840:	bf00      	nop
 800a842:	3714      	adds	r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	2000c9f0 	.word	0x2000c9f0

0800a850 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a860:	f7ff fa12 	bl	8009c88 <vPortEnterCritical>
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a86a:	b25b      	sxtb	r3, r3
 800a86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a870:	d103      	bne.n	800a87a <vQueueWaitForMessageRestricted+0x2a>
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a880:	b25b      	sxtb	r3, r3
 800a882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a886:	d103      	bne.n	800a890 <vQueueWaitForMessageRestricted+0x40>
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a890:	f7ff fa2c 	bl	8009cec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d106      	bne.n	800a8aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	3324      	adds	r3, #36	; 0x24
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	68b9      	ldr	r1, [r7, #8]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 fc45 	bl	800b134 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8aa:	6978      	ldr	r0, [r7, #20]
 800a8ac:	f7ff ff28 	bl	800a700 <prvUnlockQueue>
	}
 800a8b0:	bf00      	nop
 800a8b2:	3718      	adds	r7, #24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08e      	sub	sp, #56	; 0x38
 800a8bc:	af04      	add	r7, sp, #16
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10b      	bne.n	800a8e4 <xTaskCreateStatic+0x2c>
 800a8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d0:	b672      	cpsid	i
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	b662      	cpsie	i
 800a8e0:	623b      	str	r3, [r7, #32]
 800a8e2:	e7fe      	b.n	800a8e2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10b      	bne.n	800a902 <xTaskCreateStatic+0x4a>
 800a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ee:	b672      	cpsid	i
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	b662      	cpsie	i
 800a8fe:	61fb      	str	r3, [r7, #28]
 800a900:	e7fe      	b.n	800a900 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a902:	235c      	movs	r3, #92	; 0x5c
 800a904:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	2b5c      	cmp	r3, #92	; 0x5c
 800a90a:	d00b      	beq.n	800a924 <xTaskCreateStatic+0x6c>
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	b672      	cpsid	i
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	b662      	cpsie	i
 800a920:	61bb      	str	r3, [r7, #24]
 800a922:	e7fe      	b.n	800a922 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a924:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d01e      	beq.n	800a96a <xTaskCreateStatic+0xb2>
 800a92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d01b      	beq.n	800a96a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a93a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	2202      	movs	r2, #2
 800a940:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a944:	2300      	movs	r3, #0
 800a946:	9303      	str	r3, [sp, #12]
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	9302      	str	r3, [sp, #8]
 800a94c:	f107 0314 	add.w	r3, r7, #20
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	68b9      	ldr	r1, [r7, #8]
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 f850 	bl	800aa02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a962:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a964:	f000 f8de 	bl	800ab24 <prvAddNewTaskToReadyList>
 800a968:	e001      	b.n	800a96e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a96e:	697b      	ldr	r3, [r7, #20]
	}
 800a970:	4618      	mov	r0, r3
 800a972:	3728      	adds	r7, #40	; 0x28
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08c      	sub	sp, #48	; 0x30
 800a97c:	af04      	add	r7, sp, #16
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	4613      	mov	r3, r2
 800a986:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a988:	88fb      	ldrh	r3, [r7, #6]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fe fde1 	bl	8009554 <pvPortMalloc>
 800a992:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00e      	beq.n	800a9b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a99a:	205c      	movs	r0, #92	; 0x5c
 800a99c:	f7fe fdda 	bl	8009554 <pvPortMalloc>
 800a9a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d003      	beq.n	800a9b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	631a      	str	r2, [r3, #48]	; 0x30
 800a9ae:	e005      	b.n	800a9bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9b0:	6978      	ldr	r0, [r7, #20]
 800a9b2:	f7fe fe97 	bl	80096e4 <vPortFree>
 800a9b6:	e001      	b.n	800a9bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d017      	beq.n	800a9f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9ca:	88fa      	ldrh	r2, [r7, #6]
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9303      	str	r3, [sp, #12]
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	9302      	str	r3, [sp, #8]
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	68b9      	ldr	r1, [r7, #8]
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 f80e 	bl	800aa02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9e6:	69f8      	ldr	r0, [r7, #28]
 800a9e8:	f000 f89c 	bl	800ab24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	61bb      	str	r3, [r7, #24]
 800a9f0:	e002      	b.n	800a9f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9f8:	69bb      	ldr	r3, [r7, #24]
	}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3720      	adds	r7, #32
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b088      	sub	sp, #32
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	60b9      	str	r1, [r7, #8]
 800aa0c:	607a      	str	r2, [r7, #4]
 800aa0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	461a      	mov	r2, r3
 800aa1a:	21a5      	movs	r1, #165	; 0xa5
 800aa1c:	f001 f9df 	bl	800bdde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa24:	6879      	ldr	r1, [r7, #4]
 800aa26:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aa2a:	440b      	add	r3, r1
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	f023 0307 	bic.w	r3, r3, #7
 800aa38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	f003 0307 	and.w	r3, r3, #7
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00b      	beq.n	800aa5c <prvInitialiseNewTask+0x5a>
 800aa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa48:	b672      	cpsid	i
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	b662      	cpsie	i
 800aa58:	617b      	str	r3, [r7, #20]
 800aa5a:	e7fe      	b.n	800aa5a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d01f      	beq.n	800aaa2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa62:	2300      	movs	r3, #0
 800aa64:	61fb      	str	r3, [r7, #28]
 800aa66:	e012      	b.n	800aa8e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa68:	68ba      	ldr	r2, [r7, #8]
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	7819      	ldrb	r1, [r3, #0]
 800aa70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	4413      	add	r3, r2
 800aa76:	3334      	adds	r3, #52	; 0x34
 800aa78:	460a      	mov	r2, r1
 800aa7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	4413      	add	r3, r2
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d006      	beq.n	800aa96 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	61fb      	str	r3, [r7, #28]
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	2b0f      	cmp	r3, #15
 800aa92:	d9e9      	bls.n	800aa68 <prvInitialiseNewTask+0x66>
 800aa94:	e000      	b.n	800aa98 <prvInitialiseNewTask+0x96>
			{
				break;
 800aa96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aaa0:	e003      	b.n	800aaaa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaac:	2b37      	cmp	r3, #55	; 0x37
 800aaae:	d901      	bls.n	800aab4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aab0:	2337      	movs	r3, #55	; 0x37
 800aab2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aab8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aabe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	2200      	movs	r2, #0
 800aac4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	3304      	adds	r3, #4
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe ff42 	bl	8009954 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad2:	3318      	adds	r3, #24
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fe ff3d 	bl	8009954 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aade:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	68f9      	ldr	r1, [r7, #12]
 800ab02:	69b8      	ldr	r0, [r7, #24]
 800ab04:	f7fe ffba 	bl	8009a7c <pxPortInitialiseStack>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab1a:	bf00      	nop
 800ab1c:	3720      	adds	r7, #32
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
	...

0800ab24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab2c:	f7ff f8ac 	bl	8009c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab30:	4b2d      	ldr	r3, [pc, #180]	; (800abe8 <prvAddNewTaskToReadyList+0xc4>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3301      	adds	r3, #1
 800ab36:	4a2c      	ldr	r2, [pc, #176]	; (800abe8 <prvAddNewTaskToReadyList+0xc4>)
 800ab38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab3a:	4b2c      	ldr	r3, [pc, #176]	; (800abec <prvAddNewTaskToReadyList+0xc8>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d109      	bne.n	800ab56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab42:	4a2a      	ldr	r2, [pc, #168]	; (800abec <prvAddNewTaskToReadyList+0xc8>)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab48:	4b27      	ldr	r3, [pc, #156]	; (800abe8 <prvAddNewTaskToReadyList+0xc4>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d110      	bne.n	800ab72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab50:	f000 fc1e 	bl	800b390 <prvInitialiseTaskLists>
 800ab54:	e00d      	b.n	800ab72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab56:	4b26      	ldr	r3, [pc, #152]	; (800abf0 <prvAddNewTaskToReadyList+0xcc>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d109      	bne.n	800ab72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab5e:	4b23      	ldr	r3, [pc, #140]	; (800abec <prvAddNewTaskToReadyList+0xc8>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d802      	bhi.n	800ab72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab6c:	4a1f      	ldr	r2, [pc, #124]	; (800abec <prvAddNewTaskToReadyList+0xc8>)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab72:	4b20      	ldr	r3, [pc, #128]	; (800abf4 <prvAddNewTaskToReadyList+0xd0>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3301      	adds	r3, #1
 800ab78:	4a1e      	ldr	r2, [pc, #120]	; (800abf4 <prvAddNewTaskToReadyList+0xd0>)
 800ab7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab7c:	4b1d      	ldr	r3, [pc, #116]	; (800abf4 <prvAddNewTaskToReadyList+0xd0>)
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab88:	4b1b      	ldr	r3, [pc, #108]	; (800abf8 <prvAddNewTaskToReadyList+0xd4>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d903      	bls.n	800ab98 <prvAddNewTaskToReadyList+0x74>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	4a18      	ldr	r2, [pc, #96]	; (800abf8 <prvAddNewTaskToReadyList+0xd4>)
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4a15      	ldr	r2, [pc, #84]	; (800abfc <prvAddNewTaskToReadyList+0xd8>)
 800aba6:	441a      	add	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3304      	adds	r3, #4
 800abac:	4619      	mov	r1, r3
 800abae:	4610      	mov	r0, r2
 800abb0:	f7fe fedd 	bl	800996e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abb4:	f7ff f89a 	bl	8009cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abb8:	4b0d      	ldr	r3, [pc, #52]	; (800abf0 <prvAddNewTaskToReadyList+0xcc>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00e      	beq.n	800abde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <prvAddNewTaskToReadyList+0xc8>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abca:	429a      	cmp	r2, r3
 800abcc:	d207      	bcs.n	800abde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abce:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <prvAddNewTaskToReadyList+0xdc>)
 800abd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abde:	bf00      	nop
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20004884 	.word	0x20004884
 800abec:	200043b0 	.word	0x200043b0
 800abf0:	20004890 	.word	0x20004890
 800abf4:	200048a0 	.word	0x200048a0
 800abf8:	2000488c 	.word	0x2000488c
 800abfc:	200043b4 	.word	0x200043b4
 800ac00:	e000ed04 	.word	0xe000ed04

0800ac04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d018      	beq.n	800ac48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac16:	4b14      	ldr	r3, [pc, #80]	; (800ac68 <vTaskDelay+0x64>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00b      	beq.n	800ac36 <vTaskDelay+0x32>
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	b672      	cpsid	i
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	b662      	cpsie	i
 800ac32:	60bb      	str	r3, [r7, #8]
 800ac34:	e7fe      	b.n	800ac34 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800ac36:	f000 f883 	bl	800ad40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fcf1 	bl	800b624 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac42:	f000 f88b 	bl	800ad5c <xTaskResumeAll>
 800ac46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d107      	bne.n	800ac5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ac4e:	4b07      	ldr	r3, [pc, #28]	; (800ac6c <vTaskDelay+0x68>)
 800ac50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac5e:	bf00      	nop
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	200048ac 	.word	0x200048ac
 800ac6c:	e000ed04 	.word	0xe000ed04

0800ac70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b08a      	sub	sp, #40	; 0x28
 800ac74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac7e:	463a      	mov	r2, r7
 800ac80:	1d39      	adds	r1, r7, #4
 800ac82:	f107 0308 	add.w	r3, r7, #8
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fe fc30 	bl	80094ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	9202      	str	r2, [sp, #8]
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	2300      	movs	r3, #0
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	460a      	mov	r2, r1
 800ac9e:	4922      	ldr	r1, [pc, #136]	; (800ad28 <vTaskStartScheduler+0xb8>)
 800aca0:	4822      	ldr	r0, [pc, #136]	; (800ad2c <vTaskStartScheduler+0xbc>)
 800aca2:	f7ff fe09 	bl	800a8b8 <xTaskCreateStatic>
 800aca6:	4602      	mov	r2, r0
 800aca8:	4b21      	ldr	r3, [pc, #132]	; (800ad30 <vTaskStartScheduler+0xc0>)
 800acaa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800acac:	4b20      	ldr	r3, [pc, #128]	; (800ad30 <vTaskStartScheduler+0xc0>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800acb4:	2301      	movs	r3, #1
 800acb6:	617b      	str	r3, [r7, #20]
 800acb8:	e001      	b.n	800acbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acba:	2300      	movs	r3, #0
 800acbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d102      	bne.n	800acca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800acc4:	f000 fd02 	bl	800b6cc <xTimerCreateTimerTask>
 800acc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d117      	bne.n	800ad00 <vTaskStartScheduler+0x90>
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	b672      	cpsid	i
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	b662      	cpsie	i
 800ace4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ace6:	4b13      	ldr	r3, [pc, #76]	; (800ad34 <vTaskStartScheduler+0xc4>)
 800ace8:	f04f 32ff 	mov.w	r2, #4294967295
 800acec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acee:	4b12      	ldr	r3, [pc, #72]	; (800ad38 <vTaskStartScheduler+0xc8>)
 800acf0:	2201      	movs	r2, #1
 800acf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800acf4:	4b11      	ldr	r3, [pc, #68]	; (800ad3c <vTaskStartScheduler+0xcc>)
 800acf6:	2200      	movs	r2, #0
 800acf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800acfa:	f7fe ff49 	bl	8009b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800acfe:	e00f      	b.n	800ad20 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad06:	d10b      	bne.n	800ad20 <vTaskStartScheduler+0xb0>
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	b672      	cpsid	i
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	b662      	cpsie	i
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	e7fe      	b.n	800ad1e <vTaskStartScheduler+0xae>
}
 800ad20:	bf00      	nop
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	0800c63c 	.word	0x0800c63c
 800ad2c:	0800b361 	.word	0x0800b361
 800ad30:	200048a8 	.word	0x200048a8
 800ad34:	200048a4 	.word	0x200048a4
 800ad38:	20004890 	.word	0x20004890
 800ad3c:	20004888 	.word	0x20004888

0800ad40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad40:	b480      	push	{r7}
 800ad42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ad44:	4b04      	ldr	r3, [pc, #16]	; (800ad58 <vTaskSuspendAll+0x18>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	4a03      	ldr	r2, [pc, #12]	; (800ad58 <vTaskSuspendAll+0x18>)
 800ad4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ad4e:	bf00      	nop
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	200048ac 	.word	0x200048ac

0800ad5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad6a:	4b42      	ldr	r3, [pc, #264]	; (800ae74 <xTaskResumeAll+0x118>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10b      	bne.n	800ad8a <xTaskResumeAll+0x2e>
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	b672      	cpsid	i
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	b662      	cpsie	i
 800ad86:	603b      	str	r3, [r7, #0]
 800ad88:	e7fe      	b.n	800ad88 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad8a:	f7fe ff7d 	bl	8009c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad8e:	4b39      	ldr	r3, [pc, #228]	; (800ae74 <xTaskResumeAll+0x118>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3b01      	subs	r3, #1
 800ad94:	4a37      	ldr	r2, [pc, #220]	; (800ae74 <xTaskResumeAll+0x118>)
 800ad96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad98:	4b36      	ldr	r3, [pc, #216]	; (800ae74 <xTaskResumeAll+0x118>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d162      	bne.n	800ae66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ada0:	4b35      	ldr	r3, [pc, #212]	; (800ae78 <xTaskResumeAll+0x11c>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d05e      	beq.n	800ae66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ada8:	e02f      	b.n	800ae0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adaa:	4b34      	ldr	r3, [pc, #208]	; (800ae7c <xTaskResumeAll+0x120>)
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	3318      	adds	r3, #24
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe fe36 	bl	8009a28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3304      	adds	r3, #4
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fe fe31 	bl	8009a28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adca:	4b2d      	ldr	r3, [pc, #180]	; (800ae80 <xTaskResumeAll+0x124>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	429a      	cmp	r2, r3
 800add0:	d903      	bls.n	800adda <xTaskResumeAll+0x7e>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	4a2a      	ldr	r2, [pc, #168]	; (800ae80 <xTaskResumeAll+0x124>)
 800add8:	6013      	str	r3, [r2, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adde:	4613      	mov	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4a27      	ldr	r2, [pc, #156]	; (800ae84 <xTaskResumeAll+0x128>)
 800ade8:	441a      	add	r2, r3
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	3304      	adds	r3, #4
 800adee:	4619      	mov	r1, r3
 800adf0:	4610      	mov	r0, r2
 800adf2:	f7fe fdbc 	bl	800996e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfa:	4b23      	ldr	r3, [pc, #140]	; (800ae88 <xTaskResumeAll+0x12c>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d302      	bcc.n	800ae0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ae04:	4b21      	ldr	r3, [pc, #132]	; (800ae8c <xTaskResumeAll+0x130>)
 800ae06:	2201      	movs	r2, #1
 800ae08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae0a:	4b1c      	ldr	r3, [pc, #112]	; (800ae7c <xTaskResumeAll+0x120>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1cb      	bne.n	800adaa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae18:	f000 fb56 	bl	800b4c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ae1c:	4b1c      	ldr	r3, [pc, #112]	; (800ae90 <xTaskResumeAll+0x134>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d010      	beq.n	800ae4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae28:	f000 f846 	bl	800aeb8 <xTaskIncrementTick>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d002      	beq.n	800ae38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ae32:	4b16      	ldr	r3, [pc, #88]	; (800ae8c <xTaskResumeAll+0x130>)
 800ae34:	2201      	movs	r2, #1
 800ae36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1f1      	bne.n	800ae28 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800ae44:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <xTaskResumeAll+0x134>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae4a:	4b10      	ldr	r3, [pc, #64]	; (800ae8c <xTaskResumeAll+0x130>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d009      	beq.n	800ae66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae52:	2301      	movs	r3, #1
 800ae54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae56:	4b0f      	ldr	r3, [pc, #60]	; (800ae94 <xTaskResumeAll+0x138>)
 800ae58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae66:	f7fe ff41 	bl	8009cec <vPortExitCritical>

	return xAlreadyYielded;
 800ae6a:	68bb      	ldr	r3, [r7, #8]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	200048ac 	.word	0x200048ac
 800ae78:	20004884 	.word	0x20004884
 800ae7c:	20004844 	.word	0x20004844
 800ae80:	2000488c 	.word	0x2000488c
 800ae84:	200043b4 	.word	0x200043b4
 800ae88:	200043b0 	.word	0x200043b0
 800ae8c:	20004898 	.word	0x20004898
 800ae90:	20004894 	.word	0x20004894
 800ae94:	e000ed04 	.word	0xe000ed04

0800ae98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae9e:	4b05      	ldr	r3, [pc, #20]	; (800aeb4 <xTaskGetTickCount+0x1c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aea4:	687b      	ldr	r3, [r7, #4]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	20004888 	.word	0x20004888

0800aeb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aebe:	2300      	movs	r3, #0
 800aec0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aec2:	4b4f      	ldr	r3, [pc, #316]	; (800b000 <xTaskIncrementTick+0x148>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f040 808a 	bne.w	800afe0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aecc:	4b4d      	ldr	r3, [pc, #308]	; (800b004 <xTaskIncrementTick+0x14c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3301      	adds	r3, #1
 800aed2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aed4:	4a4b      	ldr	r2, [pc, #300]	; (800b004 <xTaskIncrementTick+0x14c>)
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d121      	bne.n	800af24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aee0:	4b49      	ldr	r3, [pc, #292]	; (800b008 <xTaskIncrementTick+0x150>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00b      	beq.n	800af02 <xTaskIncrementTick+0x4a>
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	b672      	cpsid	i
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	b662      	cpsie	i
 800aefe:	603b      	str	r3, [r7, #0]
 800af00:	e7fe      	b.n	800af00 <xTaskIncrementTick+0x48>
 800af02:	4b41      	ldr	r3, [pc, #260]	; (800b008 <xTaskIncrementTick+0x150>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	4b40      	ldr	r3, [pc, #256]	; (800b00c <xTaskIncrementTick+0x154>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a3e      	ldr	r2, [pc, #248]	; (800b008 <xTaskIncrementTick+0x150>)
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	4a3e      	ldr	r2, [pc, #248]	; (800b00c <xTaskIncrementTick+0x154>)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	4b3e      	ldr	r3, [pc, #248]	; (800b010 <xTaskIncrementTick+0x158>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3301      	adds	r3, #1
 800af1c:	4a3c      	ldr	r2, [pc, #240]	; (800b010 <xTaskIncrementTick+0x158>)
 800af1e:	6013      	str	r3, [r2, #0]
 800af20:	f000 fad2 	bl	800b4c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af24:	4b3b      	ldr	r3, [pc, #236]	; (800b014 <xTaskIncrementTick+0x15c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d349      	bcc.n	800afc2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af2e:	4b36      	ldr	r3, [pc, #216]	; (800b008 <xTaskIncrementTick+0x150>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d104      	bne.n	800af42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af38:	4b36      	ldr	r3, [pc, #216]	; (800b014 <xTaskIncrementTick+0x15c>)
 800af3a:	f04f 32ff 	mov.w	r2, #4294967295
 800af3e:	601a      	str	r2, [r3, #0]
					break;
 800af40:	e03f      	b.n	800afc2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af42:	4b31      	ldr	r3, [pc, #196]	; (800b008 <xTaskIncrementTick+0x150>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	429a      	cmp	r2, r3
 800af58:	d203      	bcs.n	800af62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af5a:	4a2e      	ldr	r2, [pc, #184]	; (800b014 <xTaskIncrementTick+0x15c>)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af60:	e02f      	b.n	800afc2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	3304      	adds	r3, #4
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe fd5e 	bl	8009a28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af70:	2b00      	cmp	r3, #0
 800af72:	d004      	beq.n	800af7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	3318      	adds	r3, #24
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fe fd55 	bl	8009a28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af82:	4b25      	ldr	r3, [pc, #148]	; (800b018 <xTaskIncrementTick+0x160>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	429a      	cmp	r2, r3
 800af88:	d903      	bls.n	800af92 <xTaskIncrementTick+0xda>
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8e:	4a22      	ldr	r2, [pc, #136]	; (800b018 <xTaskIncrementTick+0x160>)
 800af90:	6013      	str	r3, [r2, #0]
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af96:	4613      	mov	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	4413      	add	r3, r2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4a1f      	ldr	r2, [pc, #124]	; (800b01c <xTaskIncrementTick+0x164>)
 800afa0:	441a      	add	r2, r3
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	3304      	adds	r3, #4
 800afa6:	4619      	mov	r1, r3
 800afa8:	4610      	mov	r0, r2
 800afaa:	f7fe fce0 	bl	800996e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb2:	4b1b      	ldr	r3, [pc, #108]	; (800b020 <xTaskIncrementTick+0x168>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb8:	429a      	cmp	r2, r3
 800afba:	d3b8      	bcc.n	800af2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800afbc:	2301      	movs	r3, #1
 800afbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afc0:	e7b5      	b.n	800af2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800afc2:	4b17      	ldr	r3, [pc, #92]	; (800b020 <xTaskIncrementTick+0x168>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc8:	4914      	ldr	r1, [pc, #80]	; (800b01c <xTaskIncrementTick+0x164>)
 800afca:	4613      	mov	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	440b      	add	r3, r1
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d907      	bls.n	800afea <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800afda:	2301      	movs	r3, #1
 800afdc:	617b      	str	r3, [r7, #20]
 800afde:	e004      	b.n	800afea <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800afe0:	4b10      	ldr	r3, [pc, #64]	; (800b024 <xTaskIncrementTick+0x16c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3301      	adds	r3, #1
 800afe6:	4a0f      	ldr	r2, [pc, #60]	; (800b024 <xTaskIncrementTick+0x16c>)
 800afe8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800afea:	4b0f      	ldr	r3, [pc, #60]	; (800b028 <xTaskIncrementTick+0x170>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800aff2:	2301      	movs	r3, #1
 800aff4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aff6:	697b      	ldr	r3, [r7, #20]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3718      	adds	r7, #24
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	200048ac 	.word	0x200048ac
 800b004:	20004888 	.word	0x20004888
 800b008:	2000483c 	.word	0x2000483c
 800b00c:	20004840 	.word	0x20004840
 800b010:	2000489c 	.word	0x2000489c
 800b014:	200048a4 	.word	0x200048a4
 800b018:	2000488c 	.word	0x2000488c
 800b01c:	200043b4 	.word	0x200043b4
 800b020:	200043b0 	.word	0x200043b0
 800b024:	20004894 	.word	0x20004894
 800b028:	20004898 	.word	0x20004898

0800b02c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b032:	4b28      	ldr	r3, [pc, #160]	; (800b0d4 <vTaskSwitchContext+0xa8>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b03a:	4b27      	ldr	r3, [pc, #156]	; (800b0d8 <vTaskSwitchContext+0xac>)
 800b03c:	2201      	movs	r2, #1
 800b03e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b040:	e042      	b.n	800b0c8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b042:	4b25      	ldr	r3, [pc, #148]	; (800b0d8 <vTaskSwitchContext+0xac>)
 800b044:	2200      	movs	r2, #0
 800b046:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b048:	4b24      	ldr	r3, [pc, #144]	; (800b0dc <vTaskSwitchContext+0xb0>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	60fb      	str	r3, [r7, #12]
 800b04e:	e011      	b.n	800b074 <vTaskSwitchContext+0x48>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10b      	bne.n	800b06e <vTaskSwitchContext+0x42>
 800b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05a:	b672      	cpsid	i
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	b662      	cpsie	i
 800b06a:	607b      	str	r3, [r7, #4]
 800b06c:	e7fe      	b.n	800b06c <vTaskSwitchContext+0x40>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3b01      	subs	r3, #1
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	491a      	ldr	r1, [pc, #104]	; (800b0e0 <vTaskSwitchContext+0xb4>)
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4613      	mov	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4413      	add	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	440b      	add	r3, r1
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0e3      	beq.n	800b050 <vTaskSwitchContext+0x24>
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4a13      	ldr	r2, [pc, #76]	; (800b0e0 <vTaskSwitchContext+0xb4>)
 800b094:	4413      	add	r3, r2
 800b096:	60bb      	str	r3, [r7, #8]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	605a      	str	r2, [r3, #4]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d104      	bne.n	800b0b8 <vTaskSwitchContext+0x8c>
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	685a      	ldr	r2, [r3, #4]
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	605a      	str	r2, [r3, #4]
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	4a09      	ldr	r2, [pc, #36]	; (800b0e4 <vTaskSwitchContext+0xb8>)
 800b0c0:	6013      	str	r3, [r2, #0]
 800b0c2:	4a06      	ldr	r2, [pc, #24]	; (800b0dc <vTaskSwitchContext+0xb0>)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6013      	str	r3, [r2, #0]
}
 800b0c8:	bf00      	nop
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	200048ac 	.word	0x200048ac
 800b0d8:	20004898 	.word	0x20004898
 800b0dc:	2000488c 	.word	0x2000488c
 800b0e0:	200043b4 	.word	0x200043b4
 800b0e4:	200043b0 	.word	0x200043b0

0800b0e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10b      	bne.n	800b110 <vTaskPlaceOnEventList+0x28>
 800b0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fc:	b672      	cpsid	i
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	b662      	cpsie	i
 800b10c:	60fb      	str	r3, [r7, #12]
 800b10e:	e7fe      	b.n	800b10e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b110:	4b07      	ldr	r3, [pc, #28]	; (800b130 <vTaskPlaceOnEventList+0x48>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3318      	adds	r3, #24
 800b116:	4619      	mov	r1, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7fe fc4c 	bl	80099b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b11e:	2101      	movs	r1, #1
 800b120:	6838      	ldr	r0, [r7, #0]
 800b122:	f000 fa7f 	bl	800b624 <prvAddCurrentTaskToDelayedList>
}
 800b126:	bf00      	nop
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	200043b0 	.word	0x200043b0

0800b134 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10b      	bne.n	800b15e <vTaskPlaceOnEventListRestricted+0x2a>
 800b146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14a:	b672      	cpsid	i
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	b662      	cpsie	i
 800b15a:	617b      	str	r3, [r7, #20]
 800b15c:	e7fe      	b.n	800b15c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b15e:	4b0a      	ldr	r3, [pc, #40]	; (800b188 <vTaskPlaceOnEventListRestricted+0x54>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3318      	adds	r3, #24
 800b164:	4619      	mov	r1, r3
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f7fe fc01 	bl	800996e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d002      	beq.n	800b178 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b172:	f04f 33ff 	mov.w	r3, #4294967295
 800b176:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b178:	6879      	ldr	r1, [r7, #4]
 800b17a:	68b8      	ldr	r0, [r7, #8]
 800b17c:	f000 fa52 	bl	800b624 <prvAddCurrentTaskToDelayedList>
	}
 800b180:	bf00      	nop
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	200043b0 	.word	0x200043b0

0800b18c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10b      	bne.n	800b1ba <xTaskRemoveFromEventList+0x2e>
 800b1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a6:	b672      	cpsid	i
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	b662      	cpsie	i
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	e7fe      	b.n	800b1b8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	3318      	adds	r3, #24
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fe fc32 	bl	8009a28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1c4:	4b1d      	ldr	r3, [pc, #116]	; (800b23c <xTaskRemoveFromEventList+0xb0>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d11d      	bne.n	800b208 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fe fc29 	bl	8009a28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1da:	4b19      	ldr	r3, [pc, #100]	; (800b240 <xTaskRemoveFromEventList+0xb4>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d903      	bls.n	800b1ea <xTaskRemoveFromEventList+0x5e>
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e6:	4a16      	ldr	r2, [pc, #88]	; (800b240 <xTaskRemoveFromEventList+0xb4>)
 800b1e8:	6013      	str	r3, [r2, #0]
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4a13      	ldr	r2, [pc, #76]	; (800b244 <xTaskRemoveFromEventList+0xb8>)
 800b1f8:	441a      	add	r2, r3
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	4619      	mov	r1, r3
 800b200:	4610      	mov	r0, r2
 800b202:	f7fe fbb4 	bl	800996e <vListInsertEnd>
 800b206:	e005      	b.n	800b214 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	3318      	adds	r3, #24
 800b20c:	4619      	mov	r1, r3
 800b20e:	480e      	ldr	r0, [pc, #56]	; (800b248 <xTaskRemoveFromEventList+0xbc>)
 800b210:	f7fe fbad 	bl	800996e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b218:	4b0c      	ldr	r3, [pc, #48]	; (800b24c <xTaskRemoveFromEventList+0xc0>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21e:	429a      	cmp	r2, r3
 800b220:	d905      	bls.n	800b22e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b222:	2301      	movs	r3, #1
 800b224:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b226:	4b0a      	ldr	r3, [pc, #40]	; (800b250 <xTaskRemoveFromEventList+0xc4>)
 800b228:	2201      	movs	r2, #1
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	e001      	b.n	800b232 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b22e:	2300      	movs	r3, #0
 800b230:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b232:	697b      	ldr	r3, [r7, #20]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	200048ac 	.word	0x200048ac
 800b240:	2000488c 	.word	0x2000488c
 800b244:	200043b4 	.word	0x200043b4
 800b248:	20004844 	.word	0x20004844
 800b24c:	200043b0 	.word	0x200043b0
 800b250:	20004898 	.word	0x20004898

0800b254 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b25c:	4b06      	ldr	r3, [pc, #24]	; (800b278 <vTaskInternalSetTimeOutState+0x24>)
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b264:	4b05      	ldr	r3, [pc, #20]	; (800b27c <vTaskInternalSetTimeOutState+0x28>)
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	605a      	str	r2, [r3, #4]
}
 800b26c:	bf00      	nop
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	2000489c 	.word	0x2000489c
 800b27c:	20004888 	.word	0x20004888

0800b280 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b088      	sub	sp, #32
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10b      	bne.n	800b2a8 <xTaskCheckForTimeOut+0x28>
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	b672      	cpsid	i
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	b662      	cpsie	i
 800b2a4:	613b      	str	r3, [r7, #16]
 800b2a6:	e7fe      	b.n	800b2a6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10b      	bne.n	800b2c6 <xTaskCheckForTimeOut+0x46>
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	b672      	cpsid	i
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	b662      	cpsie	i
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	e7fe      	b.n	800b2c4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800b2c6:	f7fe fcdf 	bl	8009c88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b2ca:	4b1d      	ldr	r3, [pc, #116]	; (800b340 <xTaskCheckForTimeOut+0xc0>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	69ba      	ldr	r2, [r7, #24]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e2:	d102      	bne.n	800b2ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	61fb      	str	r3, [r7, #28]
 800b2e8:	e023      	b.n	800b332 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	4b15      	ldr	r3, [pc, #84]	; (800b344 <xTaskCheckForTimeOut+0xc4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d007      	beq.n	800b306 <xTaskCheckForTimeOut+0x86>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d302      	bcc.n	800b306 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b300:	2301      	movs	r3, #1
 800b302:	61fb      	str	r3, [r7, #28]
 800b304:	e015      	b.n	800b332 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d20b      	bcs.n	800b328 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	1ad2      	subs	r2, r2, r3
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f7ff ff99 	bl	800b254 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b322:	2300      	movs	r3, #0
 800b324:	61fb      	str	r3, [r7, #28]
 800b326:	e004      	b.n	800b332 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b32e:	2301      	movs	r3, #1
 800b330:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b332:	f7fe fcdb 	bl	8009cec <vPortExitCritical>

	return xReturn;
 800b336:	69fb      	ldr	r3, [r7, #28]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3720      	adds	r7, #32
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	20004888 	.word	0x20004888
 800b344:	2000489c 	.word	0x2000489c

0800b348 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b34c:	4b03      	ldr	r3, [pc, #12]	; (800b35c <vTaskMissedYield+0x14>)
 800b34e:	2201      	movs	r2, #1
 800b350:	601a      	str	r2, [r3, #0]
}
 800b352:	bf00      	nop
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	20004898 	.word	0x20004898

0800b360 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b368:	f000 f852 	bl	800b410 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b36c:	4b06      	ldr	r3, [pc, #24]	; (800b388 <prvIdleTask+0x28>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d9f9      	bls.n	800b368 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b374:	4b05      	ldr	r3, [pc, #20]	; (800b38c <prvIdleTask+0x2c>)
 800b376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b37a:	601a      	str	r2, [r3, #0]
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b384:	e7f0      	b.n	800b368 <prvIdleTask+0x8>
 800b386:	bf00      	nop
 800b388:	200043b4 	.word	0x200043b4
 800b38c:	e000ed04 	.word	0xe000ed04

0800b390 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b396:	2300      	movs	r3, #0
 800b398:	607b      	str	r3, [r7, #4]
 800b39a:	e00c      	b.n	800b3b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	4413      	add	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4a12      	ldr	r2, [pc, #72]	; (800b3f0 <prvInitialiseTaskLists+0x60>)
 800b3a8:	4413      	add	r3, r2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fe fab2 	bl	8009914 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	607b      	str	r3, [r7, #4]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b37      	cmp	r3, #55	; 0x37
 800b3ba:	d9ef      	bls.n	800b39c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3bc:	480d      	ldr	r0, [pc, #52]	; (800b3f4 <prvInitialiseTaskLists+0x64>)
 800b3be:	f7fe faa9 	bl	8009914 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3c2:	480d      	ldr	r0, [pc, #52]	; (800b3f8 <prvInitialiseTaskLists+0x68>)
 800b3c4:	f7fe faa6 	bl	8009914 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3c8:	480c      	ldr	r0, [pc, #48]	; (800b3fc <prvInitialiseTaskLists+0x6c>)
 800b3ca:	f7fe faa3 	bl	8009914 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3ce:	480c      	ldr	r0, [pc, #48]	; (800b400 <prvInitialiseTaskLists+0x70>)
 800b3d0:	f7fe faa0 	bl	8009914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3d4:	480b      	ldr	r0, [pc, #44]	; (800b404 <prvInitialiseTaskLists+0x74>)
 800b3d6:	f7fe fa9d 	bl	8009914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3da:	4b0b      	ldr	r3, [pc, #44]	; (800b408 <prvInitialiseTaskLists+0x78>)
 800b3dc:	4a05      	ldr	r2, [pc, #20]	; (800b3f4 <prvInitialiseTaskLists+0x64>)
 800b3de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3e0:	4b0a      	ldr	r3, [pc, #40]	; (800b40c <prvInitialiseTaskLists+0x7c>)
 800b3e2:	4a05      	ldr	r2, [pc, #20]	; (800b3f8 <prvInitialiseTaskLists+0x68>)
 800b3e4:	601a      	str	r2, [r3, #0]
}
 800b3e6:	bf00      	nop
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	200043b4 	.word	0x200043b4
 800b3f4:	20004814 	.word	0x20004814
 800b3f8:	20004828 	.word	0x20004828
 800b3fc:	20004844 	.word	0x20004844
 800b400:	20004858 	.word	0x20004858
 800b404:	20004870 	.word	0x20004870
 800b408:	2000483c 	.word	0x2000483c
 800b40c:	20004840 	.word	0x20004840

0800b410 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b416:	e019      	b.n	800b44c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b418:	f7fe fc36 	bl	8009c88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b41c:	4b0f      	ldr	r3, [pc, #60]	; (800b45c <prvCheckTasksWaitingTermination+0x4c>)
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3304      	adds	r3, #4
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fe fafd 	bl	8009a28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b42e:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <prvCheckTasksWaitingTermination+0x50>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3b01      	subs	r3, #1
 800b434:	4a0a      	ldr	r2, [pc, #40]	; (800b460 <prvCheckTasksWaitingTermination+0x50>)
 800b436:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b438:	4b0a      	ldr	r3, [pc, #40]	; (800b464 <prvCheckTasksWaitingTermination+0x54>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3b01      	subs	r3, #1
 800b43e:	4a09      	ldr	r2, [pc, #36]	; (800b464 <prvCheckTasksWaitingTermination+0x54>)
 800b440:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b442:	f7fe fc53 	bl	8009cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f80e 	bl	800b468 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b44c:	4b05      	ldr	r3, [pc, #20]	; (800b464 <prvCheckTasksWaitingTermination+0x54>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1e1      	bne.n	800b418 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	20004858 	.word	0x20004858
 800b460:	20004884 	.word	0x20004884
 800b464:	2000486c 	.word	0x2000486c

0800b468 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b476:	2b00      	cmp	r3, #0
 800b478:	d108      	bne.n	800b48c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe f930 	bl	80096e4 <vPortFree>
				vPortFree( pxTCB );
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f7fe f92d 	bl	80096e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b48a:	e019      	b.n	800b4c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b492:	2b01      	cmp	r3, #1
 800b494:	d103      	bne.n	800b49e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7fe f924 	bl	80096e4 <vPortFree>
	}
 800b49c:	e010      	b.n	800b4c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d00b      	beq.n	800b4c0 <prvDeleteTCB+0x58>
 800b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ac:	b672      	cpsid	i
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	b662      	cpsie	i
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	e7fe      	b.n	800b4be <prvDeleteTCB+0x56>
	}
 800b4c0:	bf00      	nop
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4ce:	4b0c      	ldr	r3, [pc, #48]	; (800b500 <prvResetNextTaskUnblockTime+0x38>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d104      	bne.n	800b4e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <prvResetNextTaskUnblockTime+0x3c>)
 800b4da:	f04f 32ff 	mov.w	r2, #4294967295
 800b4de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b4e0:	e008      	b.n	800b4f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4e2:	4b07      	ldr	r3, [pc, #28]	; (800b500 <prvResetNextTaskUnblockTime+0x38>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	4a04      	ldr	r2, [pc, #16]	; (800b504 <prvResetNextTaskUnblockTime+0x3c>)
 800b4f2:	6013      	str	r3, [r2, #0]
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	2000483c 	.word	0x2000483c
 800b504:	200048a4 	.word	0x200048a4

0800b508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b50e:	4b0b      	ldr	r3, [pc, #44]	; (800b53c <xTaskGetSchedulerState+0x34>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d102      	bne.n	800b51c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b516:	2301      	movs	r3, #1
 800b518:	607b      	str	r3, [r7, #4]
 800b51a:	e008      	b.n	800b52e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b51c:	4b08      	ldr	r3, [pc, #32]	; (800b540 <xTaskGetSchedulerState+0x38>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d102      	bne.n	800b52a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b524:	2302      	movs	r3, #2
 800b526:	607b      	str	r3, [r7, #4]
 800b528:	e001      	b.n	800b52e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b52a:	2300      	movs	r3, #0
 800b52c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b52e:	687b      	ldr	r3, [r7, #4]
	}
 800b530:	4618      	mov	r0, r3
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr
 800b53c:	20004890 	.word	0x20004890
 800b540:	200048ac 	.word	0x200048ac

0800b544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b550:	2300      	movs	r3, #0
 800b552:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d058      	beq.n	800b60c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b55a:	4b2f      	ldr	r3, [pc, #188]	; (800b618 <xTaskPriorityDisinherit+0xd4>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	429a      	cmp	r2, r3
 800b562:	d00b      	beq.n	800b57c <xTaskPriorityDisinherit+0x38>
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	b672      	cpsid	i
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	b662      	cpsie	i
 800b578:	60fb      	str	r3, [r7, #12]
 800b57a:	e7fe      	b.n	800b57a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10b      	bne.n	800b59c <xTaskPriorityDisinherit+0x58>
 800b584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b588:	b672      	cpsid	i
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	b662      	cpsie	i
 800b598:	60bb      	str	r3, [r7, #8]
 800b59a:	e7fe      	b.n	800b59a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a0:	1e5a      	subs	r2, r3, #1
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d02c      	beq.n	800b60c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d128      	bne.n	800b60c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	3304      	adds	r3, #4
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fe fa32 	bl	8009a28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5dc:	4b0f      	ldr	r3, [pc, #60]	; (800b61c <xTaskPriorityDisinherit+0xd8>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d903      	bls.n	800b5ec <xTaskPriorityDisinherit+0xa8>
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e8:	4a0c      	ldr	r2, [pc, #48]	; (800b61c <xTaskPriorityDisinherit+0xd8>)
 800b5ea:	6013      	str	r3, [r2, #0]
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4a09      	ldr	r2, [pc, #36]	; (800b620 <xTaskPriorityDisinherit+0xdc>)
 800b5fa:	441a      	add	r2, r3
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	3304      	adds	r3, #4
 800b600:	4619      	mov	r1, r3
 800b602:	4610      	mov	r0, r2
 800b604:	f7fe f9b3 	bl	800996e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b608:	2301      	movs	r3, #1
 800b60a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b60c:	697b      	ldr	r3, [r7, #20]
	}
 800b60e:	4618      	mov	r0, r3
 800b610:	3718      	adds	r7, #24
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	200043b0 	.word	0x200043b0
 800b61c:	2000488c 	.word	0x2000488c
 800b620:	200043b4 	.word	0x200043b4

0800b624 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b62e:	4b21      	ldr	r3, [pc, #132]	; (800b6b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b634:	4b20      	ldr	r3, [pc, #128]	; (800b6b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3304      	adds	r3, #4
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fe f9f4 	bl	8009a28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b646:	d10a      	bne.n	800b65e <prvAddCurrentTaskToDelayedList+0x3a>
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d007      	beq.n	800b65e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b64e:	4b1a      	ldr	r3, [pc, #104]	; (800b6b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3304      	adds	r3, #4
 800b654:	4619      	mov	r1, r3
 800b656:	4819      	ldr	r0, [pc, #100]	; (800b6bc <prvAddCurrentTaskToDelayedList+0x98>)
 800b658:	f7fe f989 	bl	800996e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b65c:	e026      	b.n	800b6ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4413      	add	r3, r2
 800b664:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b666:	4b14      	ldr	r3, [pc, #80]	; (800b6b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	429a      	cmp	r2, r3
 800b674:	d209      	bcs.n	800b68a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b676:	4b12      	ldr	r3, [pc, #72]	; (800b6c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	4b0f      	ldr	r3, [pc, #60]	; (800b6b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	3304      	adds	r3, #4
 800b680:	4619      	mov	r1, r3
 800b682:	4610      	mov	r0, r2
 800b684:	f7fe f997 	bl	80099b6 <vListInsert>
}
 800b688:	e010      	b.n	800b6ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b68a:	4b0e      	ldr	r3, [pc, #56]	; (800b6c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	4b0a      	ldr	r3, [pc, #40]	; (800b6b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	3304      	adds	r3, #4
 800b694:	4619      	mov	r1, r3
 800b696:	4610      	mov	r0, r2
 800b698:	f7fe f98d 	bl	80099b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b69c:	4b0a      	ldr	r3, [pc, #40]	; (800b6c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d202      	bcs.n	800b6ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b6a6:	4a08      	ldr	r2, [pc, #32]	; (800b6c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	6013      	str	r3, [r2, #0]
}
 800b6ac:	bf00      	nop
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	20004888 	.word	0x20004888
 800b6b8:	200043b0 	.word	0x200043b0
 800b6bc:	20004870 	.word	0x20004870
 800b6c0:	20004840 	.word	0x20004840
 800b6c4:	2000483c 	.word	0x2000483c
 800b6c8:	200048a4 	.word	0x200048a4

0800b6cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08a      	sub	sp, #40	; 0x28
 800b6d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b6d6:	f000 fb0d 	bl	800bcf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b6da:	4b1d      	ldr	r3, [pc, #116]	; (800b750 <xTimerCreateTimerTask+0x84>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d021      	beq.n	800b726 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b6ea:	1d3a      	adds	r2, r7, #4
 800b6ec:	f107 0108 	add.w	r1, r7, #8
 800b6f0:	f107 030c 	add.w	r3, r7, #12
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fd ff13 	bl	8009520 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b6fa:	6879      	ldr	r1, [r7, #4]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	9202      	str	r2, [sp, #8]
 800b702:	9301      	str	r3, [sp, #4]
 800b704:	2302      	movs	r3, #2
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	2300      	movs	r3, #0
 800b70a:	460a      	mov	r2, r1
 800b70c:	4911      	ldr	r1, [pc, #68]	; (800b754 <xTimerCreateTimerTask+0x88>)
 800b70e:	4812      	ldr	r0, [pc, #72]	; (800b758 <xTimerCreateTimerTask+0x8c>)
 800b710:	f7ff f8d2 	bl	800a8b8 <xTaskCreateStatic>
 800b714:	4602      	mov	r2, r0
 800b716:	4b11      	ldr	r3, [pc, #68]	; (800b75c <xTimerCreateTimerTask+0x90>)
 800b718:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b71a:	4b10      	ldr	r3, [pc, #64]	; (800b75c <xTimerCreateTimerTask+0x90>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b722:	2301      	movs	r3, #1
 800b724:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10b      	bne.n	800b744 <xTimerCreateTimerTask+0x78>
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	b672      	cpsid	i
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	b662      	cpsie	i
 800b740:	613b      	str	r3, [r7, #16]
 800b742:	e7fe      	b.n	800b742 <xTimerCreateTimerTask+0x76>
	return xReturn;
 800b744:	697b      	ldr	r3, [r7, #20]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	200048e0 	.word	0x200048e0
 800b754:	0800c644 	.word	0x0800c644
 800b758:	0800b899 	.word	0x0800b899
 800b75c:	200048e4 	.word	0x200048e4

0800b760 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08a      	sub	sp, #40	; 0x28
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
 800b76c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b76e:	2300      	movs	r3, #0
 800b770:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10b      	bne.n	800b790 <xTimerGenericCommand+0x30>
 800b778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77c:	b672      	cpsid	i
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	b662      	cpsie	i
 800b78c:	623b      	str	r3, [r7, #32]
 800b78e:	e7fe      	b.n	800b78e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b790:	4b19      	ldr	r3, [pc, #100]	; (800b7f8 <xTimerGenericCommand+0x98>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d02a      	beq.n	800b7ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	2b05      	cmp	r3, #5
 800b7a8:	dc18      	bgt.n	800b7dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7aa:	f7ff fead 	bl	800b508 <xTaskGetSchedulerState>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d109      	bne.n	800b7c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7b4:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <xTimerGenericCommand+0x98>)
 800b7b6:	6818      	ldr	r0, [r3, #0]
 800b7b8:	f107 0110 	add.w	r1, r7, #16
 800b7bc:	2300      	movs	r3, #0
 800b7be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7c0:	f7fe fc8e 	bl	800a0e0 <xQueueGenericSend>
 800b7c4:	6278      	str	r0, [r7, #36]	; 0x24
 800b7c6:	e012      	b.n	800b7ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b7c8:	4b0b      	ldr	r3, [pc, #44]	; (800b7f8 <xTimerGenericCommand+0x98>)
 800b7ca:	6818      	ldr	r0, [r3, #0]
 800b7cc:	f107 0110 	add.w	r1, r7, #16
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f7fe fc84 	bl	800a0e0 <xQueueGenericSend>
 800b7d8:	6278      	str	r0, [r7, #36]	; 0x24
 800b7da:	e008      	b.n	800b7ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7dc:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <xTimerGenericCommand+0x98>)
 800b7de:	6818      	ldr	r0, [r3, #0]
 800b7e0:	f107 0110 	add.w	r1, r7, #16
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	683a      	ldr	r2, [r7, #0]
 800b7e8:	f7fe fd7c 	bl	800a2e4 <xQueueGenericSendFromISR>
 800b7ec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3728      	adds	r7, #40	; 0x28
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	200048e0 	.word	0x200048e0

0800b7fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af02      	add	r7, sp, #8
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b806:	4b23      	ldr	r3, [pc, #140]	; (800b894 <prvProcessExpiredTimer+0x98>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	3304      	adds	r3, #4
 800b814:	4618      	mov	r0, r3
 800b816:	f7fe f907 	bl	8009a28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b820:	f003 0304 	and.w	r3, r3, #4
 800b824:	2b00      	cmp	r3, #0
 800b826:	d023      	beq.n	800b870 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	699a      	ldr	r2, [r3, #24]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	18d1      	adds	r1, r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	6978      	ldr	r0, [r7, #20]
 800b836:	f000 f8d3 	bl	800b9e0 <prvInsertTimerInActiveList>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d020      	beq.n	800b882 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b840:	2300      	movs	r3, #0
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	2300      	movs	r3, #0
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	2100      	movs	r1, #0
 800b84a:	6978      	ldr	r0, [r7, #20]
 800b84c:	f7ff ff88 	bl	800b760 <xTimerGenericCommand>
 800b850:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d114      	bne.n	800b882 <prvProcessExpiredTimer+0x86>
 800b858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85c:	b672      	cpsid	i
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	b662      	cpsie	i
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	e7fe      	b.n	800b86e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b876:	f023 0301 	bic.w	r3, r3, #1
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	6a1b      	ldr	r3, [r3, #32]
 800b886:	6978      	ldr	r0, [r7, #20]
 800b888:	4798      	blx	r3
}
 800b88a:	bf00      	nop
 800b88c:	3718      	adds	r7, #24
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	200048d8 	.word	0x200048d8

0800b898 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8a0:	f107 0308 	add.w	r3, r7, #8
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f000 f857 	bl	800b958 <prvGetNextExpireTime>
 800b8aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f000 f803 	bl	800b8bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b8b6:	f000 f8d5 	bl	800ba64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8ba:	e7f1      	b.n	800b8a0 <prvTimerTask+0x8>

0800b8bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8c6:	f7ff fa3b 	bl	800ad40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8ca:	f107 0308 	add.w	r3, r7, #8
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f000 f866 	bl	800b9a0 <prvSampleTimeNow>
 800b8d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d130      	bne.n	800b93e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <prvProcessTimerOrBlockTask+0x3c>
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d806      	bhi.n	800b8f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b8ea:	f7ff fa37 	bl	800ad5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b8ee:	68f9      	ldr	r1, [r7, #12]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f7ff ff83 	bl	800b7fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b8f6:	e024      	b.n	800b942 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d008      	beq.n	800b910 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b8fe:	4b13      	ldr	r3, [pc, #76]	; (800b94c <prvProcessTimerOrBlockTask+0x90>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d101      	bne.n	800b90c <prvProcessTimerOrBlockTask+0x50>
 800b908:	2301      	movs	r3, #1
 800b90a:	e000      	b.n	800b90e <prvProcessTimerOrBlockTask+0x52>
 800b90c:	2300      	movs	r3, #0
 800b90e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b910:	4b0f      	ldr	r3, [pc, #60]	; (800b950 <prvProcessTimerOrBlockTask+0x94>)
 800b912:	6818      	ldr	r0, [r3, #0]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	683a      	ldr	r2, [r7, #0]
 800b91c:	4619      	mov	r1, r3
 800b91e:	f7fe ff97 	bl	800a850 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b922:	f7ff fa1b 	bl	800ad5c <xTaskResumeAll>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b92c:	4b09      	ldr	r3, [pc, #36]	; (800b954 <prvProcessTimerOrBlockTask+0x98>)
 800b92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	f3bf 8f6f 	isb	sy
}
 800b93c:	e001      	b.n	800b942 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b93e:	f7ff fa0d 	bl	800ad5c <xTaskResumeAll>
}
 800b942:	bf00      	nop
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	200048dc 	.word	0x200048dc
 800b950:	200048e0 	.word	0x200048e0
 800b954:	e000ed04 	.word	0xe000ed04

0800b958 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b960:	4b0e      	ldr	r3, [pc, #56]	; (800b99c <prvGetNextExpireTime+0x44>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <prvGetNextExpireTime+0x16>
 800b96a:	2201      	movs	r2, #1
 800b96c:	e000      	b.n	800b970 <prvGetNextExpireTime+0x18>
 800b96e:	2200      	movs	r2, #0
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d105      	bne.n	800b988 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b97c:	4b07      	ldr	r3, [pc, #28]	; (800b99c <prvGetNextExpireTime+0x44>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	60fb      	str	r3, [r7, #12]
 800b986:	e001      	b.n	800b98c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b988:	2300      	movs	r3, #0
 800b98a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b98c:	68fb      	ldr	r3, [r7, #12]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	200048d8 	.word	0x200048d8

0800b9a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b9a8:	f7ff fa76 	bl	800ae98 <xTaskGetTickCount>
 800b9ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b9ae:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <prvSampleTimeNow+0x3c>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d205      	bcs.n	800b9c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9b8:	f000 f936 	bl	800bc28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	601a      	str	r2, [r3, #0]
 800b9c2:	e002      	b.n	800b9ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9ca:	4a04      	ldr	r2, [pc, #16]	; (800b9dc <prvSampleTimeNow+0x3c>)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	200048e8 	.word	0x200048e8

0800b9e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d812      	bhi.n	800ba2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	1ad2      	subs	r2, r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	699b      	ldr	r3, [r3, #24]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d302      	bcc.n	800ba1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba14:	2301      	movs	r3, #1
 800ba16:	617b      	str	r3, [r7, #20]
 800ba18:	e01b      	b.n	800ba52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba1a:	4b10      	ldr	r3, [pc, #64]	; (800ba5c <prvInsertTimerInActiveList+0x7c>)
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	3304      	adds	r3, #4
 800ba22:	4619      	mov	r1, r3
 800ba24:	4610      	mov	r0, r2
 800ba26:	f7fd ffc6 	bl	80099b6 <vListInsert>
 800ba2a:	e012      	b.n	800ba52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d206      	bcs.n	800ba42 <prvInsertTimerInActiveList+0x62>
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d302      	bcc.n	800ba42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	617b      	str	r3, [r7, #20]
 800ba40:	e007      	b.n	800ba52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba42:	4b07      	ldr	r3, [pc, #28]	; (800ba60 <prvInsertTimerInActiveList+0x80>)
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	3304      	adds	r3, #4
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	f7fd ffb2 	bl	80099b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba52:	697b      	ldr	r3, [r7, #20]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3718      	adds	r7, #24
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	200048dc 	.word	0x200048dc
 800ba60:	200048d8 	.word	0x200048d8

0800ba64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b08e      	sub	sp, #56	; 0x38
 800ba68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba6a:	e0cc      	b.n	800bc06 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	da19      	bge.n	800baa6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba72:	1d3b      	adds	r3, r7, #4
 800ba74:	3304      	adds	r3, #4
 800ba76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10b      	bne.n	800ba96 <prvProcessReceivedCommands+0x32>
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	b672      	cpsid	i
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	b662      	cpsie	i
 800ba92:	61fb      	str	r3, [r7, #28]
 800ba94:	e7fe      	b.n	800ba94 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba9c:	6850      	ldr	r0, [r2, #4]
 800ba9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baa0:	6892      	ldr	r2, [r2, #8]
 800baa2:	4611      	mov	r1, r2
 800baa4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f2c0 80ab 	blt.w	800bc04 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d004      	beq.n	800bac4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babc:	3304      	adds	r3, #4
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fd ffb2 	bl	8009a28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bac4:	463b      	mov	r3, r7
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff ff6a 	bl	800b9a0 <prvSampleTimeNow>
 800bacc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b09      	cmp	r3, #9
 800bad2:	f200 8098 	bhi.w	800bc06 <prvProcessReceivedCommands+0x1a2>
 800bad6:	a201      	add	r2, pc, #4	; (adr r2, 800badc <prvProcessReceivedCommands+0x78>)
 800bad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800badc:	0800bb05 	.word	0x0800bb05
 800bae0:	0800bb05 	.word	0x0800bb05
 800bae4:	0800bb05 	.word	0x0800bb05
 800bae8:	0800bb7b 	.word	0x0800bb7b
 800baec:	0800bb8f 	.word	0x0800bb8f
 800baf0:	0800bbdb 	.word	0x0800bbdb
 800baf4:	0800bb05 	.word	0x0800bb05
 800baf8:	0800bb05 	.word	0x0800bb05
 800bafc:	0800bb7b 	.word	0x0800bb7b
 800bb00:	0800bb8f 	.word	0x0800bb8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb0a:	f043 0301 	orr.w	r3, r3, #1
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	18d1      	adds	r1, r2, r3
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb24:	f7ff ff5c 	bl	800b9e0 <prvInsertTimerInActiveList>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d06b      	beq.n	800bc06 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb30:	6a1b      	ldr	r3, [r3, #32]
 800bb32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb3c:	f003 0304 	and.w	r3, r3, #4
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d060      	beq.n	800bc06 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	441a      	add	r2, r3
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	2300      	movs	r3, #0
 800bb52:	2100      	movs	r1, #0
 800bb54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb56:	f7ff fe03 	bl	800b760 <xTimerGenericCommand>
 800bb5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d151      	bne.n	800bc06 <prvProcessReceivedCommands+0x1a2>
 800bb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb66:	b672      	cpsid	i
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	b662      	cpsie	i
 800bb76:	61bb      	str	r3, [r7, #24]
 800bb78:	e7fe      	b.n	800bb78 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb80:	f023 0301 	bic.w	r3, r3, #1
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bb8c:	e03b      	b.n	800bc06 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb94:	f043 0301 	orr.w	r3, r3, #1
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bba0:	68ba      	ldr	r2, [r7, #8]
 800bba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10b      	bne.n	800bbc6 <prvProcessReceivedCommands+0x162>
 800bbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb2:	b672      	cpsid	i
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	b662      	cpsie	i
 800bbc2:	617b      	str	r3, [r7, #20]
 800bbc4:	e7fe      	b.n	800bbc4 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	699a      	ldr	r2, [r3, #24]
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	18d1      	adds	r1, r2, r3
 800bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbd4:	f7ff ff04 	bl	800b9e0 <prvInsertTimerInActiveList>
					break;
 800bbd8:	e015      	b.n	800bc06 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d103      	bne.n	800bbf0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bbe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbea:	f7fd fd7b 	bl	80096e4 <vPortFree>
 800bbee:	e00a      	b.n	800bc06 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbf6:	f023 0301 	bic.w	r3, r3, #1
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc02:	e000      	b.n	800bc06 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bc04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc06:	4b07      	ldr	r3, [pc, #28]	; (800bc24 <prvProcessReceivedCommands+0x1c0>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	1d39      	adds	r1, r7, #4
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fe fc04 	bl	800a41c <xQueueReceive>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f47f af28 	bne.w	800ba6c <prvProcessReceivedCommands+0x8>
	}
}
 800bc1c:	bf00      	nop
 800bc1e:	3730      	adds	r7, #48	; 0x30
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	200048e0 	.word	0x200048e0

0800bc28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b088      	sub	sp, #32
 800bc2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc2e:	e049      	b.n	800bcc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc30:	4b2e      	ldr	r3, [pc, #184]	; (800bcec <prvSwitchTimerLists+0xc4>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc3a:	4b2c      	ldr	r3, [pc, #176]	; (800bcec <prvSwitchTimerLists+0xc4>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	3304      	adds	r3, #4
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fd feed 	bl	8009a28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6a1b      	ldr	r3, [r3, #32]
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc5c:	f003 0304 	and.w	r3, r3, #4
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d02f      	beq.n	800bcc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	693a      	ldr	r2, [r7, #16]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d90e      	bls.n	800bc94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc82:	4b1a      	ldr	r3, [pc, #104]	; (800bcec <prvSwitchTimerLists+0xc4>)
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	3304      	adds	r3, #4
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	f7fd fe92 	bl	80099b6 <vListInsert>
 800bc92:	e017      	b.n	800bcc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc94:	2300      	movs	r3, #0
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	2300      	movs	r3, #0
 800bc9a:	693a      	ldr	r2, [r7, #16]
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f7ff fd5e 	bl	800b760 <xTimerGenericCommand>
 800bca4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10b      	bne.n	800bcc4 <prvSwitchTimerLists+0x9c>
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	b672      	cpsid	i
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	b662      	cpsie	i
 800bcc0:	603b      	str	r3, [r7, #0]
 800bcc2:	e7fe      	b.n	800bcc2 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcc4:	4b09      	ldr	r3, [pc, #36]	; (800bcec <prvSwitchTimerLists+0xc4>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1b0      	bne.n	800bc30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bcce:	4b07      	ldr	r3, [pc, #28]	; (800bcec <prvSwitchTimerLists+0xc4>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bcd4:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <prvSwitchTimerLists+0xc8>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a04      	ldr	r2, [pc, #16]	; (800bcec <prvSwitchTimerLists+0xc4>)
 800bcda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bcdc:	4a04      	ldr	r2, [pc, #16]	; (800bcf0 <prvSwitchTimerLists+0xc8>)
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	6013      	str	r3, [r2, #0]
}
 800bce2:	bf00      	nop
 800bce4:	3718      	adds	r7, #24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	200048d8 	.word	0x200048d8
 800bcf0:	200048dc 	.word	0x200048dc

0800bcf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bcfa:	f7fd ffc5 	bl	8009c88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bcfe:	4b15      	ldr	r3, [pc, #84]	; (800bd54 <prvCheckForValidListAndQueue+0x60>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d120      	bne.n	800bd48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd06:	4814      	ldr	r0, [pc, #80]	; (800bd58 <prvCheckForValidListAndQueue+0x64>)
 800bd08:	f7fd fe04 	bl	8009914 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd0c:	4813      	ldr	r0, [pc, #76]	; (800bd5c <prvCheckForValidListAndQueue+0x68>)
 800bd0e:	f7fd fe01 	bl	8009914 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd12:	4b13      	ldr	r3, [pc, #76]	; (800bd60 <prvCheckForValidListAndQueue+0x6c>)
 800bd14:	4a10      	ldr	r2, [pc, #64]	; (800bd58 <prvCheckForValidListAndQueue+0x64>)
 800bd16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd18:	4b12      	ldr	r3, [pc, #72]	; (800bd64 <prvCheckForValidListAndQueue+0x70>)
 800bd1a:	4a10      	ldr	r2, [pc, #64]	; (800bd5c <prvCheckForValidListAndQueue+0x68>)
 800bd1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd1e:	2300      	movs	r3, #0
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <prvCheckForValidListAndQueue+0x74>)
 800bd24:	4a11      	ldr	r2, [pc, #68]	; (800bd6c <prvCheckForValidListAndQueue+0x78>)
 800bd26:	2110      	movs	r1, #16
 800bd28:	200a      	movs	r0, #10
 800bd2a:	f7fe f939 	bl	8009fa0 <xQueueGenericCreateStatic>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	4b08      	ldr	r3, [pc, #32]	; (800bd54 <prvCheckForValidListAndQueue+0x60>)
 800bd32:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd34:	4b07      	ldr	r3, [pc, #28]	; (800bd54 <prvCheckForValidListAndQueue+0x60>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d005      	beq.n	800bd48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd3c:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <prvCheckForValidListAndQueue+0x60>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	490b      	ldr	r1, [pc, #44]	; (800bd70 <prvCheckForValidListAndQueue+0x7c>)
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fe fd5c 	bl	800a800 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd48:	f7fd ffd0 	bl	8009cec <vPortExitCritical>
}
 800bd4c:	bf00      	nop
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	200048e0 	.word	0x200048e0
 800bd58:	200048b0 	.word	0x200048b0
 800bd5c:	200048c4 	.word	0x200048c4
 800bd60:	200048d8 	.word	0x200048d8
 800bd64:	200048dc 	.word	0x200048dc
 800bd68:	2000498c 	.word	0x2000498c
 800bd6c:	200048ec 	.word	0x200048ec
 800bd70:	0800c64c 	.word	0x0800c64c

0800bd74 <__errno>:
 800bd74:	4b01      	ldr	r3, [pc, #4]	; (800bd7c <__errno+0x8>)
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	20000034 	.word	0x20000034

0800bd80 <__libc_init_array>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	4e0d      	ldr	r6, [pc, #52]	; (800bdb8 <__libc_init_array+0x38>)
 800bd84:	4c0d      	ldr	r4, [pc, #52]	; (800bdbc <__libc_init_array+0x3c>)
 800bd86:	1ba4      	subs	r4, r4, r6
 800bd88:	10a4      	asrs	r4, r4, #2
 800bd8a:	2500      	movs	r5, #0
 800bd8c:	42a5      	cmp	r5, r4
 800bd8e:	d109      	bne.n	800bda4 <__libc_init_array+0x24>
 800bd90:	4e0b      	ldr	r6, [pc, #44]	; (800bdc0 <__libc_init_array+0x40>)
 800bd92:	4c0c      	ldr	r4, [pc, #48]	; (800bdc4 <__libc_init_array+0x44>)
 800bd94:	f000 fc28 	bl	800c5e8 <_init>
 800bd98:	1ba4      	subs	r4, r4, r6
 800bd9a:	10a4      	asrs	r4, r4, #2
 800bd9c:	2500      	movs	r5, #0
 800bd9e:	42a5      	cmp	r5, r4
 800bda0:	d105      	bne.n	800bdae <__libc_init_array+0x2e>
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bda8:	4798      	blx	r3
 800bdaa:	3501      	adds	r5, #1
 800bdac:	e7ee      	b.n	800bd8c <__libc_init_array+0xc>
 800bdae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdb2:	4798      	blx	r3
 800bdb4:	3501      	adds	r5, #1
 800bdb6:	e7f2      	b.n	800bd9e <__libc_init_array+0x1e>
 800bdb8:	0800c71c 	.word	0x0800c71c
 800bdbc:	0800c71c 	.word	0x0800c71c
 800bdc0:	0800c71c 	.word	0x0800c71c
 800bdc4:	0800c720 	.word	0x0800c720

0800bdc8 <memcpy>:
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	1e43      	subs	r3, r0, #1
 800bdcc:	440a      	add	r2, r1
 800bdce:	4291      	cmp	r1, r2
 800bdd0:	d100      	bne.n	800bdd4 <memcpy+0xc>
 800bdd2:	bd10      	pop	{r4, pc}
 800bdd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bddc:	e7f7      	b.n	800bdce <memcpy+0x6>

0800bdde <memset>:
 800bdde:	4402      	add	r2, r0
 800bde0:	4603      	mov	r3, r0
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d100      	bne.n	800bde8 <memset+0xa>
 800bde6:	4770      	bx	lr
 800bde8:	f803 1b01 	strb.w	r1, [r3], #1
 800bdec:	e7f9      	b.n	800bde2 <memset+0x4>
	...

0800bdf0 <siprintf>:
 800bdf0:	b40e      	push	{r1, r2, r3}
 800bdf2:	b500      	push	{lr}
 800bdf4:	b09c      	sub	sp, #112	; 0x70
 800bdf6:	ab1d      	add	r3, sp, #116	; 0x74
 800bdf8:	9002      	str	r0, [sp, #8]
 800bdfa:	9006      	str	r0, [sp, #24]
 800bdfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be00:	4809      	ldr	r0, [pc, #36]	; (800be28 <siprintf+0x38>)
 800be02:	9107      	str	r1, [sp, #28]
 800be04:	9104      	str	r1, [sp, #16]
 800be06:	4909      	ldr	r1, [pc, #36]	; (800be2c <siprintf+0x3c>)
 800be08:	f853 2b04 	ldr.w	r2, [r3], #4
 800be0c:	9105      	str	r1, [sp, #20]
 800be0e:	6800      	ldr	r0, [r0, #0]
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	a902      	add	r1, sp, #8
 800be14:	f000 f866 	bl	800bee4 <_svfiprintf_r>
 800be18:	9b02      	ldr	r3, [sp, #8]
 800be1a:	2200      	movs	r2, #0
 800be1c:	701a      	strb	r2, [r3, #0]
 800be1e:	b01c      	add	sp, #112	; 0x70
 800be20:	f85d eb04 	ldr.w	lr, [sp], #4
 800be24:	b003      	add	sp, #12
 800be26:	4770      	bx	lr
 800be28:	20000034 	.word	0x20000034
 800be2c:	ffff0208 	.word	0xffff0208

0800be30 <__ssputs_r>:
 800be30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be34:	688e      	ldr	r6, [r1, #8]
 800be36:	429e      	cmp	r6, r3
 800be38:	4682      	mov	sl, r0
 800be3a:	460c      	mov	r4, r1
 800be3c:	4690      	mov	r8, r2
 800be3e:	4699      	mov	r9, r3
 800be40:	d837      	bhi.n	800beb2 <__ssputs_r+0x82>
 800be42:	898a      	ldrh	r2, [r1, #12]
 800be44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be48:	d031      	beq.n	800beae <__ssputs_r+0x7e>
 800be4a:	6825      	ldr	r5, [r4, #0]
 800be4c:	6909      	ldr	r1, [r1, #16]
 800be4e:	1a6f      	subs	r7, r5, r1
 800be50:	6965      	ldr	r5, [r4, #20]
 800be52:	2302      	movs	r3, #2
 800be54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be58:	fb95 f5f3 	sdiv	r5, r5, r3
 800be5c:	f109 0301 	add.w	r3, r9, #1
 800be60:	443b      	add	r3, r7
 800be62:	429d      	cmp	r5, r3
 800be64:	bf38      	it	cc
 800be66:	461d      	movcc	r5, r3
 800be68:	0553      	lsls	r3, r2, #21
 800be6a:	d530      	bpl.n	800bece <__ssputs_r+0x9e>
 800be6c:	4629      	mov	r1, r5
 800be6e:	f000 fb21 	bl	800c4b4 <_malloc_r>
 800be72:	4606      	mov	r6, r0
 800be74:	b950      	cbnz	r0, 800be8c <__ssputs_r+0x5c>
 800be76:	230c      	movs	r3, #12
 800be78:	f8ca 3000 	str.w	r3, [sl]
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be82:	81a3      	strh	r3, [r4, #12]
 800be84:	f04f 30ff 	mov.w	r0, #4294967295
 800be88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be8c:	463a      	mov	r2, r7
 800be8e:	6921      	ldr	r1, [r4, #16]
 800be90:	f7ff ff9a 	bl	800bdc8 <memcpy>
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	6126      	str	r6, [r4, #16]
 800bea2:	6165      	str	r5, [r4, #20]
 800bea4:	443e      	add	r6, r7
 800bea6:	1bed      	subs	r5, r5, r7
 800bea8:	6026      	str	r6, [r4, #0]
 800beaa:	60a5      	str	r5, [r4, #8]
 800beac:	464e      	mov	r6, r9
 800beae:	454e      	cmp	r6, r9
 800beb0:	d900      	bls.n	800beb4 <__ssputs_r+0x84>
 800beb2:	464e      	mov	r6, r9
 800beb4:	4632      	mov	r2, r6
 800beb6:	4641      	mov	r1, r8
 800beb8:	6820      	ldr	r0, [r4, #0]
 800beba:	f000 fa93 	bl	800c3e4 <memmove>
 800bebe:	68a3      	ldr	r3, [r4, #8]
 800bec0:	1b9b      	subs	r3, r3, r6
 800bec2:	60a3      	str	r3, [r4, #8]
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	441e      	add	r6, r3
 800bec8:	6026      	str	r6, [r4, #0]
 800beca:	2000      	movs	r0, #0
 800becc:	e7dc      	b.n	800be88 <__ssputs_r+0x58>
 800bece:	462a      	mov	r2, r5
 800bed0:	f000 fb4a 	bl	800c568 <_realloc_r>
 800bed4:	4606      	mov	r6, r0
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d1e2      	bne.n	800bea0 <__ssputs_r+0x70>
 800beda:	6921      	ldr	r1, [r4, #16]
 800bedc:	4650      	mov	r0, sl
 800bede:	f000 fa9b 	bl	800c418 <_free_r>
 800bee2:	e7c8      	b.n	800be76 <__ssputs_r+0x46>

0800bee4 <_svfiprintf_r>:
 800bee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee8:	461d      	mov	r5, r3
 800beea:	898b      	ldrh	r3, [r1, #12]
 800beec:	061f      	lsls	r7, r3, #24
 800beee:	b09d      	sub	sp, #116	; 0x74
 800bef0:	4680      	mov	r8, r0
 800bef2:	460c      	mov	r4, r1
 800bef4:	4616      	mov	r6, r2
 800bef6:	d50f      	bpl.n	800bf18 <_svfiprintf_r+0x34>
 800bef8:	690b      	ldr	r3, [r1, #16]
 800befa:	b96b      	cbnz	r3, 800bf18 <_svfiprintf_r+0x34>
 800befc:	2140      	movs	r1, #64	; 0x40
 800befe:	f000 fad9 	bl	800c4b4 <_malloc_r>
 800bf02:	6020      	str	r0, [r4, #0]
 800bf04:	6120      	str	r0, [r4, #16]
 800bf06:	b928      	cbnz	r0, 800bf14 <_svfiprintf_r+0x30>
 800bf08:	230c      	movs	r3, #12
 800bf0a:	f8c8 3000 	str.w	r3, [r8]
 800bf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf12:	e0c8      	b.n	800c0a6 <_svfiprintf_r+0x1c2>
 800bf14:	2340      	movs	r3, #64	; 0x40
 800bf16:	6163      	str	r3, [r4, #20]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf1c:	2320      	movs	r3, #32
 800bf1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf22:	2330      	movs	r3, #48	; 0x30
 800bf24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf28:	9503      	str	r5, [sp, #12]
 800bf2a:	f04f 0b01 	mov.w	fp, #1
 800bf2e:	4637      	mov	r7, r6
 800bf30:	463d      	mov	r5, r7
 800bf32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf36:	b10b      	cbz	r3, 800bf3c <_svfiprintf_r+0x58>
 800bf38:	2b25      	cmp	r3, #37	; 0x25
 800bf3a:	d13e      	bne.n	800bfba <_svfiprintf_r+0xd6>
 800bf3c:	ebb7 0a06 	subs.w	sl, r7, r6
 800bf40:	d00b      	beq.n	800bf5a <_svfiprintf_r+0x76>
 800bf42:	4653      	mov	r3, sl
 800bf44:	4632      	mov	r2, r6
 800bf46:	4621      	mov	r1, r4
 800bf48:	4640      	mov	r0, r8
 800bf4a:	f7ff ff71 	bl	800be30 <__ssputs_r>
 800bf4e:	3001      	adds	r0, #1
 800bf50:	f000 80a4 	beq.w	800c09c <_svfiprintf_r+0x1b8>
 800bf54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf56:	4453      	add	r3, sl
 800bf58:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5a:	783b      	ldrb	r3, [r7, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 809d 	beq.w	800c09c <_svfiprintf_r+0x1b8>
 800bf62:	2300      	movs	r3, #0
 800bf64:	f04f 32ff 	mov.w	r2, #4294967295
 800bf68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf6c:	9304      	str	r3, [sp, #16]
 800bf6e:	9307      	str	r3, [sp, #28]
 800bf70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf74:	931a      	str	r3, [sp, #104]	; 0x68
 800bf76:	462f      	mov	r7, r5
 800bf78:	2205      	movs	r2, #5
 800bf7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bf7e:	4850      	ldr	r0, [pc, #320]	; (800c0c0 <_svfiprintf_r+0x1dc>)
 800bf80:	f7f4 f946 	bl	8000210 <memchr>
 800bf84:	9b04      	ldr	r3, [sp, #16]
 800bf86:	b9d0      	cbnz	r0, 800bfbe <_svfiprintf_r+0xda>
 800bf88:	06d9      	lsls	r1, r3, #27
 800bf8a:	bf44      	itt	mi
 800bf8c:	2220      	movmi	r2, #32
 800bf8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf92:	071a      	lsls	r2, r3, #28
 800bf94:	bf44      	itt	mi
 800bf96:	222b      	movmi	r2, #43	; 0x2b
 800bf98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf9c:	782a      	ldrb	r2, [r5, #0]
 800bf9e:	2a2a      	cmp	r2, #42	; 0x2a
 800bfa0:	d015      	beq.n	800bfce <_svfiprintf_r+0xea>
 800bfa2:	9a07      	ldr	r2, [sp, #28]
 800bfa4:	462f      	mov	r7, r5
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	250a      	movs	r5, #10
 800bfaa:	4639      	mov	r1, r7
 800bfac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfb0:	3b30      	subs	r3, #48	; 0x30
 800bfb2:	2b09      	cmp	r3, #9
 800bfb4:	d94d      	bls.n	800c052 <_svfiprintf_r+0x16e>
 800bfb6:	b1b8      	cbz	r0, 800bfe8 <_svfiprintf_r+0x104>
 800bfb8:	e00f      	b.n	800bfda <_svfiprintf_r+0xf6>
 800bfba:	462f      	mov	r7, r5
 800bfbc:	e7b8      	b.n	800bf30 <_svfiprintf_r+0x4c>
 800bfbe:	4a40      	ldr	r2, [pc, #256]	; (800c0c0 <_svfiprintf_r+0x1dc>)
 800bfc0:	1a80      	subs	r0, r0, r2
 800bfc2:	fa0b f000 	lsl.w	r0, fp, r0
 800bfc6:	4318      	orrs	r0, r3
 800bfc8:	9004      	str	r0, [sp, #16]
 800bfca:	463d      	mov	r5, r7
 800bfcc:	e7d3      	b.n	800bf76 <_svfiprintf_r+0x92>
 800bfce:	9a03      	ldr	r2, [sp, #12]
 800bfd0:	1d11      	adds	r1, r2, #4
 800bfd2:	6812      	ldr	r2, [r2, #0]
 800bfd4:	9103      	str	r1, [sp, #12]
 800bfd6:	2a00      	cmp	r2, #0
 800bfd8:	db01      	blt.n	800bfde <_svfiprintf_r+0xfa>
 800bfda:	9207      	str	r2, [sp, #28]
 800bfdc:	e004      	b.n	800bfe8 <_svfiprintf_r+0x104>
 800bfde:	4252      	negs	r2, r2
 800bfe0:	f043 0302 	orr.w	r3, r3, #2
 800bfe4:	9207      	str	r2, [sp, #28]
 800bfe6:	9304      	str	r3, [sp, #16]
 800bfe8:	783b      	ldrb	r3, [r7, #0]
 800bfea:	2b2e      	cmp	r3, #46	; 0x2e
 800bfec:	d10c      	bne.n	800c008 <_svfiprintf_r+0x124>
 800bfee:	787b      	ldrb	r3, [r7, #1]
 800bff0:	2b2a      	cmp	r3, #42	; 0x2a
 800bff2:	d133      	bne.n	800c05c <_svfiprintf_r+0x178>
 800bff4:	9b03      	ldr	r3, [sp, #12]
 800bff6:	1d1a      	adds	r2, r3, #4
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	9203      	str	r2, [sp, #12]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	bfb8      	it	lt
 800c000:	f04f 33ff 	movlt.w	r3, #4294967295
 800c004:	3702      	adds	r7, #2
 800c006:	9305      	str	r3, [sp, #20]
 800c008:	4d2e      	ldr	r5, [pc, #184]	; (800c0c4 <_svfiprintf_r+0x1e0>)
 800c00a:	7839      	ldrb	r1, [r7, #0]
 800c00c:	2203      	movs	r2, #3
 800c00e:	4628      	mov	r0, r5
 800c010:	f7f4 f8fe 	bl	8000210 <memchr>
 800c014:	b138      	cbz	r0, 800c026 <_svfiprintf_r+0x142>
 800c016:	2340      	movs	r3, #64	; 0x40
 800c018:	1b40      	subs	r0, r0, r5
 800c01a:	fa03 f000 	lsl.w	r0, r3, r0
 800c01e:	9b04      	ldr	r3, [sp, #16]
 800c020:	4303      	orrs	r3, r0
 800c022:	3701      	adds	r7, #1
 800c024:	9304      	str	r3, [sp, #16]
 800c026:	7839      	ldrb	r1, [r7, #0]
 800c028:	4827      	ldr	r0, [pc, #156]	; (800c0c8 <_svfiprintf_r+0x1e4>)
 800c02a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c02e:	2206      	movs	r2, #6
 800c030:	1c7e      	adds	r6, r7, #1
 800c032:	f7f4 f8ed 	bl	8000210 <memchr>
 800c036:	2800      	cmp	r0, #0
 800c038:	d038      	beq.n	800c0ac <_svfiprintf_r+0x1c8>
 800c03a:	4b24      	ldr	r3, [pc, #144]	; (800c0cc <_svfiprintf_r+0x1e8>)
 800c03c:	bb13      	cbnz	r3, 800c084 <_svfiprintf_r+0x1a0>
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	3307      	adds	r3, #7
 800c042:	f023 0307 	bic.w	r3, r3, #7
 800c046:	3308      	adds	r3, #8
 800c048:	9303      	str	r3, [sp, #12]
 800c04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c04c:	444b      	add	r3, r9
 800c04e:	9309      	str	r3, [sp, #36]	; 0x24
 800c050:	e76d      	b.n	800bf2e <_svfiprintf_r+0x4a>
 800c052:	fb05 3202 	mla	r2, r5, r2, r3
 800c056:	2001      	movs	r0, #1
 800c058:	460f      	mov	r7, r1
 800c05a:	e7a6      	b.n	800bfaa <_svfiprintf_r+0xc6>
 800c05c:	2300      	movs	r3, #0
 800c05e:	3701      	adds	r7, #1
 800c060:	9305      	str	r3, [sp, #20]
 800c062:	4619      	mov	r1, r3
 800c064:	250a      	movs	r5, #10
 800c066:	4638      	mov	r0, r7
 800c068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06c:	3a30      	subs	r2, #48	; 0x30
 800c06e:	2a09      	cmp	r2, #9
 800c070:	d903      	bls.n	800c07a <_svfiprintf_r+0x196>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d0c8      	beq.n	800c008 <_svfiprintf_r+0x124>
 800c076:	9105      	str	r1, [sp, #20]
 800c078:	e7c6      	b.n	800c008 <_svfiprintf_r+0x124>
 800c07a:	fb05 2101 	mla	r1, r5, r1, r2
 800c07e:	2301      	movs	r3, #1
 800c080:	4607      	mov	r7, r0
 800c082:	e7f0      	b.n	800c066 <_svfiprintf_r+0x182>
 800c084:	ab03      	add	r3, sp, #12
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	4622      	mov	r2, r4
 800c08a:	4b11      	ldr	r3, [pc, #68]	; (800c0d0 <_svfiprintf_r+0x1ec>)
 800c08c:	a904      	add	r1, sp, #16
 800c08e:	4640      	mov	r0, r8
 800c090:	f3af 8000 	nop.w
 800c094:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c098:	4681      	mov	r9, r0
 800c09a:	d1d6      	bne.n	800c04a <_svfiprintf_r+0x166>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	065b      	lsls	r3, r3, #25
 800c0a0:	f53f af35 	bmi.w	800bf0e <_svfiprintf_r+0x2a>
 800c0a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0a6:	b01d      	add	sp, #116	; 0x74
 800c0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ac:	ab03      	add	r3, sp, #12
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	4622      	mov	r2, r4
 800c0b2:	4b07      	ldr	r3, [pc, #28]	; (800c0d0 <_svfiprintf_r+0x1ec>)
 800c0b4:	a904      	add	r1, sp, #16
 800c0b6:	4640      	mov	r0, r8
 800c0b8:	f000 f882 	bl	800c1c0 <_printf_i>
 800c0bc:	e7ea      	b.n	800c094 <_svfiprintf_r+0x1b0>
 800c0be:	bf00      	nop
 800c0c0:	0800c6e0 	.word	0x0800c6e0
 800c0c4:	0800c6e6 	.word	0x0800c6e6
 800c0c8:	0800c6ea 	.word	0x0800c6ea
 800c0cc:	00000000 	.word	0x00000000
 800c0d0:	0800be31 	.word	0x0800be31

0800c0d4 <_printf_common>:
 800c0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d8:	4691      	mov	r9, r2
 800c0da:	461f      	mov	r7, r3
 800c0dc:	688a      	ldr	r2, [r1, #8]
 800c0de:	690b      	ldr	r3, [r1, #16]
 800c0e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	bfb8      	it	lt
 800c0e8:	4613      	movlt	r3, r2
 800c0ea:	f8c9 3000 	str.w	r3, [r9]
 800c0ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0f2:	4606      	mov	r6, r0
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	b112      	cbz	r2, 800c0fe <_printf_common+0x2a>
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	f8c9 3000 	str.w	r3, [r9]
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	0699      	lsls	r1, r3, #26
 800c102:	bf42      	ittt	mi
 800c104:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c108:	3302      	addmi	r3, #2
 800c10a:	f8c9 3000 	strmi.w	r3, [r9]
 800c10e:	6825      	ldr	r5, [r4, #0]
 800c110:	f015 0506 	ands.w	r5, r5, #6
 800c114:	d107      	bne.n	800c126 <_printf_common+0x52>
 800c116:	f104 0a19 	add.w	sl, r4, #25
 800c11a:	68e3      	ldr	r3, [r4, #12]
 800c11c:	f8d9 2000 	ldr.w	r2, [r9]
 800c120:	1a9b      	subs	r3, r3, r2
 800c122:	42ab      	cmp	r3, r5
 800c124:	dc28      	bgt.n	800c178 <_printf_common+0xa4>
 800c126:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c12a:	6822      	ldr	r2, [r4, #0]
 800c12c:	3300      	adds	r3, #0
 800c12e:	bf18      	it	ne
 800c130:	2301      	movne	r3, #1
 800c132:	0692      	lsls	r2, r2, #26
 800c134:	d42d      	bmi.n	800c192 <_printf_common+0xbe>
 800c136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c13a:	4639      	mov	r1, r7
 800c13c:	4630      	mov	r0, r6
 800c13e:	47c0      	blx	r8
 800c140:	3001      	adds	r0, #1
 800c142:	d020      	beq.n	800c186 <_printf_common+0xb2>
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	68e5      	ldr	r5, [r4, #12]
 800c148:	f8d9 2000 	ldr.w	r2, [r9]
 800c14c:	f003 0306 	and.w	r3, r3, #6
 800c150:	2b04      	cmp	r3, #4
 800c152:	bf08      	it	eq
 800c154:	1aad      	subeq	r5, r5, r2
 800c156:	68a3      	ldr	r3, [r4, #8]
 800c158:	6922      	ldr	r2, [r4, #16]
 800c15a:	bf0c      	ite	eq
 800c15c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c160:	2500      	movne	r5, #0
 800c162:	4293      	cmp	r3, r2
 800c164:	bfc4      	itt	gt
 800c166:	1a9b      	subgt	r3, r3, r2
 800c168:	18ed      	addgt	r5, r5, r3
 800c16a:	f04f 0900 	mov.w	r9, #0
 800c16e:	341a      	adds	r4, #26
 800c170:	454d      	cmp	r5, r9
 800c172:	d11a      	bne.n	800c1aa <_printf_common+0xd6>
 800c174:	2000      	movs	r0, #0
 800c176:	e008      	b.n	800c18a <_printf_common+0xb6>
 800c178:	2301      	movs	r3, #1
 800c17a:	4652      	mov	r2, sl
 800c17c:	4639      	mov	r1, r7
 800c17e:	4630      	mov	r0, r6
 800c180:	47c0      	blx	r8
 800c182:	3001      	adds	r0, #1
 800c184:	d103      	bne.n	800c18e <_printf_common+0xba>
 800c186:	f04f 30ff 	mov.w	r0, #4294967295
 800c18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c18e:	3501      	adds	r5, #1
 800c190:	e7c3      	b.n	800c11a <_printf_common+0x46>
 800c192:	18e1      	adds	r1, r4, r3
 800c194:	1c5a      	adds	r2, r3, #1
 800c196:	2030      	movs	r0, #48	; 0x30
 800c198:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c19c:	4422      	add	r2, r4
 800c19e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1a6:	3302      	adds	r3, #2
 800c1a8:	e7c5      	b.n	800c136 <_printf_common+0x62>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	4622      	mov	r2, r4
 800c1ae:	4639      	mov	r1, r7
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	47c0      	blx	r8
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d0e6      	beq.n	800c186 <_printf_common+0xb2>
 800c1b8:	f109 0901 	add.w	r9, r9, #1
 800c1bc:	e7d8      	b.n	800c170 <_printf_common+0x9c>
	...

0800c1c0 <_printf_i>:
 800c1c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	7e09      	ldrb	r1, [r1, #24]
 800c1cc:	b085      	sub	sp, #20
 800c1ce:	296e      	cmp	r1, #110	; 0x6e
 800c1d0:	4617      	mov	r7, r2
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	4698      	mov	r8, r3
 800c1d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1d8:	f000 80b3 	beq.w	800c342 <_printf_i+0x182>
 800c1dc:	d822      	bhi.n	800c224 <_printf_i+0x64>
 800c1de:	2963      	cmp	r1, #99	; 0x63
 800c1e0:	d036      	beq.n	800c250 <_printf_i+0x90>
 800c1e2:	d80a      	bhi.n	800c1fa <_printf_i+0x3a>
 800c1e4:	2900      	cmp	r1, #0
 800c1e6:	f000 80b9 	beq.w	800c35c <_printf_i+0x19c>
 800c1ea:	2958      	cmp	r1, #88	; 0x58
 800c1ec:	f000 8083 	beq.w	800c2f6 <_printf_i+0x136>
 800c1f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c1f8:	e032      	b.n	800c260 <_printf_i+0xa0>
 800c1fa:	2964      	cmp	r1, #100	; 0x64
 800c1fc:	d001      	beq.n	800c202 <_printf_i+0x42>
 800c1fe:	2969      	cmp	r1, #105	; 0x69
 800c200:	d1f6      	bne.n	800c1f0 <_printf_i+0x30>
 800c202:	6820      	ldr	r0, [r4, #0]
 800c204:	6813      	ldr	r3, [r2, #0]
 800c206:	0605      	lsls	r5, r0, #24
 800c208:	f103 0104 	add.w	r1, r3, #4
 800c20c:	d52a      	bpl.n	800c264 <_printf_i+0xa4>
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6011      	str	r1, [r2, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	da03      	bge.n	800c21e <_printf_i+0x5e>
 800c216:	222d      	movs	r2, #45	; 0x2d
 800c218:	425b      	negs	r3, r3
 800c21a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c21e:	486f      	ldr	r0, [pc, #444]	; (800c3dc <_printf_i+0x21c>)
 800c220:	220a      	movs	r2, #10
 800c222:	e039      	b.n	800c298 <_printf_i+0xd8>
 800c224:	2973      	cmp	r1, #115	; 0x73
 800c226:	f000 809d 	beq.w	800c364 <_printf_i+0x1a4>
 800c22a:	d808      	bhi.n	800c23e <_printf_i+0x7e>
 800c22c:	296f      	cmp	r1, #111	; 0x6f
 800c22e:	d020      	beq.n	800c272 <_printf_i+0xb2>
 800c230:	2970      	cmp	r1, #112	; 0x70
 800c232:	d1dd      	bne.n	800c1f0 <_printf_i+0x30>
 800c234:	6823      	ldr	r3, [r4, #0]
 800c236:	f043 0320 	orr.w	r3, r3, #32
 800c23a:	6023      	str	r3, [r4, #0]
 800c23c:	e003      	b.n	800c246 <_printf_i+0x86>
 800c23e:	2975      	cmp	r1, #117	; 0x75
 800c240:	d017      	beq.n	800c272 <_printf_i+0xb2>
 800c242:	2978      	cmp	r1, #120	; 0x78
 800c244:	d1d4      	bne.n	800c1f0 <_printf_i+0x30>
 800c246:	2378      	movs	r3, #120	; 0x78
 800c248:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c24c:	4864      	ldr	r0, [pc, #400]	; (800c3e0 <_printf_i+0x220>)
 800c24e:	e055      	b.n	800c2fc <_printf_i+0x13c>
 800c250:	6813      	ldr	r3, [r2, #0]
 800c252:	1d19      	adds	r1, r3, #4
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6011      	str	r1, [r2, #0]
 800c258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c25c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c260:	2301      	movs	r3, #1
 800c262:	e08c      	b.n	800c37e <_printf_i+0x1be>
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	6011      	str	r1, [r2, #0]
 800c268:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c26c:	bf18      	it	ne
 800c26e:	b21b      	sxthne	r3, r3
 800c270:	e7cf      	b.n	800c212 <_printf_i+0x52>
 800c272:	6813      	ldr	r3, [r2, #0]
 800c274:	6825      	ldr	r5, [r4, #0]
 800c276:	1d18      	adds	r0, r3, #4
 800c278:	6010      	str	r0, [r2, #0]
 800c27a:	0628      	lsls	r0, r5, #24
 800c27c:	d501      	bpl.n	800c282 <_printf_i+0xc2>
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	e002      	b.n	800c288 <_printf_i+0xc8>
 800c282:	0668      	lsls	r0, r5, #25
 800c284:	d5fb      	bpl.n	800c27e <_printf_i+0xbe>
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	4854      	ldr	r0, [pc, #336]	; (800c3dc <_printf_i+0x21c>)
 800c28a:	296f      	cmp	r1, #111	; 0x6f
 800c28c:	bf14      	ite	ne
 800c28e:	220a      	movne	r2, #10
 800c290:	2208      	moveq	r2, #8
 800c292:	2100      	movs	r1, #0
 800c294:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c298:	6865      	ldr	r5, [r4, #4]
 800c29a:	60a5      	str	r5, [r4, #8]
 800c29c:	2d00      	cmp	r5, #0
 800c29e:	f2c0 8095 	blt.w	800c3cc <_printf_i+0x20c>
 800c2a2:	6821      	ldr	r1, [r4, #0]
 800c2a4:	f021 0104 	bic.w	r1, r1, #4
 800c2a8:	6021      	str	r1, [r4, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d13d      	bne.n	800c32a <_printf_i+0x16a>
 800c2ae:	2d00      	cmp	r5, #0
 800c2b0:	f040 808e 	bne.w	800c3d0 <_printf_i+0x210>
 800c2b4:	4665      	mov	r5, ip
 800c2b6:	2a08      	cmp	r2, #8
 800c2b8:	d10b      	bne.n	800c2d2 <_printf_i+0x112>
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	07db      	lsls	r3, r3, #31
 800c2be:	d508      	bpl.n	800c2d2 <_printf_i+0x112>
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	6862      	ldr	r2, [r4, #4]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	bfde      	ittt	le
 800c2c8:	2330      	movle	r3, #48	; 0x30
 800c2ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2d2:	ebac 0305 	sub.w	r3, ip, r5
 800c2d6:	6123      	str	r3, [r4, #16]
 800c2d8:	f8cd 8000 	str.w	r8, [sp]
 800c2dc:	463b      	mov	r3, r7
 800c2de:	aa03      	add	r2, sp, #12
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	f7ff fef6 	bl	800c0d4 <_printf_common>
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	d14d      	bne.n	800c388 <_printf_i+0x1c8>
 800c2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f0:	b005      	add	sp, #20
 800c2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2f6:	4839      	ldr	r0, [pc, #228]	; (800c3dc <_printf_i+0x21c>)
 800c2f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c2fc:	6813      	ldr	r3, [r2, #0]
 800c2fe:	6821      	ldr	r1, [r4, #0]
 800c300:	1d1d      	adds	r5, r3, #4
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6015      	str	r5, [r2, #0]
 800c306:	060a      	lsls	r2, r1, #24
 800c308:	d50b      	bpl.n	800c322 <_printf_i+0x162>
 800c30a:	07ca      	lsls	r2, r1, #31
 800c30c:	bf44      	itt	mi
 800c30e:	f041 0120 	orrmi.w	r1, r1, #32
 800c312:	6021      	strmi	r1, [r4, #0]
 800c314:	b91b      	cbnz	r3, 800c31e <_printf_i+0x15e>
 800c316:	6822      	ldr	r2, [r4, #0]
 800c318:	f022 0220 	bic.w	r2, r2, #32
 800c31c:	6022      	str	r2, [r4, #0]
 800c31e:	2210      	movs	r2, #16
 800c320:	e7b7      	b.n	800c292 <_printf_i+0xd2>
 800c322:	064d      	lsls	r5, r1, #25
 800c324:	bf48      	it	mi
 800c326:	b29b      	uxthmi	r3, r3
 800c328:	e7ef      	b.n	800c30a <_printf_i+0x14a>
 800c32a:	4665      	mov	r5, ip
 800c32c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c330:	fb02 3311 	mls	r3, r2, r1, r3
 800c334:	5cc3      	ldrb	r3, [r0, r3]
 800c336:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c33a:	460b      	mov	r3, r1
 800c33c:	2900      	cmp	r1, #0
 800c33e:	d1f5      	bne.n	800c32c <_printf_i+0x16c>
 800c340:	e7b9      	b.n	800c2b6 <_printf_i+0xf6>
 800c342:	6813      	ldr	r3, [r2, #0]
 800c344:	6825      	ldr	r5, [r4, #0]
 800c346:	6961      	ldr	r1, [r4, #20]
 800c348:	1d18      	adds	r0, r3, #4
 800c34a:	6010      	str	r0, [r2, #0]
 800c34c:	0628      	lsls	r0, r5, #24
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	d501      	bpl.n	800c356 <_printf_i+0x196>
 800c352:	6019      	str	r1, [r3, #0]
 800c354:	e002      	b.n	800c35c <_printf_i+0x19c>
 800c356:	066a      	lsls	r2, r5, #25
 800c358:	d5fb      	bpl.n	800c352 <_printf_i+0x192>
 800c35a:	8019      	strh	r1, [r3, #0]
 800c35c:	2300      	movs	r3, #0
 800c35e:	6123      	str	r3, [r4, #16]
 800c360:	4665      	mov	r5, ip
 800c362:	e7b9      	b.n	800c2d8 <_printf_i+0x118>
 800c364:	6813      	ldr	r3, [r2, #0]
 800c366:	1d19      	adds	r1, r3, #4
 800c368:	6011      	str	r1, [r2, #0]
 800c36a:	681d      	ldr	r5, [r3, #0]
 800c36c:	6862      	ldr	r2, [r4, #4]
 800c36e:	2100      	movs	r1, #0
 800c370:	4628      	mov	r0, r5
 800c372:	f7f3 ff4d 	bl	8000210 <memchr>
 800c376:	b108      	cbz	r0, 800c37c <_printf_i+0x1bc>
 800c378:	1b40      	subs	r0, r0, r5
 800c37a:	6060      	str	r0, [r4, #4]
 800c37c:	6863      	ldr	r3, [r4, #4]
 800c37e:	6123      	str	r3, [r4, #16]
 800c380:	2300      	movs	r3, #0
 800c382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c386:	e7a7      	b.n	800c2d8 <_printf_i+0x118>
 800c388:	6923      	ldr	r3, [r4, #16]
 800c38a:	462a      	mov	r2, r5
 800c38c:	4639      	mov	r1, r7
 800c38e:	4630      	mov	r0, r6
 800c390:	47c0      	blx	r8
 800c392:	3001      	adds	r0, #1
 800c394:	d0aa      	beq.n	800c2ec <_printf_i+0x12c>
 800c396:	6823      	ldr	r3, [r4, #0]
 800c398:	079b      	lsls	r3, r3, #30
 800c39a:	d413      	bmi.n	800c3c4 <_printf_i+0x204>
 800c39c:	68e0      	ldr	r0, [r4, #12]
 800c39e:	9b03      	ldr	r3, [sp, #12]
 800c3a0:	4298      	cmp	r0, r3
 800c3a2:	bfb8      	it	lt
 800c3a4:	4618      	movlt	r0, r3
 800c3a6:	e7a3      	b.n	800c2f0 <_printf_i+0x130>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	464a      	mov	r2, r9
 800c3ac:	4639      	mov	r1, r7
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	47c0      	blx	r8
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	d09a      	beq.n	800c2ec <_printf_i+0x12c>
 800c3b6:	3501      	adds	r5, #1
 800c3b8:	68e3      	ldr	r3, [r4, #12]
 800c3ba:	9a03      	ldr	r2, [sp, #12]
 800c3bc:	1a9b      	subs	r3, r3, r2
 800c3be:	42ab      	cmp	r3, r5
 800c3c0:	dcf2      	bgt.n	800c3a8 <_printf_i+0x1e8>
 800c3c2:	e7eb      	b.n	800c39c <_printf_i+0x1dc>
 800c3c4:	2500      	movs	r5, #0
 800c3c6:	f104 0919 	add.w	r9, r4, #25
 800c3ca:	e7f5      	b.n	800c3b8 <_printf_i+0x1f8>
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1ac      	bne.n	800c32a <_printf_i+0x16a>
 800c3d0:	7803      	ldrb	r3, [r0, #0]
 800c3d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3da:	e76c      	b.n	800c2b6 <_printf_i+0xf6>
 800c3dc:	0800c6f1 	.word	0x0800c6f1
 800c3e0:	0800c702 	.word	0x0800c702

0800c3e4 <memmove>:
 800c3e4:	4288      	cmp	r0, r1
 800c3e6:	b510      	push	{r4, lr}
 800c3e8:	eb01 0302 	add.w	r3, r1, r2
 800c3ec:	d807      	bhi.n	800c3fe <memmove+0x1a>
 800c3ee:	1e42      	subs	r2, r0, #1
 800c3f0:	4299      	cmp	r1, r3
 800c3f2:	d00a      	beq.n	800c40a <memmove+0x26>
 800c3f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c3fc:	e7f8      	b.n	800c3f0 <memmove+0xc>
 800c3fe:	4283      	cmp	r3, r0
 800c400:	d9f5      	bls.n	800c3ee <memmove+0xa>
 800c402:	1881      	adds	r1, r0, r2
 800c404:	1ad2      	subs	r2, r2, r3
 800c406:	42d3      	cmn	r3, r2
 800c408:	d100      	bne.n	800c40c <memmove+0x28>
 800c40a:	bd10      	pop	{r4, pc}
 800c40c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c410:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c414:	e7f7      	b.n	800c406 <memmove+0x22>
	...

0800c418 <_free_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	4605      	mov	r5, r0
 800c41c:	2900      	cmp	r1, #0
 800c41e:	d045      	beq.n	800c4ac <_free_r+0x94>
 800c420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c424:	1f0c      	subs	r4, r1, #4
 800c426:	2b00      	cmp	r3, #0
 800c428:	bfb8      	it	lt
 800c42a:	18e4      	addlt	r4, r4, r3
 800c42c:	f000 f8d2 	bl	800c5d4 <__malloc_lock>
 800c430:	4a1f      	ldr	r2, [pc, #124]	; (800c4b0 <_free_r+0x98>)
 800c432:	6813      	ldr	r3, [r2, #0]
 800c434:	4610      	mov	r0, r2
 800c436:	b933      	cbnz	r3, 800c446 <_free_r+0x2e>
 800c438:	6063      	str	r3, [r4, #4]
 800c43a:	6014      	str	r4, [r2, #0]
 800c43c:	4628      	mov	r0, r5
 800c43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c442:	f000 b8c8 	b.w	800c5d6 <__malloc_unlock>
 800c446:	42a3      	cmp	r3, r4
 800c448:	d90c      	bls.n	800c464 <_free_r+0x4c>
 800c44a:	6821      	ldr	r1, [r4, #0]
 800c44c:	1862      	adds	r2, r4, r1
 800c44e:	4293      	cmp	r3, r2
 800c450:	bf04      	itt	eq
 800c452:	681a      	ldreq	r2, [r3, #0]
 800c454:	685b      	ldreq	r3, [r3, #4]
 800c456:	6063      	str	r3, [r4, #4]
 800c458:	bf04      	itt	eq
 800c45a:	1852      	addeq	r2, r2, r1
 800c45c:	6022      	streq	r2, [r4, #0]
 800c45e:	6004      	str	r4, [r0, #0]
 800c460:	e7ec      	b.n	800c43c <_free_r+0x24>
 800c462:	4613      	mov	r3, r2
 800c464:	685a      	ldr	r2, [r3, #4]
 800c466:	b10a      	cbz	r2, 800c46c <_free_r+0x54>
 800c468:	42a2      	cmp	r2, r4
 800c46a:	d9fa      	bls.n	800c462 <_free_r+0x4a>
 800c46c:	6819      	ldr	r1, [r3, #0]
 800c46e:	1858      	adds	r0, r3, r1
 800c470:	42a0      	cmp	r0, r4
 800c472:	d10b      	bne.n	800c48c <_free_r+0x74>
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	4401      	add	r1, r0
 800c478:	1858      	adds	r0, r3, r1
 800c47a:	4282      	cmp	r2, r0
 800c47c:	6019      	str	r1, [r3, #0]
 800c47e:	d1dd      	bne.n	800c43c <_free_r+0x24>
 800c480:	6810      	ldr	r0, [r2, #0]
 800c482:	6852      	ldr	r2, [r2, #4]
 800c484:	605a      	str	r2, [r3, #4]
 800c486:	4401      	add	r1, r0
 800c488:	6019      	str	r1, [r3, #0]
 800c48a:	e7d7      	b.n	800c43c <_free_r+0x24>
 800c48c:	d902      	bls.n	800c494 <_free_r+0x7c>
 800c48e:	230c      	movs	r3, #12
 800c490:	602b      	str	r3, [r5, #0]
 800c492:	e7d3      	b.n	800c43c <_free_r+0x24>
 800c494:	6820      	ldr	r0, [r4, #0]
 800c496:	1821      	adds	r1, r4, r0
 800c498:	428a      	cmp	r2, r1
 800c49a:	bf04      	itt	eq
 800c49c:	6811      	ldreq	r1, [r2, #0]
 800c49e:	6852      	ldreq	r2, [r2, #4]
 800c4a0:	6062      	str	r2, [r4, #4]
 800c4a2:	bf04      	itt	eq
 800c4a4:	1809      	addeq	r1, r1, r0
 800c4a6:	6021      	streq	r1, [r4, #0]
 800c4a8:	605c      	str	r4, [r3, #4]
 800c4aa:	e7c7      	b.n	800c43c <_free_r+0x24>
 800c4ac:	bd38      	pop	{r3, r4, r5, pc}
 800c4ae:	bf00      	nop
 800c4b0:	200049dc 	.word	0x200049dc

0800c4b4 <_malloc_r>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	1ccd      	adds	r5, r1, #3
 800c4b8:	f025 0503 	bic.w	r5, r5, #3
 800c4bc:	3508      	adds	r5, #8
 800c4be:	2d0c      	cmp	r5, #12
 800c4c0:	bf38      	it	cc
 800c4c2:	250c      	movcc	r5, #12
 800c4c4:	2d00      	cmp	r5, #0
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	db01      	blt.n	800c4ce <_malloc_r+0x1a>
 800c4ca:	42a9      	cmp	r1, r5
 800c4cc:	d903      	bls.n	800c4d6 <_malloc_r+0x22>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	6033      	str	r3, [r6, #0]
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	bd70      	pop	{r4, r5, r6, pc}
 800c4d6:	f000 f87d 	bl	800c5d4 <__malloc_lock>
 800c4da:	4a21      	ldr	r2, [pc, #132]	; (800c560 <_malloc_r+0xac>)
 800c4dc:	6814      	ldr	r4, [r2, #0]
 800c4de:	4621      	mov	r1, r4
 800c4e0:	b991      	cbnz	r1, 800c508 <_malloc_r+0x54>
 800c4e2:	4c20      	ldr	r4, [pc, #128]	; (800c564 <_malloc_r+0xb0>)
 800c4e4:	6823      	ldr	r3, [r4, #0]
 800c4e6:	b91b      	cbnz	r3, 800c4f0 <_malloc_r+0x3c>
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	f000 f863 	bl	800c5b4 <_sbrk_r>
 800c4ee:	6020      	str	r0, [r4, #0]
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	f000 f85e 	bl	800c5b4 <_sbrk_r>
 800c4f8:	1c43      	adds	r3, r0, #1
 800c4fa:	d124      	bne.n	800c546 <_malloc_r+0x92>
 800c4fc:	230c      	movs	r3, #12
 800c4fe:	6033      	str	r3, [r6, #0]
 800c500:	4630      	mov	r0, r6
 800c502:	f000 f868 	bl	800c5d6 <__malloc_unlock>
 800c506:	e7e4      	b.n	800c4d2 <_malloc_r+0x1e>
 800c508:	680b      	ldr	r3, [r1, #0]
 800c50a:	1b5b      	subs	r3, r3, r5
 800c50c:	d418      	bmi.n	800c540 <_malloc_r+0x8c>
 800c50e:	2b0b      	cmp	r3, #11
 800c510:	d90f      	bls.n	800c532 <_malloc_r+0x7e>
 800c512:	600b      	str	r3, [r1, #0]
 800c514:	50cd      	str	r5, [r1, r3]
 800c516:	18cc      	adds	r4, r1, r3
 800c518:	4630      	mov	r0, r6
 800c51a:	f000 f85c 	bl	800c5d6 <__malloc_unlock>
 800c51e:	f104 000b 	add.w	r0, r4, #11
 800c522:	1d23      	adds	r3, r4, #4
 800c524:	f020 0007 	bic.w	r0, r0, #7
 800c528:	1ac3      	subs	r3, r0, r3
 800c52a:	d0d3      	beq.n	800c4d4 <_malloc_r+0x20>
 800c52c:	425a      	negs	r2, r3
 800c52e:	50e2      	str	r2, [r4, r3]
 800c530:	e7d0      	b.n	800c4d4 <_malloc_r+0x20>
 800c532:	428c      	cmp	r4, r1
 800c534:	684b      	ldr	r3, [r1, #4]
 800c536:	bf16      	itet	ne
 800c538:	6063      	strne	r3, [r4, #4]
 800c53a:	6013      	streq	r3, [r2, #0]
 800c53c:	460c      	movne	r4, r1
 800c53e:	e7eb      	b.n	800c518 <_malloc_r+0x64>
 800c540:	460c      	mov	r4, r1
 800c542:	6849      	ldr	r1, [r1, #4]
 800c544:	e7cc      	b.n	800c4e0 <_malloc_r+0x2c>
 800c546:	1cc4      	adds	r4, r0, #3
 800c548:	f024 0403 	bic.w	r4, r4, #3
 800c54c:	42a0      	cmp	r0, r4
 800c54e:	d005      	beq.n	800c55c <_malloc_r+0xa8>
 800c550:	1a21      	subs	r1, r4, r0
 800c552:	4630      	mov	r0, r6
 800c554:	f000 f82e 	bl	800c5b4 <_sbrk_r>
 800c558:	3001      	adds	r0, #1
 800c55a:	d0cf      	beq.n	800c4fc <_malloc_r+0x48>
 800c55c:	6025      	str	r5, [r4, #0]
 800c55e:	e7db      	b.n	800c518 <_malloc_r+0x64>
 800c560:	200049dc 	.word	0x200049dc
 800c564:	200049e0 	.word	0x200049e0

0800c568 <_realloc_r>:
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	4607      	mov	r7, r0
 800c56c:	4614      	mov	r4, r2
 800c56e:	460e      	mov	r6, r1
 800c570:	b921      	cbnz	r1, 800c57c <_realloc_r+0x14>
 800c572:	4611      	mov	r1, r2
 800c574:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c578:	f7ff bf9c 	b.w	800c4b4 <_malloc_r>
 800c57c:	b922      	cbnz	r2, 800c588 <_realloc_r+0x20>
 800c57e:	f7ff ff4b 	bl	800c418 <_free_r>
 800c582:	4625      	mov	r5, r4
 800c584:	4628      	mov	r0, r5
 800c586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c588:	f000 f826 	bl	800c5d8 <_malloc_usable_size_r>
 800c58c:	42a0      	cmp	r0, r4
 800c58e:	d20f      	bcs.n	800c5b0 <_realloc_r+0x48>
 800c590:	4621      	mov	r1, r4
 800c592:	4638      	mov	r0, r7
 800c594:	f7ff ff8e 	bl	800c4b4 <_malloc_r>
 800c598:	4605      	mov	r5, r0
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d0f2      	beq.n	800c584 <_realloc_r+0x1c>
 800c59e:	4631      	mov	r1, r6
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	f7ff fc11 	bl	800bdc8 <memcpy>
 800c5a6:	4631      	mov	r1, r6
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f7ff ff35 	bl	800c418 <_free_r>
 800c5ae:	e7e9      	b.n	800c584 <_realloc_r+0x1c>
 800c5b0:	4635      	mov	r5, r6
 800c5b2:	e7e7      	b.n	800c584 <_realloc_r+0x1c>

0800c5b4 <_sbrk_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4c06      	ldr	r4, [pc, #24]	; (800c5d0 <_sbrk_r+0x1c>)
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	4605      	mov	r5, r0
 800c5bc:	4608      	mov	r0, r1
 800c5be:	6023      	str	r3, [r4, #0]
 800c5c0:	f7f6 fb72 	bl	8002ca8 <_sbrk>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d102      	bne.n	800c5ce <_sbrk_r+0x1a>
 800c5c8:	6823      	ldr	r3, [r4, #0]
 800c5ca:	b103      	cbz	r3, 800c5ce <_sbrk_r+0x1a>
 800c5cc:	602b      	str	r3, [r5, #0]
 800c5ce:	bd38      	pop	{r3, r4, r5, pc}
 800c5d0:	2000ca30 	.word	0x2000ca30

0800c5d4 <__malloc_lock>:
 800c5d4:	4770      	bx	lr

0800c5d6 <__malloc_unlock>:
 800c5d6:	4770      	bx	lr

0800c5d8 <_malloc_usable_size_r>:
 800c5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5dc:	1f18      	subs	r0, r3, #4
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	bfbc      	itt	lt
 800c5e2:	580b      	ldrlt	r3, [r1, r0]
 800c5e4:	18c0      	addlt	r0, r0, r3
 800c5e6:	4770      	bx	lr

0800c5e8 <_init>:
 800c5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ea:	bf00      	nop
 800c5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ee:	bc08      	pop	{r3}
 800c5f0:	469e      	mov	lr, r3
 800c5f2:	4770      	bx	lr

0800c5f4 <_fini>:
 800c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f6:	bf00      	nop
 800c5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5fa:	bc08      	pop	{r3}
 800c5fc:	469e      	mov	lr, r3
 800c5fe:	4770      	bx	lr
